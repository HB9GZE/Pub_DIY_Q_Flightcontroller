
C:\Users\Stefan\OneDrive\BLDC\BLDC STM32\Atollic_ARM_workspace_7.1\Atollic_BLDC_QC_CTR_V20\TrueSTUDIO\Atollic_BLDC_QC_CTR_V20\Debug\Atollic_BLDC_QC_CTR_V20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a124  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800a2b0  0800a2b0  0001a2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a55c  0800a55c  0001a55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800a560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          0000c9cc  20000070  20000070  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00010000  2000ca3c  2000ca3c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_line   00008dca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002238d  00000000  00000000  00028e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003cb3  00000000  00000000  0004b1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de0  00000000  00000000  0004eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001430  00000000  00000000  0004fc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000af2b  00000000  00000000  000510c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c2f  00000000  00000000  0005bfeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00061c1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003100  00000000  00000000  00061c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a294 	.word	0x0800a294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800a294 	.word	0x0800a294

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr  r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b52:	f003 ff9d 	bl	8004a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f007 f831 	bl	8007bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f002 fbad 	bl	80032b8 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b64:	0800a560 	.word	0x0800a560
  ldr  r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b70:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b74:	2000ca3c 	.word	0x2000ca3c

08000b78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <CAN1_RX0_IRQHandler>
	...

08000b7c <write8>:
extern double temperature, pressure;
extern uint8_t dataReadyfromMPU9250Counter;

//Writes an 8 bit value over I2C
void write8(uint8_t reg, uint8_t value)
{
 8000b7c:	b507      	push	{r0, r1, r2, lr}
	sendBMP280Buffer[0] = reg;
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <write8+0x1c>)
	sendBMP280Buffer[1] = value;
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, sendBMP280Buffer, 2, 100);
 8000b80:	2364      	movs	r3, #100	; 0x64
	sendBMP280Buffer[0] = reg;
 8000b82:	7010      	strb	r0, [r2, #0]
	sendBMP280Buffer[1] = value;
 8000b84:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, sendBMP280Buffer, 2, 100);
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <write8+0x20>)
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	21ec      	movs	r1, #236	; 0xec
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f005 f89b 	bl	8005cc8 <HAL_I2C_Master_Transmit>
}
 8000b92:	b003      	add	sp, #12
 8000b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b98:	2000c808 	.word	0x2000c808
 8000b9c:	200041fc 	.word	0x200041fc

08000ba0 <BMP280_Init>:
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, readBMP280Buffer, 1, 300); //how do we do this with interrupt
	return readBMP280Buffer[0];
}

void BMP280_Init()
{
 8000ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	write8(BMP280_REGISTER_SOFTRESET, 0xB6); 	//soft reset
 8000ba2:	21b6      	movs	r1, #182	; 0xb6
 8000ba4:	20e0      	movs	r0, #224	; 0xe0
 8000ba6:	f7ff ffe9 	bl	8000b7c <write8>
	write8(BMP280_REGISTER_CONFIG, 0x30); 		//no SPI, max IIR filter, 62,5ms (15,4 Hz) t_standby
 8000baa:	2130      	movs	r1, #48	; 0x30
 8000bac:	20f5      	movs	r0, #245	; 0xf5
 8000bae:	f7ff ffe5 	bl	8000b7c <write8>
	write8(BMP280_REGISTER_CONTROL, 0x57); 		//temp. oversampl 2x, pressure oversampl. 16x, normal mode
 8000bb2:	2157      	movs	r1, #87	; 0x57
 8000bb4:	20f4      	movs	r0, #244	; 0xf4
 8000bb6:	f7ff ffe1 	bl	8000b7c <write8>
	HAL_Delay(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f003 ffca 	bl	8004b54 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDRESS, BMP280_REGISTER_STARTCALIB, I2C_MEMADD_SIZE_8BIT, readBMP280Buffer, 24, 100);
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	4c25      	ldr	r4, [pc, #148]	; (8000c58 <BMP280_Init+0xb8>)
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	2318      	movs	r3, #24
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	9400      	str	r4, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2288      	movs	r2, #136	; 0x88
 8000bd0:	21ec      	movs	r1, #236	; 0xec
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <BMP280_Init+0xbc>)
 8000bd4:	f005 f94e 	bl	8005e74 <HAL_I2C_Mem_Read>
	_bmp280_calib.dig_T1 = (uint16_t) ((readBMP280Buffer[1] << 8) + readBMP280Buffer[0]);
 8000bd8:	7861      	ldrb	r1, [r4, #1]
 8000bda:	7822      	ldrb	r2, [r4, #0]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <BMP280_Init+0xc0>)
 8000bde:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000be2:	801a      	strh	r2, [r3, #0]
	_bmp280_calib.dig_T2 = (int16_t) ((readBMP280Buffer[3] << 8) + readBMP280Buffer[2]);
 8000be4:	78e1      	ldrb	r1, [r4, #3]
 8000be6:	78a2      	ldrb	r2, [r4, #2]
 8000be8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000bec:	805a      	strh	r2, [r3, #2]
	_bmp280_calib.dig_T3 = (int16_t) ((readBMP280Buffer[5] << 8) + readBMP280Buffer[4]);
 8000bee:	7961      	ldrb	r1, [r4, #5]
 8000bf0:	7922      	ldrb	r2, [r4, #4]
 8000bf2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000bf6:	809a      	strh	r2, [r3, #4]
	_bmp280_calib.dig_P1 = (uint16_t) ((readBMP280Buffer[7] << 8) + readBMP280Buffer[6]);
 8000bf8:	79e1      	ldrb	r1, [r4, #7]
 8000bfa:	79a2      	ldrb	r2, [r4, #6]
 8000bfc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c00:	80da      	strh	r2, [r3, #6]
	_bmp280_calib.dig_P2 = (int16_t) ((readBMP280Buffer[9] << 8) + readBMP280Buffer[8]);
 8000c02:	7a61      	ldrb	r1, [r4, #9]
 8000c04:	7a22      	ldrb	r2, [r4, #8]
 8000c06:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c0a:	811a      	strh	r2, [r3, #8]
	_bmp280_calib.dig_P3 = (int16_t) ((readBMP280Buffer[11] << 8) + readBMP280Buffer[10]);
 8000c0c:	7ae1      	ldrb	r1, [r4, #11]
 8000c0e:	7aa2      	ldrb	r2, [r4, #10]
 8000c10:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c14:	815a      	strh	r2, [r3, #10]
	_bmp280_calib.dig_P4 = (int16_t) ((readBMP280Buffer[13] << 8) + readBMP280Buffer[12]);
 8000c16:	7b61      	ldrb	r1, [r4, #13]
 8000c18:	7b22      	ldrb	r2, [r4, #12]
 8000c1a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c1e:	819a      	strh	r2, [r3, #12]
	_bmp280_calib.dig_P5 = (int16_t) ((readBMP280Buffer[15] << 8) + readBMP280Buffer[14]);
 8000c20:	7be1      	ldrb	r1, [r4, #15]
 8000c22:	7ba2      	ldrb	r2, [r4, #14]
 8000c24:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c28:	81da      	strh	r2, [r3, #14]
	_bmp280_calib.dig_P6 = (int16_t) ((readBMP280Buffer[17] << 8) + readBMP280Buffer[16]);
 8000c2a:	7c61      	ldrb	r1, [r4, #17]
 8000c2c:	7c22      	ldrb	r2, [r4, #16]
 8000c2e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c32:	821a      	strh	r2, [r3, #16]
	_bmp280_calib.dig_P7 = (int16_t) ((readBMP280Buffer[19] << 8) + readBMP280Buffer[18]);
 8000c34:	7ce1      	ldrb	r1, [r4, #19]
 8000c36:	7ca2      	ldrb	r2, [r4, #18]
 8000c38:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c3c:	825a      	strh	r2, [r3, #18]
	_bmp280_calib.dig_P8 = (int16_t) ((readBMP280Buffer[21] << 8) + readBMP280Buffer[20]);
 8000c3e:	7d61      	ldrb	r1, [r4, #21]
 8000c40:	7d22      	ldrb	r2, [r4, #20]
 8000c42:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c46:	829a      	strh	r2, [r3, #20]
	_bmp280_calib.dig_P9 = (int16_t) ((readBMP280Buffer[23] << 8) + readBMP280Buffer[22]);
 8000c48:	7de1      	ldrb	r1, [r4, #23]
 8000c4a:	7da2      	ldrb	r2, [r4, #22]
 8000c4c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000c50:	82da      	strh	r2, [r3, #22]
}
 8000c52:	b004      	add	sp, #16
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	2000ca12 	.word	0x2000ca12
 8000c5c:	200041fc 	.word	0x200041fc
 8000c60:	2000009e 	.word	0x2000009e

08000c64 <readPandT>:

//Reads P and T registers and construct the 20bit value
void readPandT(uint8_t reg, uint8_t buffer[24])
{
 8000c64:	b507      	push	{r0, r1, r2, lr}
	dataReadyfromBMP280 = SET;
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <readPandT+0x20>)
 8000c68:	2301      	movs	r3, #1
 8000c6a:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Mem_Read_IT(&hi2c1, BMP280_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buffer, 6);
 8000c6c:	2206      	movs	r2, #6
 8000c6e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8000c72:	4602      	mov	r2, r0
 8000c74:	21ec      	movs	r1, #236	; 0xec
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <readPandT+0x24>)
 8000c78:	f005 fa0c 	bl	8006094 <HAL_I2C_Mem_Read_IT>
}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c82:	bf00      	nop
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	200041fc 	.word	0x200041fc

08000c8c <calcDoubleBMP280Temperature>:

double calcDoubleBMP280Temperature(void)
{
	double var1, var2, T;
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000c8c:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <calcDoubleBMP280Temperature+0xe0>)
{
 8000c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8000d88 <calcDoubleBMP280Temperature+0xfc>
 8000c98:	f7ff fbe8 	bl	800046c <__aeabi_i2d>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	f8ba 0000 	ldrh.w	r0, [sl]
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	f7ff fbd2 	bl	800044c <__aeabi_ui2d>
	var2 = ((((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0) * (((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0))
 8000ca8:	2200      	movs	r2, #0
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000caa:	4604      	mov	r4, r0
 8000cac:	460d      	mov	r5, r1
	var2 = ((((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0) * (((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0))
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <calcDoubleBMP280Temperature+0xe4>)
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fc40 	bl	8000538 <__aeabi_dmul>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4680      	mov	r8, r0
 8000cbc:	4689      	mov	r9, r1
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <calcDoubleBMP280Temperature+0xe8>)
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	f7ff fc38 	bl	8000538 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4640      	mov	r0, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	f7ff fa7e 	bl	80001d0 <__aeabi_dsub>
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000cd4:	2200      	movs	r2, #0
	var2 = ((((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0) * (((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0))
 8000cd6:	4680      	mov	r8, r0
 8000cd8:	4689      	mov	r9, r1
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <calcDoubleBMP280Temperature+0xec>)
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fc2a 	bl	8000538 <__aeabi_dmul>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4606      	mov	r6, r0
 8000ce8:	460f      	mov	r7, r1
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <calcDoubleBMP280Temperature+0xf0>)
 8000cec:	4620      	mov	r0, r4
 8000cee:	4629      	mov	r1, r5
 8000cf0:	f7ff fc22 	bl	8000538 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f7ff fa68 	bl	80001d0 <__aeabi_dsub>
 8000d00:	4604      	mov	r4, r0
 8000d02:	f9ba 0002 	ldrsh.w	r0, [sl, #2]
 8000d06:	460d      	mov	r5, r1
 8000d08:	f7ff fbb0 	bl	800046c <__aeabi_i2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	f7ff fc10 	bl	8000538 <__aeabi_dmul>
 8000d18:	4604      	mov	r4, r0
			* ((double) _bmp280_calib.dig_T3);
 8000d1a:	f9ba 0004 	ldrsh.w	r0, [sl, #4]
	var1 = (((double) adc_T) / 16384.0 - ((double) _bmp280_calib.dig_T1) / 1024.0) * ((double) _bmp280_calib.dig_T2);
 8000d1e:	460d      	mov	r5, r1
			* ((double) _bmp280_calib.dig_T3);
 8000d20:	f7ff fba4 	bl	800046c <__aeabi_i2d>
	var2 = ((((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0) * (((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0))
 8000d24:	4642      	mov	r2, r8
			* ((double) _bmp280_calib.dig_T3);
 8000d26:	4606      	mov	r6, r0
 8000d28:	460f      	mov	r7, r1
	var2 = ((((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0) * (((double) adc_T) / 131072.0 - ((double) _bmp280_calib.dig_T1) / 8192.0))
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	4649      	mov	r1, r9
 8000d30:	f7ff fc02 	bl	8000538 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4630      	mov	r0, r6
 8000d3a:	4639      	mov	r1, r7
 8000d3c:	f7ff fbfc 	bl	8000538 <__aeabi_dmul>
	t_fine = (int32_t) (var1 + var2);
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4620      	mov	r0, r4
 8000d46:	4629      	mov	r1, r5
 8000d48:	f7ff fa44 	bl	80001d4 <__adddf3>
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460d      	mov	r5, r1
 8000d50:	f7ff fea2 	bl	8000a98 <__aeabi_d2iz>
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <calcDoubleBMP280Temperature+0xf4>)
	T = (var1 + var2) / 5120.0;
 8000d56:	2200      	movs	r2, #0
	t_fine = (int32_t) (var1 + var2);
 8000d58:	6018      	str	r0, [r3, #0]
	T = (var1 + var2) / 5120.0;
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <calcDoubleBMP280Temperature+0xf8>)
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f7ff fd14 	bl	800078c <__aeabi_ddiv>
	return T;
}
 8000d64:	ec41 0b10 	vmov	d0, r0, r1
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	3ee00000 	.word	0x3ee00000
 8000d74:	3f200000 	.word	0x3f200000
 8000d78:	3f100000 	.word	0x3f100000
 8000d7c:	3f500000 	.word	0x3f500000
 8000d80:	200000c4 	.word	0x200000c4
 8000d84:	40b40000 	.word	0x40b40000
 8000d88:	2000009e 	.word	0x2000009e
 8000d8c:	00000000 	.word	0x00000000

08000d90 <calcDoubleBMP280Pressure>:

double calcDoubleBMP280Pressure()
{
	double var1, var2, p;
	var1 = (t_fine / 2.0) - 64000.0;
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <calcDoubleBMP280Pressure+0x1f8>)
{
 8000d92:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	var1 = (t_fine / 2.0) - 64000.0;
 8000d96:	6818      	ldr	r0, [r3, #0]
	var2 = var1 * var1 * ((double) _bmp280_calib.dig_P6) / 32768.0;
	var2 = var2 + (var1 * ((double) _bmp280_calib.dig_P5) * 2.0);
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
	var1 = (((double) _bmp280_calib.dig_P3) * var1 * var1 / 524288.0 + ((double) _bmp280_calib.dig_P2) * var1) / 524288.0;
 8000d98:	4c7c      	ldr	r4, [pc, #496]	; (8000f8c <calcDoubleBMP280Pressure+0x1fc>)
	var1 = (t_fine / 2.0) - 64000.0;
 8000d9a:	f7ff fb67 	bl	800046c <__aeabi_i2d>
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <calcDoubleBMP280Pressure+0x200>)
 8000da2:	f7ff fbc9 	bl	8000538 <__aeabi_dmul>
 8000da6:	2200      	movs	r2, #0
 8000da8:	4b7a      	ldr	r3, [pc, #488]	; (8000f94 <calcDoubleBMP280Pressure+0x204>)
 8000daa:	f7ff fa11 	bl	80001d0 <__aeabi_dsub>
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
	var1 = (((double) _bmp280_calib.dig_P3) * var1 * var1 / 524288.0 + ((double) _bmp280_calib.dig_P2) * var1) / 524288.0;
 8000db2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8000db6:	f7ff fb59 	bl	800046c <__aeabi_i2d>
 8000dba:	4632      	mov	r2, r6
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	f7ff fbbb 	bl	8000538 <__aeabi_dmul>
 8000dc2:	4632      	mov	r2, r6
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	f7ff fbb7 	bl	8000538 <__aeabi_dmul>
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8000dd0:	f7ff fbb2 	bl	8000538 <__aeabi_dmul>
 8000dd4:	4680      	mov	r8, r0
 8000dd6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8000dda:	4689      	mov	r9, r1
 8000ddc:	f7ff fb46 	bl	800046c <__aeabi_i2d>
 8000de0:	4632      	mov	r2, r6
 8000de2:	463b      	mov	r3, r7
 8000de4:	f7ff fba8 	bl	8000538 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4640      	mov	r0, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	f7ff f9f0 	bl	80001d4 <__adddf3>
 8000df4:	2200      	movs	r2, #0
 8000df6:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8000dfa:	f7ff fb9d 	bl	8000538 <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0) * ((double) _bmp280_calib.dig_P1);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000e04:	f7ff fb98 	bl	8000538 <__aeabi_dmul>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4b63      	ldr	r3, [pc, #396]	; (8000f98 <calcDoubleBMP280Pressure+0x208>)
 8000e0c:	f7ff f9e2 	bl	80001d4 <__adddf3>
 8000e10:	4680      	mov	r8, r0
 8000e12:	4689      	mov	r9, r1
 8000e14:	88e0      	ldrh	r0, [r4, #6]
 8000e16:	f7ff fb19 	bl	800044c <__aeabi_ui2d>
 8000e1a:	4642      	mov	r2, r8
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	f7ff fb8b 	bl	8000538 <__aeabi_dmul>
	if (var1 == 0.0)
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
	var1 = (1.0 + var1 / 32768.0) * ((double) _bmp280_calib.dig_P1);
 8000e26:	4682      	mov	sl, r0
 8000e28:	468b      	mov	fp, r1
	if (var1 == 0.0)
 8000e2a:	f7ff fded 	bl	8000a08 <__aeabi_dcmpeq>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	f040 80a0 	bne.w	8000f74 <calcDoubleBMP280Pressure+0x1e4>
	var2 = var1 * var1 * ((double) _bmp280_calib.dig_P6) / 32768.0;
 8000e34:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8000e38:	f7ff fb18 	bl	800046c <__aeabi_i2d>
 8000e3c:	4632      	mov	r2, r6
 8000e3e:	4680      	mov	r8, r0
 8000e40:	4689      	mov	r9, r1
 8000e42:	463b      	mov	r3, r7
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff fb76 	bl	8000538 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4640      	mov	r0, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	f7ff fb70 	bl	8000538 <__aeabi_dmul>
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000e5e:	f7ff fb6b 	bl	8000538 <__aeabi_dmul>
 8000e62:	4680      	mov	r8, r0
	var2 = var2 + (var1 * ((double) _bmp280_calib.dig_P5) * 2.0);
 8000e64:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
	var2 = var1 * var1 * ((double) _bmp280_calib.dig_P6) / 32768.0;
 8000e68:	4689      	mov	r9, r1
	var2 = var2 + (var1 * ((double) _bmp280_calib.dig_P5) * 2.0);
 8000e6a:	f7ff faff 	bl	800046c <__aeabi_i2d>
 8000e6e:	4632      	mov	r2, r6
 8000e70:	463b      	mov	r3, r7
 8000e72:	f7ff fb61 	bl	8000538 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	f7ff f9ab 	bl	80001d4 <__adddf3>
 8000e7e:	4642      	mov	r2, r8
 8000e80:	464b      	mov	r3, r9
 8000e82:	f7ff f9a7 	bl	80001d4 <__adddf3>
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <calcDoubleBMP280Pressure+0x20c>)
 8000e8a:	f7ff fb55 	bl	8000538 <__aeabi_dmul>
		return 0;
	p = 1048576.0 - (double) adc_P;
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <calcDoubleBMP280Pressure+0x210>)
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
 8000e90:	4680      	mov	r8, r0
	p = 1048576.0 - (double) adc_P;
 8000e92:	6818      	ldr	r0, [r3, #0]
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
 8000e94:	4689      	mov	r9, r1
	p = 1048576.0 - (double) adc_P;
 8000e96:	f7ff fae9 	bl	800046c <__aeabi_i2d>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	4940      	ldr	r1, [pc, #256]	; (8000fa4 <calcDoubleBMP280Pressure+0x214>)
 8000ea2:	f7ff f995 	bl	80001d0 <__aeabi_dsub>
 8000ea6:	4606      	mov	r6, r0
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
 8000ea8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
	p = 1048576.0 - (double) adc_P;
 8000eac:	460f      	mov	r7, r1
	var2 = (var2 / 4.0) + (((double) _bmp280_calib.dig_P4) * 65536.0);
 8000eae:	f7ff fadd 	bl	800046c <__aeabi_i2d>
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <calcDoubleBMP280Pressure+0x218>)
 8000eb6:	f7ff fb3f 	bl	8000538 <__aeabi_dmul>
 8000eba:	4642      	mov	r2, r8
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	f7ff f989 	bl	80001d4 <__adddf3>
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4b39      	ldr	r3, [pc, #228]	; (8000fac <calcDoubleBMP280Pressure+0x21c>)
 8000ec6:	f7ff fb37 	bl	8000538 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4639      	mov	r1, r7
 8000ed2:	f7ff f97d 	bl	80001d0 <__aeabi_dsub>
 8000ed6:	a32a      	add	r3, pc, #168	; (adr r3, 8000f80 <calcDoubleBMP280Pressure+0x1f0>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fb2c 	bl	8000538 <__aeabi_dmul>
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	465b      	mov	r3, fp
 8000ee4:	f7ff fc52 	bl	800078c <__aeabi_ddiv>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	460f      	mov	r7, r1
	var1 = ((double) _bmp280_calib.dig_P9) * p * p / 2147483648.0;
 8000eec:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8000ef0:	f7ff fabc 	bl	800046c <__aeabi_i2d>
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	f7ff fb1e 	bl	8000538 <__aeabi_dmul>
 8000efc:	4632      	mov	r2, r6
 8000efe:	463b      	mov	r3, r7
 8000f00:	f7ff fb1a 	bl	8000538 <__aeabi_dmul>
 8000f04:	2200      	movs	r2, #0
 8000f06:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8000f0a:	f7ff fb15 	bl	8000538 <__aeabi_dmul>
 8000f0e:	4680      	mov	r8, r0
	var2 = p * ((double) _bmp280_calib.dig_P8) / 32768.0;
 8000f10:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
	var1 = ((double) _bmp280_calib.dig_P9) * p * p / 2147483648.0;
 8000f14:	4689      	mov	r9, r1
	var2 = p * ((double) _bmp280_calib.dig_P8) / 32768.0;
 8000f16:	f7ff faa9 	bl	800046c <__aeabi_i2d>
 8000f1a:	4632      	mov	r2, r6
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	f7ff fb0b 	bl	8000538 <__aeabi_dmul>
 8000f22:	2200      	movs	r2, #0
 8000f24:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000f28:	f7ff fb06 	bl	8000538 <__aeabi_dmul>
	p = p + (var1 + var2 + ((double) _bmp280_calib.dig_P7)) / 16.0;
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4640      	mov	r0, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	f7ff f94e 	bl	80001d4 <__adddf3>
 8000f38:	4680      	mov	r8, r0
 8000f3a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8000f3e:	4689      	mov	r9, r1
 8000f40:	f7ff fa94 	bl	800046c <__aeabi_i2d>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4640      	mov	r0, r8
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	f7ff f942 	bl	80001d4 <__adddf3>
 8000f50:	2200      	movs	r2, #0
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <calcDoubleBMP280Pressure+0x220>)
 8000f54:	f7ff faf0 	bl	8000538 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	4639      	mov	r1, r7
 8000f60:	f7ff f938 	bl	80001d4 <__adddf3>
	return p / 100;
 8000f64:	2200      	movs	r2, #0
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <calcDoubleBMP280Pressure+0x224>)
 8000f68:	f7ff fc10 	bl	800078c <__aeabi_ddiv>
}
 8000f6c:	ec41 0b10 	vmov	d0, r0, r1
 8000f70:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8000f74:	2000      	movs	r0, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	e7f8      	b.n	8000f6c <calcDoubleBMP280Pressure+0x1dc>
 8000f7a:	bf00      	nop
 8000f7c:	f3af 8000 	nop.w
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40b86a00 	.word	0x40b86a00
 8000f88:	200000c4 	.word	0x200000c4
 8000f8c:	2000009e 	.word	0x2000009e
 8000f90:	3fe00000 	.word	0x3fe00000
 8000f94:	40ef4000 	.word	0x40ef4000
 8000f98:	3ff00000 	.word	0x3ff00000
 8000f9c:	3fd00000 	.word	0x3fd00000
 8000fa0:	20000094 	.word	0x20000094
 8000fa4:	41300000 	.word	0x41300000
 8000fa8:	40f00000 	.word	0x40f00000
 8000fac:	3f300000 	.word	0x3f300000
 8000fb0:	3fb00000 	.word	0x3fb00000
 8000fb4:	40590000 	.word	0x40590000

08000fb8 <calcDoubleBMP280Altitude>:
{
	double altitude;
	//double pressure = calcBMP280Pressure(); // in Si units for Pascal
	//pressure /= 100;
	// altitude = 44330 * (1.0 - pow(pressure / (pressure/pow(1-(600/44330.0),5.255)), 0.1903));
	altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 1 / 5.255));
 8000fb8:	4911      	ldr	r1, [pc, #68]	; (8001000 <calcDoubleBMP280Altitude+0x48>)
{
 8000fba:	b508      	push	{r3, lr}
	altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 1 / 5.255));
 8000fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fc0:	ec53 2b10 	vmov	r2, r3, d0
 8000fc4:	f7ff fbe2 	bl	800078c <__aeabi_ddiv>
 8000fc8:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8000ff0 <calcDoubleBMP280Altitude+0x38>
 8000fcc:	ec41 0b10 	vmov	d0, r0, r1
 8000fd0:	f006 fea8 	bl	8007d24 <pow>
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	ec53 2b10 	vmov	r2, r3, d0
 8000fda:	490a      	ldr	r1, [pc, #40]	; (8001004 <calcDoubleBMP280Altitude+0x4c>)
 8000fdc:	f7ff f8f8 	bl	80001d0 <__aeabi_dsub>
 8000fe0:	a305      	add	r3, pc, #20	; (adr r3, 8000ff8 <calcDoubleBMP280Altitude+0x40>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff faa7 	bl	8000538 <__aeabi_dmul>
	return altitude;
}
 8000fea:	ec41 0b10 	vmov	d0, r0, r1
 8000fee:	bd08      	pop	{r3, pc}
 8000ff0:	ccd9456c 	.word	0xccd9456c
 8000ff4:	3fc85b95 	.word	0x3fc85b95
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40e5a540 	.word	0x40e5a540
 8001000:	20004740 	.word	0x20004740
 8001004:	3ff00000 	.word	0x3ff00000

08001008 <MPU9250_Init>:
extern uint8_t sendAK8963Buffer[2];
extern uint8_t magCalibration[3];
extern double fabCalConst[3];

void MPU9250_Init()
{
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sendMPU9250Buffer[0] = PWR_MGMT_1;
 800100c:	4cbd      	ldr	r4, [pc, #756]	; (8001304 <MPU9250_Init+0x2fc>)
	sendMPU9250Buffer[1] = 0x80; //clear sleep mode bit(6), enable all sensors
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800100e:	4dbe      	ldr	r5, [pc, #760]	; (8001308 <MPU9250_Init+0x300>)
	sendMPU9250Buffer[1] = 0x02; //no interrupt now; active bypass
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
	HAL_Delay(2);

		// start reading the factory cal. values
		sendAK8963Buffer[0] = AK8963_CNTL1;
 8001010:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8001320 <MPU9250_Init+0x318>
{
 8001014:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001016:	2764      	movs	r7, #100	; 0x64
	sendMPU9250Buffer[1] = 0x80; //clear sleep mode bit(6), enable all sensors
 8001018:	2380      	movs	r3, #128	; 0x80
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800101a:	4622      	mov	r2, r4
	sendMPU9250Buffer[0] = PWR_MGMT_1;
 800101c:	266b      	movs	r6, #107	; 0x6b
	sendMPU9250Buffer[1] = 0x80; //clear sleep mode bit(6), enable all sensors
 800101e:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	2302      	movs	r3, #2
 8001024:	9700      	str	r7, [sp, #0]
 8001026:	4628      	mov	r0, r5
	sendMPU9250Buffer[0] = PWR_MGMT_1;
 8001028:	7026      	strb	r6, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800102a:	f004 fe4d 	bl	8005cc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800102e:	2002      	movs	r0, #2
 8001030:	f003 fd90 	bl	8004b54 <HAL_Delay>
	sendMPU9250Buffer[1] = 0x01; //auto select clock source to be PLL X axis gyroscope reference if ready
 8001034:	f04f 0b01 	mov.w	fp, #1
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001038:	4622      	mov	r2, r4
 800103a:	2302      	movs	r3, #2
 800103c:	21d0      	movs	r1, #208	; 0xd0
 800103e:	9700      	str	r7, [sp, #0]
 8001040:	4628      	mov	r0, r5
	sendMPU9250Buffer[0] = PWR_MGMT_1;
 8001042:	7026      	strb	r6, [r4, #0]
	sendMPU9250Buffer[1] = 0x01; //auto select clock source to be PLL X axis gyroscope reference if ready
 8001044:	f884 b001 	strb.w	fp, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001048:	f004 fe3e 	bl	8005cc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f003 fd81 	bl	8004b54 <HAL_Delay>
	sendMPU9250Buffer[0] = USER_CTRL;
 8001052:	f04f 036a 	mov.w	r3, #106	; 0x6a
	sendMPU9250Buffer[1] = 0x00; // disable master mode; attach external I2C to AK8963
 8001056:	f04f 0a00 	mov.w	sl, #0
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800105a:	4622      	mov	r2, r4
	sendMPU9250Buffer[0] = USER_CTRL;
 800105c:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800105e:	21d0      	movs	r1, #208	; 0xd0
 8001060:	2302      	movs	r3, #2
 8001062:	9700      	str	r7, [sp, #0]
 8001064:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x00; // disable master mode; attach external I2C to AK8963
 8001066:	f884 a001 	strb.w	sl, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800106a:	f004 fe2d 	bl	8005cc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800106e:	2002      	movs	r0, #2
	sendMPU9250Buffer[1] = 0x02; //no interrupt now; active bypass
 8001070:	2602      	movs	r6, #2
	HAL_Delay(2);
 8001072:	f003 fd6f 	bl	8004b54 <HAL_Delay>
	sendMPU9250Buffer[0] = INT_PIN_CFG;
 8001076:	f04f 0337 	mov.w	r3, #55	; 0x37
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800107a:	4622      	mov	r2, r4
	sendMPU9250Buffer[0] = INT_PIN_CFG;
 800107c:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800107e:	21d0      	movs	r1, #208	; 0xd0
 8001080:	4633      	mov	r3, r6
 8001082:	9700      	str	r7, [sp, #0]
 8001084:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x02; //no interrupt now; active bypass
 8001086:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001088:	f004 fe1e 	bl	8005cc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800108c:	4630      	mov	r0, r6
 800108e:	f003 fd61 	bl	8004b54 <HAL_Delay>
		sendAK8963Buffer[1] = 0x00; //power down
		HAL_I2C_Master_Transmit(&hi2c1, AK8963_ADDRESS, sendAK8963Buffer, 2, 300);
 8001092:	f44f 7996 	mov.w	r9, #300	; 0x12c
		sendAK8963Buffer[0] = AK8963_CNTL1;
 8001096:	f04f 030a 	mov.w	r3, #10
 800109a:	f888 3000 	strb.w	r3, [r8]
		sendAK8963Buffer[1] = 0x00; //power down
 800109e:	f888 a001 	strb.w	sl, [r8, #1]
		HAL_I2C_Master_Transmit(&hi2c1, AK8963_ADDRESS, sendAK8963Buffer, 2, 300);
 80010a2:	4633      	mov	r3, r6
 80010a4:	4642      	mov	r2, r8
 80010a6:	2118      	movs	r1, #24
 80010a8:	f8cd 9000 	str.w	r9, [sp]
 80010ac:	4628      	mov	r0, r5
 80010ae:	f004 fe0b 	bl	8005cc8 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f003 fd4e 	bl	8004b54 <HAL_Delay>

		sendAK8963Buffer[0] = AK8963_CNTL1;
 80010b8:	f04f 030a 	mov.w	r3, #10
 80010bc:	f888 3000 	strb.w	r3, [r8]
		sendAK8963Buffer[1] = 0x0F; //power up in fuse ROM read mode
 80010c0:	230f      	movs	r3, #15
 80010c2:	f888 3001 	strb.w	r3, [r8, #1]
		HAL_I2C_Master_Transmit(&hi2c1, AK8963_ADDRESS, sendAK8963Buffer, 2, 300);
 80010c6:	4642      	mov	r2, r8
 80010c8:	4633      	mov	r3, r6
 80010ca:	2118      	movs	r1, #24
 80010cc:	f8cd 9000 	str.w	r9, [sp]
 80010d0:	4628      	mov	r0, r5
 80010d2:	f004 fdf9 	bl	8005cc8 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f003 fd3c 	bl	8004b54 <HAL_Delay>

		HAL_I2C_Mem_Read(&hi2c1, AK8963_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, magCalibration, 3, 300); //read the factory stored calibration values
 80010dc:	2303      	movs	r3, #3
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b8a      	ldr	r3, [pc, #552]	; (800130c <MPU9250_Init+0x304>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2210      	movs	r2, #16
 80010e6:	465b      	mov	r3, fp
 80010e8:	2118      	movs	r1, #24
 80010ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80010ee:	4628      	mov	r0, r5
 80010f0:	f004 fec0 	bl	8005e74 <HAL_I2C_Mem_Read>
		HAL_Delay(5);
 80010f4:	2005      	movs	r0, #5
 80010f6:	f003 fd2d 	bl	8004b54 <HAL_Delay>

		fabCalConst[0] = ((((double) magCalibration[0] - 128) * 0.5 / 128) + 1);
 80010fa:	4b84      	ldr	r3, [pc, #528]	; (800130c <MPU9250_Init+0x304>)
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	f7ff f9a5 	bl	800044c <__aeabi_ui2d>
 8001102:	2200      	movs	r2, #0
 8001104:	4b82      	ldr	r3, [pc, #520]	; (8001310 <MPU9250_Init+0x308>)
 8001106:	f7ff f863 	bl	80001d0 <__aeabi_dsub>
 800110a:	2200      	movs	r2, #0
 800110c:	4b81      	ldr	r3, [pc, #516]	; (8001314 <MPU9250_Init+0x30c>)
 800110e:	f7ff fa13 	bl	8000538 <__aeabi_dmul>
 8001112:	2200      	movs	r2, #0
 8001114:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001118:	f7ff fa0e 	bl	8000538 <__aeabi_dmul>
 800111c:	2200      	movs	r2, #0
 800111e:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <MPU9250_Init+0x310>)
 8001120:	f7ff f858 	bl	80001d4 <__adddf3>
 8001124:	4b7d      	ldr	r3, [pc, #500]	; (800131c <MPU9250_Init+0x314>)
 8001126:	e9c3 0100 	strd	r0, r1, [r3]
		fabCalConst[1] = ((((double) magCalibration[1] - 128) * 0.5 / 128) + 1);
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <MPU9250_Init+0x304>)
 800112c:	7858      	ldrb	r0, [r3, #1]
 800112e:	f7ff f98d 	bl	800044c <__aeabi_ui2d>
 8001132:	2200      	movs	r2, #0
 8001134:	4b76      	ldr	r3, [pc, #472]	; (8001310 <MPU9250_Init+0x308>)
 8001136:	f7ff f84b 	bl	80001d0 <__aeabi_dsub>
 800113a:	2200      	movs	r2, #0
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <MPU9250_Init+0x30c>)
 800113e:	f7ff f9fb 	bl	8000538 <__aeabi_dmul>
 8001142:	2200      	movs	r2, #0
 8001144:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001148:	f7ff f9f6 	bl	8000538 <__aeabi_dmul>
 800114c:	2200      	movs	r2, #0
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <MPU9250_Init+0x310>)
 8001150:	f7ff f840 	bl	80001d4 <__adddf3>
 8001154:	4b71      	ldr	r3, [pc, #452]	; (800131c <MPU9250_Init+0x314>)
 8001156:	e9c3 0102 	strd	r0, r1, [r3, #8]
		fabCalConst[2] = ((((double) magCalibration[2] - 128) * 0.5 / 128) + 1);
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <MPU9250_Init+0x304>)
 800115c:	7898      	ldrb	r0, [r3, #2]
 800115e:	f7ff f975 	bl	800044c <__aeabi_ui2d>
 8001162:	2200      	movs	r2, #0
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <MPU9250_Init+0x308>)
 8001166:	f7ff f833 	bl	80001d0 <__aeabi_dsub>
 800116a:	2200      	movs	r2, #0
 800116c:	4b69      	ldr	r3, [pc, #420]	; (8001314 <MPU9250_Init+0x30c>)
 800116e:	f7ff f9e3 	bl	8000538 <__aeabi_dmul>
 8001172:	2200      	movs	r2, #0
 8001174:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001178:	f7ff f9de 	bl	8000538 <__aeabi_dmul>
 800117c:	2200      	movs	r2, #0
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <MPU9250_Init+0x310>)
 8001180:	f7ff f828 	bl	80001d4 <__adddf3>
 8001184:	4b65      	ldr	r3, [pc, #404]	; (800131c <MPU9250_Init+0x314>)

		sendAK8963Buffer[0] = AK8963_CNTL1;
		sendAK8963Buffer[1] = 0x00; //power down
 8001186:	f888 a001 	strb.w	sl, [r8, #1]
		fabCalConst[2] = ((((double) magCalibration[2] - 128) * 0.5 / 128) + 1);
 800118a:	e9c3 0104 	strd	r0, r1, [r3, #16]
		sendAK8963Buffer[0] = AK8963_CNTL1;
 800118e:	f04f 030a 	mov.w	r3, #10
 8001192:	f888 3000 	strb.w	r3, [r8]
		HAL_I2C_Master_Transmit(&hi2c1, AK8963_ADDRESS, sendAK8963Buffer, 2, 300);
 8001196:	4642      	mov	r2, r8
 8001198:	4633      	mov	r3, r6
 800119a:	2118      	movs	r1, #24
 800119c:	f8cd 9000 	str.w	r9, [sp]
 80011a0:	4628      	mov	r0, r5
 80011a2:	f004 fd91 	bl	8005cc8 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f003 fcd4 	bl	8004b54 <HAL_Delay>

		sendAK8963Buffer[0] = AK8963_CNTL1;
 80011ac:	f04f 030a 	mov.w	r3, #10
 80011b0:	f888 3000 	strb.w	r3, [r8]
		sendAK8963Buffer[1] = 0x06; //power up and set to 16 bit and 100Hz update (cont. meas. mode 2)= 0x16; in 14bit resolution: 0x06;
 80011b4:	2306      	movs	r3, #6
 80011b6:	f888 3001 	strb.w	r3, [r8, #1]
		HAL_I2C_Master_Transmit(&hi2c1, AK8963_ADDRESS, sendAK8963Buffer, 2, 300);
 80011ba:	4642      	mov	r2, r8
 80011bc:	4633      	mov	r3, r6
 80011be:	2118      	movs	r1, #24
 80011c0:	f8cd 9000 	str.w	r9, [sp]
 80011c4:	4628      	mov	r0, r5
 80011c6:	f004 fd7f 	bl	8005cc8 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f003 fcc2 	bl	8004b54 <HAL_Delay>

	sendMPU9250Buffer[0] = I2C_MST_CTRL;
 80011d0:	2324      	movs	r3, #36	; 0x24
 80011d2:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x4D; //turn on master I2C clock at 400kHz and Wait_for_ES
 80011d4:	234d      	movs	r3, #77	; 0x4d
 80011d6:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80011d8:	4622      	mov	r2, r4
 80011da:	4633      	mov	r3, r6
 80011dc:	9700      	str	r7, [sp, #0]
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	4628      	mov	r0, r5
 80011e2:	f004 fd71 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = USER_CTRL;
 80011e6:	f04f 036a 	mov.w	r3, #106	; 0x6a
 80011ea:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x20; //enable master mode; isolate external I2C from AK8963
 80011ec:	2320      	movs	r3, #32
 80011ee:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80011f0:	4622      	mov	r2, r4
 80011f2:	4633      	mov	r3, r6
 80011f4:	9700      	str	r7, [sp, #0]
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	4628      	mov	r0, r5
 80011fa:	f004 fd65 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = INT_PIN_CFG;
 80011fe:	f04f 0337 	mov.w	r3, #55	; 0x37
 8001202:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x10; //only int pulse, clear on read, no bypass
 8001204:	f04f 0810 	mov.w	r8, #16
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001208:	4633      	mov	r3, r6
 800120a:	4622      	mov	r2, r4
 800120c:	9700      	str	r7, [sp, #0]
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x10; //only int pulse, clear on read, no bypass
 8001212:	f884 8001 	strb.w	r8, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001216:	f004 fd57 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = CONFIG;
 800121a:	231a      	movs	r3, #26
	sendMPU9250Buffer[1] = 0x01; //disable FSYNC. sample rate at 1000Hz,gyro BW: 0x01= 184Hz,  0x05 = 10Hz
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800121c:	4622      	mov	r2, r4
	sendMPU9250Buffer[0] = CONFIG;
 800121e:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001220:	21d0      	movs	r1, #208	; 0xd0
 8001222:	4633      	mov	r3, r6
 8001224:	9700      	str	r7, [sp, #0]
 8001226:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x01; //disable FSYNC. sample rate at 1000Hz,gyro BW: 0x01= 184Hz,  0x05 = 10Hz
 8001228:	f884 b001 	strb.w	fp, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800122c:	f004 fd4c 	bl	8005cc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001230:	2005      	movs	r0, #5
 8001232:	f003 fc8f 	bl	8004b54 <HAL_Delay>

	sendMPU9250Buffer[0] = SMPLRT_DIV;
 8001236:	2319      	movs	r3, #25
 8001238:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x01; //sampling rate 0x02 = /3 equals to 333Hz rate
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800123a:	4622      	mov	r2, r4
 800123c:	4633      	mov	r3, r6
 800123e:	9700      	str	r7, [sp, #0]
 8001240:	21d0      	movs	r1, #208	; 0xd0
 8001242:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x01; //sampling rate 0x02 = /3 equals to 333Hz rate
 8001244:	f884 b001 	strb.w	fp, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001248:	f004 fd3e 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = GYRO_CONFIG;
 800124c:	231b      	movs	r3, #27
 800124e:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x00;  //set gyro sensitivity to 0x18=2000dps, 0x08=500dps, 0x10=1000dps, 0x00=250dps
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001250:	4622      	mov	r2, r4
 8001252:	4633      	mov	r3, r6
 8001254:	9700      	str	r7, [sp, #0]
 8001256:	21d0      	movs	r1, #208	; 0xd0
 8001258:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x00;  //set gyro sensitivity to 0x18=2000dps, 0x08=500dps, 0x10=1000dps, 0x00=250dps
 800125a:	f884 a001 	strb.w	sl, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 800125e:	f004 fd33 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = ACCEL_CONFIG;
 8001262:	231c      	movs	r3, #28
 8001264:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x10;  //set accelerator sensitivity to 0x10 = 8g, 0x00 = 2g
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001266:	4622      	mov	r2, r4
 8001268:	4633      	mov	r3, r6
 800126a:	9700      	str	r7, [sp, #0]
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x10;  //set accelerator sensitivity to 0x10 = 8g, 0x00 = 2g
 8001270:	f884 8001 	strb.w	r8, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001274:	f004 fd28 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = ACCEL_CONFIG2;
 8001278:	231d      	movs	r3, #29
 800127a:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x03;  //0x03 = rate 1kHz and BW 44.8Hz, 0x05 = 10Hz
 800127c:	f04f 0303 	mov.w	r3, #3
 8001280:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001282:	4622      	mov	r2, r4
 8001284:	4633      	mov	r3, r6
 8001286:	9700      	str	r7, [sp, #0]
 8001288:	21d0      	movs	r1, #208	; 0xd0
 800128a:	4628      	mov	r0, r5
 800128c:	f004 fd1c 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = FIFO_EN;
 8001290:	2323      	movs	r3, #35	; 0x23
 8001292:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x00; //no FIFO
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 8001294:	4622      	mov	r2, r4
 8001296:	4633      	mov	r3, r6
 8001298:	9700      	str	r7, [sp, #0]
 800129a:	21d0      	movs	r1, #208	; 0xd0
 800129c:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x00; //no FIFO
 800129e:	f884 a001 	strb.w	sl, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012a2:	f004 fd11 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = I2C_SLV0_ADDR;
 80012a6:	2325      	movs	r3, #37	; 0x25
 80012a8:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x8C; // address of magnetometer is 0x0C and set to READ
 80012aa:	238c      	movs	r3, #140	; 0x8c
 80012ac:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012ae:	4622      	mov	r2, r4
 80012b0:	4633      	mov	r3, r6
 80012b2:	9700      	str	r7, [sp, #0]
 80012b4:	21d0      	movs	r1, #208	; 0xd0
 80012b6:	4628      	mov	r0, r5
 80012b8:	f004 fd06 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = I2C_SLV0_REG;
 80012bc:	2326      	movs	r3, #38	; 0x26
 80012be:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x02; // start read data from where?
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012c0:	4622      	mov	r2, r4
 80012c2:	4633      	mov	r3, r6
 80012c4:	9700      	str	r7, [sp, #0]
 80012c6:	21d0      	movs	r1, #208	; 0xd0
 80012c8:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x02; // start read data from where?
 80012ca:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012cc:	f004 fcfc 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = I2C_SLV0_CTRL;
 80012d0:	2327      	movs	r3, #39	; 0x27
 80012d2:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x88; // reads 8 bytes. no swap, group with even end
 80012d4:	2388      	movs	r3, #136	; 0x88
 80012d6:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012d8:	4622      	mov	r2, r4
 80012da:	4633      	mov	r3, r6
 80012dc:	9700      	str	r7, [sp, #0]
 80012de:	21d0      	movs	r1, #208	; 0xd0
 80012e0:	4628      	mov	r0, r5
 80012e2:	f004 fcf1 	bl	8005cc8 <HAL_I2C_Master_Transmit>

	sendMPU9250Buffer[0] = INT_ENABLE;
 80012e6:	2338      	movs	r3, #56	; 0x38
 80012e8:	7023      	strb	r3, [r4, #0]
	sendMPU9250Buffer[1] = 0x01; //raw data ready
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012ea:	9700      	str	r7, [sp, #0]
 80012ec:	4633      	mov	r3, r6
 80012ee:	4622      	mov	r2, r4
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4628      	mov	r0, r5
	sendMPU9250Buffer[1] = 0x01; //raw data ready
 80012f4:	f884 b001 	strb.w	fp, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, sendMPU9250Buffer, 2, 100);
 80012f8:	f004 fce6 	bl	8005cc8 <HAL_I2C_Master_Transmit>
}
 80012fc:	b005      	add	sp, #20
 80012fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001302:	bf00      	nop
 8001304:	200086fc 	.word	0x200086fc
 8001308:	200041fc 	.word	0x200041fc
 800130c:	2000c948 	.word	0x2000c948
 8001310:	40600000 	.word	0x40600000
 8001314:	3fe00000 	.word	0x3fe00000
 8001318:	3ff00000 	.word	0x3ff00000
 800131c:	2000c910 	.word	0x2000c910
 8001320:	20004810 	.word	0x20004810
 8001324:	00000000 	.word	0x00000000

08001328 <setPIDFactors>:
#include "PID.h"

void setPIDFactors()
{

	krpm = 100;
 8001328:	4929      	ldr	r1, [pc, #164]	; (80013d0 <setPIDFactors+0xa8>)
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <setPIDFactors+0xac>)
 800132c:	2000      	movs	r0, #0
{
 800132e:	b5f0      	push	{r4, r5, r6, r7, lr}
	krpm = 100;
 8001330:	e9c3 0100 	strd	r0, r1, [r3]
	k1 = 0.7;
 8001334:	a120      	add	r1, pc, #128	; (adr r1, 80013b8 <setPIDFactors+0x90>)
 8001336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <setPIDFactors+0xb0>)

	kpp = kpr = 1.0;
	kdp = kdr = 1.5;
	kip = kir = 0.3;

	kpy = 5.0;
 800133c:	4f27      	ldr	r7, [pc, #156]	; (80013dc <setPIDFactors+0xb4>)
	k1 = 0.7;
 800133e:	e9c3 0100 	strd	r0, r1, [r3]
	k2 = 2.0;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <setPIDFactors+0xb8>)
 8001344:	2000      	movs	r0, #0
 8001346:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	ktot = 1.4;
 800134a:	a51d      	add	r5, pc, #116	; (adr r5, 80013c0 <setPIDFactors+0x98>)
 800134c:	e9d5 4500 	ldrd	r4, r5, [r5]
	k2 = 2.0;
 8001350:	e9c3 0100 	strd	r0, r1, [r3]
	ktot = 1.4;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <setPIDFactors+0xbc>)
 8001356:	e9c3 4500 	strd	r4, r5, [r3]
	ko = 3.0;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <setPIDFactors+0xc0>)
 800135c:	4d23      	ldr	r5, [pc, #140]	; (80013ec <setPIDFactors+0xc4>)
 800135e:	2400      	movs	r4, #0
 8001360:	e9c3 4500 	strd	r4, r5, [r3]
	kpp = kpr = 1.0;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <setPIDFactors+0xc8>)
 8001366:	4c23      	ldr	r4, [pc, #140]	; (80013f4 <setPIDFactors+0xcc>)
 8001368:	2200      	movs	r2, #0
 800136a:	e9c4 2300 	strd	r2, r3, [r4]
 800136e:	4c22      	ldr	r4, [pc, #136]	; (80013f8 <setPIDFactors+0xd0>)
 8001370:	e9c4 2300 	strd	r2, r3, [r4]
	kdp = kdr = 1.5;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <setPIDFactors+0xd4>)
 8001376:	4c22      	ldr	r4, [pc, #136]	; (8001400 <setPIDFactors+0xd8>)
 8001378:	2200      	movs	r2, #0
 800137a:	e9c4 2300 	strd	r2, r3, [r4]
 800137e:	4c21      	ldr	r4, [pc, #132]	; (8001404 <setPIDFactors+0xdc>)
 8001380:	e9c4 2300 	strd	r2, r3, [r4]
	kip = kir = 0.3;
 8001384:	a310      	add	r3, pc, #64	; (adr r3, 80013c8 <setPIDFactors+0xa0>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	4c1f      	ldr	r4, [pc, #124]	; (8001408 <setPIDFactors+0xe0>)
 800138c:	e9c4 2300 	strd	r2, r3, [r4]
 8001390:	4c1e      	ldr	r4, [pc, #120]	; (800140c <setPIDFactors+0xe4>)
 8001392:	e9c4 2300 	strd	r2, r3, [r4]
	kpy = 5.0;
 8001396:	4c1e      	ldr	r4, [pc, #120]	; (8001410 <setPIDFactors+0xe8>)
 8001398:	2600      	movs	r6, #0
 800139a:	e9c4 6700 	strd	r6, r7, [r4]
	kdy = 2.0;
 800139e:	4c1d      	ldr	r4, [pc, #116]	; (8001414 <setPIDFactors+0xec>)
 80013a0:	e9c4 0100 	strd	r0, r1, [r4]
	kiy = 0.3;
 80013a4:	491c      	ldr	r1, [pc, #112]	; (8001418 <setPIDFactors+0xf0>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]

	sampleFrequency = 500.0;
 80013aa:	491c      	ldr	r1, [pc, #112]	; (800141c <setPIDFactors+0xf4>)
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <setPIDFactors+0xf8>)
 80013ae:	2000      	movs	r0, #0
 80013b0:	e9c3 0100 	strd	r0, r1, [r3]
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	66666666 	.word	0x66666666
 80013bc:	3fe66666 	.word	0x3fe66666
 80013c0:	66666666 	.word	0x66666666
 80013c4:	3ff66666 	.word	0x3ff66666
 80013c8:	33333333 	.word	0x33333333
 80013cc:	3fd33333 	.word	0x3fd33333
 80013d0:	40590000 	.word	0x40590000
 80013d4:	20000140 	.word	0x20000140
 80013d8:	20000250 	.word	0x20000250
 80013dc:	40140000 	.word	0x40140000
 80013e0:	200001c0 	.word	0x200001c0
 80013e4:	20000238 	.word	0x20000238
 80013e8:	200001b8 	.word	0x200001b8
 80013ec:	40080000 	.word	0x40080000
 80013f0:	3ff00000 	.word	0x3ff00000
 80013f4:	20000258 	.word	0x20000258
 80013f8:	20000178 	.word	0x20000178
 80013fc:	3ff80000 	.word	0x3ff80000
 8001400:	20000170 	.word	0x20000170
 8001404:	200001a8 	.word	0x200001a8
 8001408:	20000188 	.word	0x20000188
 800140c:	200001c8 	.word	0x200001c8
 8001410:	20000168 	.word	0x20000168
 8001414:	20000158 	.word	0x20000158
 8001418:	20000130 	.word	0x20000130
 800141c:	407f4000 	.word	0x407f4000
 8001420:	20000180 	.word	0x20000180
 8001424:	00000000 	.word	0x00000000

08001428 <ComputePIDRoll>:
}

void ComputePIDRoll()
{
	errorR = (-setRoll - roll);
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <ComputePIDRoll+0x198>)
{
 800142a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	errorR = (-setRoll - roll);
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001436:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <ComputePIDRoll+0x19c>)
 8001438:	4d63      	ldr	r5, [pc, #396]	; (80015c8 <ComputePIDRoll+0x1a0>)
	dErrR = errorR - lastErrR;
	errSumR = errSumR + (errorR / sampleFrequency); // 1/333Hz = 0.003s
 800143a:	4c64      	ldr	r4, [pc, #400]	; (80015cc <ComputePIDRoll+0x1a4>)
{
 800143c:	b085      	sub	sp, #20
	errorR = (-setRoll - roll);
 800143e:	4610      	mov	r0, r2
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7fe fec4 	bl	80001d0 <__aeabi_dsub>
 8001448:	e9c5 0100 	strd	r0, r1, [r5]
	dErrR = errorR - lastErrR;
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <ComputePIDRoll+0x1a8>)
 800144e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe febb 	bl	80001d0 <__aeabi_dsub>
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <ComputePIDRoll+0x1ac>)
 800145c:	e9c3 0100 	strd	r0, r1, [r3]
	errSumR = errSumR + (errorR / sampleFrequency); // 1/333Hz = 0.003s
 8001460:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <ComputePIDRoll+0x1b0>)
 8001462:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	e9d4 6700 	ldrd	r6, r7, [r4]
 800146e:	f7ff f98d 	bl	800078c <__aeabi_ddiv>
 8001472:	4632      	mov	r2, r6
 8001474:	463b      	mov	r3, r7
 8001476:	f7fe fead 	bl	80001d4 <__adddf3>
 800147a:	e9c4 0100 	strd	r0, r1, [r4]
	if (errSumR > 20)
 800147e:	4f57      	ldr	r7, [pc, #348]	; (80015dc <ComputePIDRoll+0x1b4>)
 8001480:	2600      	movs	r6, #0
 8001482:	4632      	mov	r2, r6
 8001484:	463b      	mov	r3, r7
 8001486:	e9d4 0100 	ldrd	r0, r1, [r4]
 800148a:	f7ff fae5 	bl	8000a58 <__aeabi_dcmpgt>
 800148e:	46ab      	mov	fp, r5
 8001490:	b110      	cbz	r0, 8001498 <ComputePIDRoll+0x70>
	{
		errSumR = 20;
	}
	else if (errSumR < -20)
	{
		errSumR = -20;
 8001492:	e9c4 6700 	strd	r6, r7, [r4]
 8001496:	e009      	b.n	80014ac <ComputePIDRoll+0x84>
	else if (errSumR < -20)
 8001498:	4f51      	ldr	r7, [pc, #324]	; (80015e0 <ComputePIDRoll+0x1b8>)
 800149a:	2600      	movs	r6, #0
 800149c:	e9d4 0100 	ldrd	r0, r1, [r4]
 80014a0:	4632      	mov	r2, r6
 80014a2:	463b      	mov	r3, r7
 80014a4:	f7ff faba 	bl	8000a1c <__aeabi_dcmplt>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d1f2      	bne.n	8001492 <ComputePIDRoll+0x6a>
	}

	outputR[0] = outputR[1];
 80014ac:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80015fc <ComputePIDRoll+0x1d4>
 80014b0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80014b4:	e9ca 2300 	strd	r2, r3, [sl]
	outputR[1] = outputR[2];
 80014b8:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 80014bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
	outputR[2] = (1 * kpr * errorR) + (100 * kir * errSumR) + (100 * kdr * dErrR);
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <ComputePIDRoll+0x1bc>)
 80014c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <ComputePIDRoll+0x1c0>)
 80014c8:	e9db 6700 	ldrd	r6, r7, [fp]
 80014cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <ComputePIDRoll+0x1a4>)
 80014d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014d6:	4b45      	ldr	r3, [pc, #276]	; (80015ec <ComputePIDRoll+0x1c4>)
 80014d8:	ed93 7b00 	vldr	d7, [r3]
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <ComputePIDRoll+0x1ac>)
 80014de:	ed8d 7b00 	vstr	d7, [sp]
 80014e2:	ed93 7b00 	vldr	d7, [r3]
 80014e6:	2200      	movs	r2, #0
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <ComputePIDRoll+0x1c8>)
 80014ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80014ee:	f7ff f823 	bl	8000538 <__aeabi_dmul>
 80014f2:	4622      	mov	r2, r4
 80014f4:	462b      	mov	r3, r5
 80014f6:	f7ff f81f 	bl	8000538 <__aeabi_dmul>
 80014fa:	4632      	mov	r2, r6
 80014fc:	4604      	mov	r4, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	463b      	mov	r3, r7
 8001502:	4640      	mov	r0, r8
 8001504:	4649      	mov	r1, r9
 8001506:	f7ff f817 	bl	8000538 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fe5f 	bl	80001d4 <__adddf3>
 8001516:	2200      	movs	r2, #0
 8001518:	4604      	mov	r4, r0
 800151a:	460d      	mov	r5, r1
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <ComputePIDRoll+0x1c8>)
 800151e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001522:	f7ff f809 	bl	8000538 <__aeabi_dmul>
 8001526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800152a:	f7ff f805 	bl	8000538 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4620      	mov	r0, r4
 8001534:	4629      	mov	r1, r5
 8001536:	f7fe fe4d 	bl	80001d4 <__adddf3>
 800153a:	e9ca 0104 	strd	r0, r1, [sl, #16]
	outputR[10] = (0.6 * outputR[0] + 0.9 * outputR[1] + 1.5 * outputR[2]) / 3;
 800153e:	a31c      	add	r3, pc, #112	; (adr r3, 80015b0 <ComputePIDRoll+0x188>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	e9da 0100 	ldrd	r0, r1, [sl]
 8001548:	f7fe fff6 	bl	8000538 <__aeabi_dmul>
 800154c:	e9da 8902 	ldrd	r8, r9, [sl, #8]
 8001550:	4606      	mov	r6, r0
 8001552:	460f      	mov	r7, r1
 8001554:	a318      	add	r3, pc, #96	; (adr r3, 80015b8 <ComputePIDRoll+0x190>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	4640      	mov	r0, r8
 800155c:	4649      	mov	r1, r9
 800155e:	f7fe ffeb 	bl	8000538 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4630      	mov	r0, r6
 8001568:	4639      	mov	r1, r7
 800156a:	f7fe fe33 	bl	80001d4 <__adddf3>
 800156e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 8001572:	4606      	mov	r6, r0
 8001574:	460f      	mov	r7, r1
 8001576:	2200      	movs	r2, #0
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <ComputePIDRoll+0x1cc>)
 800157a:	4620      	mov	r0, r4
 800157c:	4629      	mov	r1, r5
 800157e:	f7fe ffdb 	bl	8000538 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4630      	mov	r0, r6
 8001588:	4639      	mov	r1, r7
 800158a:	f7fe fe23 	bl	80001d4 <__adddf3>
 800158e:	2200      	movs	r2, #0
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <ComputePIDRoll+0x1d0>)
 8001592:	f7ff f8fb 	bl	800078c <__aeabi_ddiv>
 8001596:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
	lastErrR = errorR;
 800159a:	e9db 0100 	ldrd	r0, r1, [fp]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <ComputePIDRoll+0x1a8>)
 80015a0:	e9c3 0100 	strd	r0, r1, [r3]
}
 80015a4:	b005      	add	sp, #20
 80015a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	33333333 	.word	0x33333333
 80015b4:	3fe33333 	.word	0x3fe33333
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	3feccccc 	.word	0x3feccccc
 80015c0:	20004638 	.word	0x20004638
 80015c4:	2000c8a8 	.word	0x2000c8a8
 80015c8:	20000240 	.word	0x20000240
 80015cc:	20000230 	.word	0x20000230
 80015d0:	200001d0 	.word	0x200001d0
 80015d4:	20000128 	.word	0x20000128
 80015d8:	20000180 	.word	0x20000180
 80015dc:	40340000 	.word	0x40340000
 80015e0:	c0340000 	.word	0xc0340000
 80015e4:	20000258 	.word	0x20000258
 80015e8:	20000188 	.word	0x20000188
 80015ec:	20000170 	.word	0x20000170
 80015f0:	40590000 	.word	0x40590000
 80015f4:	3ff80000 	.word	0x3ff80000
 80015f8:	40080000 	.word	0x40080000
 80015fc:	200001d8 	.word	0x200001d8

08001600 <ComputePIDPitch>:

void ComputePIDPitch()
{
	errorP = (-setPitch - pitch);
 8001600:	4b65      	ldr	r3, [pc, #404]	; (8001798 <ComputePIDPitch+0x198>)
{
 8001602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	errorP = (-setPitch - pitch);
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <ComputePIDPitch+0x19c>)
 8001610:	4d63      	ldr	r5, [pc, #396]	; (80017a0 <ComputePIDPitch+0x1a0>)
	dErrP = errorP - lastErrP;
	errSumP = errSumP + (errorP / sampleFrequency);
 8001612:	4c64      	ldr	r4, [pc, #400]	; (80017a4 <ComputePIDPitch+0x1a4>)
{
 8001614:	b085      	sub	sp, #20
	errorP = (-setPitch - pitch);
 8001616:	4610      	mov	r0, r2
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fdd8 	bl	80001d0 <__aeabi_dsub>
 8001620:	e9c5 0100 	strd	r0, r1, [r5]
	dErrP = errorP - lastErrP;
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <ComputePIDPitch+0x1a8>)
 8001626:	e9d5 0100 	ldrd	r0, r1, [r5]
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe fdcf 	bl	80001d0 <__aeabi_dsub>
 8001632:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <ComputePIDPitch+0x1ac>)
 8001634:	e9c3 0100 	strd	r0, r1, [r3]
	errSumP = errSumP + (errorP / sampleFrequency);
 8001638:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <ComputePIDPitch+0x1b0>)
 800163a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001646:	f7ff f8a1 	bl	800078c <__aeabi_ddiv>
 800164a:	4632      	mov	r2, r6
 800164c:	463b      	mov	r3, r7
 800164e:	f7fe fdc1 	bl	80001d4 <__adddf3>
 8001652:	e9c4 0100 	strd	r0, r1, [r4]
	if (errSumP > 20)
 8001656:	4f57      	ldr	r7, [pc, #348]	; (80017b4 <ComputePIDPitch+0x1b4>)
 8001658:	2600      	movs	r6, #0
 800165a:	4632      	mov	r2, r6
 800165c:	463b      	mov	r3, r7
 800165e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001662:	f7ff f9f9 	bl	8000a58 <__aeabi_dcmpgt>
 8001666:	46ab      	mov	fp, r5
 8001668:	b110      	cbz	r0, 8001670 <ComputePIDPitch+0x70>
	{
		errSumP = 20;
	}
	else if (errSumP < -20)
	{
		errSumP = -20;
 800166a:	e9c4 6700 	strd	r6, r7, [r4]
 800166e:	e009      	b.n	8001684 <ComputePIDPitch+0x84>
	else if (errSumP < -20)
 8001670:	4f51      	ldr	r7, [pc, #324]	; (80017b8 <ComputePIDPitch+0x1b8>)
 8001672:	2600      	movs	r6, #0
 8001674:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001678:	4632      	mov	r2, r6
 800167a:	463b      	mov	r3, r7
 800167c:	f7ff f9ce 	bl	8000a1c <__aeabi_dcmplt>
 8001680:	2800      	cmp	r0, #0
 8001682:	d1f2      	bne.n	800166a <ComputePIDPitch+0x6a>
	}

	outputP[0] = outputP[1];
 8001684:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80017d4 <ComputePIDPitch+0x1d4>
 8001688:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800168c:	e9ca 2300 	strd	r2, r3, [sl]
	outputP[1] = outputP[2];
 8001690:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8001694:	e9ca 2302 	strd	r2, r3, [sl, #8]
	outputP[2] = (1 * kpp * errorP) + (100 * kip * errSumP) + (100 * kdp * dErrP);
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <ComputePIDPitch+0x1bc>)
 800169a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <ComputePIDPitch+0x1c0>)
 80016a0:	e9db 6700 	ldrd	r6, r7, [fp]
 80016a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <ComputePIDPitch+0x1a4>)
 80016aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016ae:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <ComputePIDPitch+0x1c4>)
 80016b0:	ed93 7b00 	vldr	d7, [r3]
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <ComputePIDPitch+0x1ac>)
 80016b6:	ed8d 7b00 	vstr	d7, [sp]
 80016ba:	ed93 7b00 	vldr	d7, [r3]
 80016be:	2200      	movs	r2, #0
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <ComputePIDPitch+0x1c8>)
 80016c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016c6:	f7fe ff37 	bl	8000538 <__aeabi_dmul>
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	f7fe ff33 	bl	8000538 <__aeabi_dmul>
 80016d2:	4632      	mov	r2, r6
 80016d4:	4604      	mov	r4, r0
 80016d6:	460d      	mov	r5, r1
 80016d8:	463b      	mov	r3, r7
 80016da:	4640      	mov	r0, r8
 80016dc:	4649      	mov	r1, r9
 80016de:	f7fe ff2b 	bl	8000538 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	f7fe fd73 	bl	80001d4 <__adddf3>
 80016ee:	2200      	movs	r2, #0
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <ComputePIDPitch+0x1c8>)
 80016f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80016fa:	f7fe ff1d 	bl	8000538 <__aeabi_dmul>
 80016fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001702:	f7fe ff19 	bl	8000538 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe fd61 	bl	80001d4 <__adddf3>
 8001712:	e9ca 0104 	strd	r0, r1, [sl, #16]
	outputP[10] = (0.6 * outputP[0] + 0.9 * outputP[1] + 1.5 * outputP[2]) / 3;
 8001716:	a31c      	add	r3, pc, #112	; (adr r3, 8001788 <ComputePIDPitch+0x188>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	e9da 0100 	ldrd	r0, r1, [sl]
 8001720:	f7fe ff0a 	bl	8000538 <__aeabi_dmul>
 8001724:	e9da 8902 	ldrd	r8, r9, [sl, #8]
 8001728:	4606      	mov	r6, r0
 800172a:	460f      	mov	r7, r1
 800172c:	a318      	add	r3, pc, #96	; (adr r3, 8001790 <ComputePIDPitch+0x190>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	4640      	mov	r0, r8
 8001734:	4649      	mov	r1, r9
 8001736:	f7fe feff 	bl	8000538 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4630      	mov	r0, r6
 8001740:	4639      	mov	r1, r7
 8001742:	f7fe fd47 	bl	80001d4 <__adddf3>
 8001746:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 800174a:	4606      	mov	r6, r0
 800174c:	460f      	mov	r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <ComputePIDPitch+0x1cc>)
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe feef 	bl	8000538 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4630      	mov	r0, r6
 8001760:	4639      	mov	r1, r7
 8001762:	f7fe fd37 	bl	80001d4 <__adddf3>
 8001766:	2200      	movs	r2, #0
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <ComputePIDPitch+0x1d0>)
 800176a:	f7ff f80f 	bl	800078c <__aeabi_ddiv>
 800176e:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
	lastErrP = errorP;
 8001772:	e9db 0100 	ldrd	r0, r1, [fp]
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <ComputePIDPitch+0x1a8>)
 8001778:	e9c3 0100 	strd	r0, r1, [r3]
}
 800177c:	b005      	add	sp, #20
 800177e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	33333333 	.word	0x33333333
 800178c:	3fe33333 	.word	0x3fe33333
 8001790:	cccccccd 	.word	0xcccccccd
 8001794:	3feccccc 	.word	0x3feccccc
 8001798:	2000c928 	.word	0x2000c928
 800179c:	2000c838 	.word	0x2000c838
 80017a0:	20000190 	.word	0x20000190
 80017a4:	200000c8 	.word	0x200000c8
 80017a8:	20000248 	.word	0x20000248
 80017ac:	20000138 	.word	0x20000138
 80017b0:	20000180 	.word	0x20000180
 80017b4:	40340000 	.word	0x40340000
 80017b8:	c0340000 	.word	0xc0340000
 80017bc:	20000178 	.word	0x20000178
 80017c0:	200001c8 	.word	0x200001c8
 80017c4:	200001a8 	.word	0x200001a8
 80017c8:	40590000 	.word	0x40590000
 80017cc:	3ff80000 	.word	0x3ff80000
 80017d0:	40080000 	.word	0x40080000
 80017d4:	200000d0 	.word	0x200000d0

080017d8 <ComputePIDYaw>:

void ComputePIDYaw()
{
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	errorY = (setYaw - yaw);
 80017dc:	4b62      	ldr	r3, [pc, #392]	; (8001968 <ComputePIDYaw+0x190>)
 80017de:	4d63      	ldr	r5, [pc, #396]	; (800196c <ComputePIDYaw+0x194>)
	dErrY = errorY - lastErrY;
	errSumY = errSumY + (errorY / sampleFrequency);
 80017e0:	4c63      	ldr	r4, [pc, #396]	; (8001970 <ComputePIDYaw+0x198>)
	errorY = (setYaw - yaw);
 80017e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <ComputePIDYaw+0x19c>)
{
 80017e8:	b085      	sub	sp, #20
	errorY = (setYaw - yaw);
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fcef 	bl	80001d0 <__aeabi_dsub>
 80017f2:	e9c5 0100 	strd	r0, r1, [r5]
	dErrY = errorY - lastErrY;
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <ComputePIDYaw+0x1a0>)
 80017f8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fce6 	bl	80001d0 <__aeabi_dsub>
 8001804:	4b5d      	ldr	r3, [pc, #372]	; (800197c <ComputePIDYaw+0x1a4>)
 8001806:	e9c3 0100 	strd	r0, r1, [r3]
	errSumY = errSumY + (errorY / sampleFrequency);
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <ComputePIDYaw+0x1a8>)
 800180c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001818:	f7fe ffb8 	bl	800078c <__aeabi_ddiv>
 800181c:	4632      	mov	r2, r6
 800181e:	463b      	mov	r3, r7
 8001820:	f7fe fcd8 	bl	80001d4 <__adddf3>
 8001824:	e9c4 0100 	strd	r0, r1, [r4]
	if (errSumY > 20)
 8001828:	4f56      	ldr	r7, [pc, #344]	; (8001984 <ComputePIDYaw+0x1ac>)
 800182a:	2600      	movs	r6, #0
 800182c:	4632      	mov	r2, r6
 800182e:	463b      	mov	r3, r7
 8001830:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001834:	f7ff f910 	bl	8000a58 <__aeabi_dcmpgt>
 8001838:	46ab      	mov	fp, r5
 800183a:	b110      	cbz	r0, 8001842 <ComputePIDYaw+0x6a>
	{
		errSumY = 20;
	}
	else if (errSumY < -20)
	{
		errSumY = -20;
 800183c:	e9c4 6700 	strd	r6, r7, [r4]
 8001840:	e009      	b.n	8001856 <ComputePIDYaw+0x7e>
	else if (errSumY < -20)
 8001842:	4f51      	ldr	r7, [pc, #324]	; (8001988 <ComputePIDYaw+0x1b0>)
 8001844:	2600      	movs	r6, #0
 8001846:	e9d4 0100 	ldrd	r0, r1, [r4]
 800184a:	4632      	mov	r2, r6
 800184c:	463b      	mov	r3, r7
 800184e:	f7ff f8e5 	bl	8000a1c <__aeabi_dcmplt>
 8001852:	2800      	cmp	r0, #0
 8001854:	d1f2      	bne.n	800183c <ComputePIDYaw+0x64>
	}
	outputY[0] = outputY[1];
 8001856:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80019a4 <ComputePIDYaw+0x1cc>
 800185a:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800185e:	e9ca 2300 	strd	r2, r3, [sl]
	outputY[1] = outputY[2];
 8001862:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 8001866:	e9ca 2302 	strd	r2, r3, [sl, #8]
	outputY[2] = (1 * kpy * errorY) + (100 * kiy * errSumY) + (100 * kdy * dErrY);
 800186a:	4b48      	ldr	r3, [pc, #288]	; (800198c <ComputePIDYaw+0x1b4>)
 800186c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <ComputePIDYaw+0x1b8>)
 8001872:	e9db 6700 	ldrd	r6, r7, [fp]
 8001876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <ComputePIDYaw+0x198>)
 800187c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <ComputePIDYaw+0x1bc>)
 8001882:	ed93 7b00 	vldr	d7, [r3]
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <ComputePIDYaw+0x1a4>)
 8001888:	ed8d 7b00 	vstr	d7, [sp]
 800188c:	ed93 7b00 	vldr	d7, [r3]
 8001890:	2200      	movs	r2, #0
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <ComputePIDYaw+0x1c0>)
 8001894:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001898:	f7fe fe4e 	bl	8000538 <__aeabi_dmul>
 800189c:	4622      	mov	r2, r4
 800189e:	462b      	mov	r3, r5
 80018a0:	f7fe fe4a 	bl	8000538 <__aeabi_dmul>
 80018a4:	4632      	mov	r2, r6
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	463b      	mov	r3, r7
 80018ac:	4640      	mov	r0, r8
 80018ae:	4649      	mov	r1, r9
 80018b0:	f7fe fe42 	bl	8000538 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fc8a 	bl	80001d4 <__adddf3>
 80018c0:	2200      	movs	r2, #0
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <ComputePIDYaw+0x1c0>)
 80018c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80018cc:	f7fe fe34 	bl	8000538 <__aeabi_dmul>
 80018d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80018d4:	f7fe fe30 	bl	8000538 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc78 	bl	80001d4 <__adddf3>
 80018e4:	e9ca 0104 	strd	r0, r1, [sl, #16]
	outputY[10] = -(0.6 * outputY[0] + 0.9 * outputY[1] + 1.5 * outputY[2]) / 3;
 80018e8:	a31b      	add	r3, pc, #108	; (adr r3, 8001958 <ComputePIDYaw+0x180>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80018f2:	f7fe fe21 	bl	8000538 <__aeabi_dmul>
 80018f6:	e9da 8902 	ldrd	r8, r9, [sl, #8]
 80018fa:	4606      	mov	r6, r0
 80018fc:	460f      	mov	r7, r1
 80018fe:	a318      	add	r3, pc, #96	; (adr r3, 8001960 <ComputePIDYaw+0x188>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	4640      	mov	r0, r8
 8001906:	4649      	mov	r1, r9
 8001908:	f7fe fe16 	bl	8000538 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4630      	mov	r0, r6
 8001912:	4639      	mov	r1, r7
 8001914:	f7fe fc5e 	bl	80001d4 <__adddf3>
 8001918:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 800191c:	4606      	mov	r6, r0
 800191e:	460f      	mov	r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <ComputePIDYaw+0x1c4>)
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fe06 	bl	8000538 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4630      	mov	r0, r6
 8001932:	4639      	mov	r1, r7
 8001934:	f7fe fc4e 	bl	80001d4 <__adddf3>
 8001938:	2200      	movs	r2, #0
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <ComputePIDYaw+0x1c8>)
 800193c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8001940:	f7fe ff24 	bl	800078c <__aeabi_ddiv>
 8001944:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
	lastErrY = errorY;
 8001948:	e9db 0100 	ldrd	r0, r1, [fp]
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <ComputePIDYaw+0x1a0>)
 800194e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001952:	b005      	add	sp, #20
 8001954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001958:	33333333 	.word	0x33333333
 800195c:	3fe33333 	.word	0x3fe33333
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	3feccccc 	.word	0x3feccccc
 8001968:	200002f0 	.word	0x200002f0
 800196c:	200001b0 	.word	0x200001b0
 8001970:	20000160 	.word	0x20000160
 8001974:	2000c7f8 	.word	0x2000c7f8
 8001978:	200001a0 	.word	0x200001a0
 800197c:	20000260 	.word	0x20000260
 8001980:	20000180 	.word	0x20000180
 8001984:	40340000 	.word	0x40340000
 8001988:	c0340000 	.word	0xc0340000
 800198c:	20000168 	.word	0x20000168
 8001990:	20000130 	.word	0x20000130
 8001994:	20000158 	.word	0x20000158
 8001998:	40590000 	.word	0x40590000
 800199c:	3ff80000 	.word	0x3ff80000
 80019a0:	40080000 	.word	0x40080000
 80019a4:	20000268 	.word	0x20000268

080019a8 <parseFlightMonitorData>:
/***********************************************************************************
 * The commands from the flight monitoring system are interpreted by parsing the
 * UART data.
 ***********************************************************************************/
void parseFlightMonitorData()
{
 80019a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx_bytes_counter = 0;
	for (uint8_t i = 0; i < UARTRECEIVEDBUFFERSIZE; i++)
	{
		rx_bytes[i] = receiveBuffer[i];
 80019ac:	4bb0      	ldr	r3, [pc, #704]	; (8001c70 <parseFlightMonitorData+0x2c8>)
	rx_bytes_counter = 0;
 80019ae:	4eb1      	ldr	r6, [pc, #708]	; (8001c74 <parseFlightMonitorData+0x2cc>)
		rx_bytes[i] = receiveBuffer[i];
 80019b0:	4ab1      	ldr	r2, [pc, #708]	; (8001c78 <parseFlightMonitorData+0x2d0>)
	rx_bytes_counter = 0;
 80019b2:	2500      	movs	r5, #0
 80019b4:	7035      	strb	r5, [r6, #0]
 80019b6:	461c      	mov	r4, r3
 80019b8:	4693      	mov	fp, r2
		rx_bytes[i] = receiveBuffer[i];
 80019ba:	5ca9      	ldrb	r1, [r5, r2]
 80019bc:	54e9      	strb	r1, [r5, r3]
 80019be:	3501      	adds	r5, #1
	for (uint8_t i = 0; i < UARTRECEIVEDBUFFERSIZE; i++)
 80019c0:	2d08      	cmp	r5, #8
 80019c2:	d1fa      	bne.n	80019ba <parseFlightMonitorData+0x12>
	}
	if (rx_bytes[0] == '#')
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f8df a310 	ldr.w	sl, [pc, #784]	; 8001cd8 <parseFlightMonitorData+0x330>
 80019ca:	4fac      	ldr	r7, [pc, #688]	; (8001c7c <parseFlightMonitorData+0x2d4>)
 80019cc:	2b23      	cmp	r3, #35	; 0x23
 80019ce:	f040 81e0 	bne.w	8001d92 <parseFlightMonitorData+0x3ea>
					trimmValueRoll =(double)((int16_t)(rx_bytes[7] * 256 + rx_bytes[6])) / 100;
				}

				if ((rx_bytes[1] == 't') && (rx_bytes[2] == 'v') && (rx_bytes[3] == 'p'))
				{
					trimmValuePitch = (double)((int16_t) (rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 80019d2:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8001cdc <parseFlightMonitorData+0x334>
 80019d6:	f04f 0800 	mov.w	r8, #0
			rx_bytes[rx_bytes_counter] = receiveBuffer[rx_bytes_counter];
 80019da:	7833      	ldrb	r3, [r6, #0]
 80019dc:	7832      	ldrb	r2, [r6, #0]
 80019de:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80019e2:	54e2      	strb	r2, [r4, r3]
			rx_bytes_counter++;
 80019e4:	7833      	ldrb	r3, [r6, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	7033      	strb	r3, [r6, #0]
			if (rx_bytes[rx_bytes_counter - 1] == '#')
 80019ec:	7833      	ldrb	r3, [r6, #0]
 80019ee:	4423      	add	r3, r4
 80019f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80019f4:	2b23      	cmp	r3, #35	; 0x23
 80019f6:	d105      	bne.n	8001a04 <parseFlightMonitorData+0x5c>
				rx_bytes_counter = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	7033      	strb	r3, [r6, #0]
				command_ready = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f88a 3000 	strb.w	r3, [sl]
				data_ready = 0;
 8001a02:	703b      	strb	r3, [r7, #0]
			if (command_ready == 1)
 8001a04:	f89a 3000 	ldrb.w	r3, [sl]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <parseFlightMonitorData+0x76>
				if ((rx_bytes[4] == '1') && (rx_bytes_counter == 7))
 8001a0e:	7922      	ldrb	r2, [r4, #4]
 8001a10:	2a31      	cmp	r2, #49	; 0x31
 8001a12:	f040 8085 	bne.w	8001b20 <parseFlightMonitorData+0x178>
 8001a16:	7832      	ldrb	r2, [r6, #0]
 8001a18:	2a07      	cmp	r2, #7
					data_ready = 1;
 8001a1a:	bf08      	it	eq
 8001a1c:	703b      	strbeq	r3, [r7, #0]
			if (rx_bytes[rx_bytes_counter - 1] == '/')
 8001a1e:	7833      	ldrb	r3, [r6, #0]
 8001a20:	4423      	add	r3, r4
 8001a22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001a26:	2b2f      	cmp	r3, #47	; 0x2f
				command_ready = 1;
 8001a28:	bf04      	itt	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	f88a 3000 	strbeq.w	r3, [sl]
			if (data_ready == 1)
 8001a30:	783b      	ldrb	r3, [r7, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 80d1 	bne.w	8001bdc <parseFlightMonitorData+0x234>
				if ((rx_bytes[1] == 'p') && (rx_bytes[2] == 'w') && (rx_bytes[3] == 'm'))
 8001a3a:	7862      	ldrb	r2, [r4, #1]
 8001a3c:	2a70      	cmp	r2, #112	; 0x70
 8001a3e:	d175      	bne.n	8001b2c <parseFlightMonitorData+0x184>
 8001a40:	78a3      	ldrb	r3, [r4, #2]
 8001a42:	2b77      	cmp	r3, #119	; 0x77
 8001a44:	d108      	bne.n	8001a58 <parseFlightMonitorData+0xb0>
 8001a46:	78e3      	ldrb	r3, [r4, #3]
 8001a48:	2b6d      	cmp	r3, #109	; 0x6d
 8001a4a:	d105      	bne.n	8001a58 <parseFlightMonitorData+0xb0>
					setRPM = rx_bytes[6];
 8001a4c:	79a0      	ldrb	r0, [r4, #6]
 8001a4e:	f7fe fcfd 	bl	800044c <__aeabi_ui2d>
					setRPM = 40;
 8001a52:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <parseFlightMonitorData+0x2d8>)
 8001a54:	e9c3 0100 	strd	r0, r1, [r3]
				if ((rx_bytes[1] == 'c') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'm'))
 8001a58:	7863      	ldrb	r3, [r4, #1]
 8001a5a:	2b63      	cmp	r3, #99	; 0x63
 8001a5c:	f040 8082 	bne.w	8001b64 <parseFlightMonitorData+0x1bc>
 8001a60:	78a3      	ldrb	r3, [r4, #2]
 8001a62:	2b61      	cmp	r3, #97	; 0x61
 8001a64:	f040 81fb 	bne.w	8001e5e <parseFlightMonitorData+0x4b6>
 8001a68:	78e3      	ldrb	r3, [r4, #3]
 8001a6a:	2b6d      	cmp	r3, #109	; 0x6d
 8001a6c:	d102      	bne.n	8001a74 <parseFlightMonitorData+0xcc>
					doCalibrationMagnetometer = 1;
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <parseFlightMonitorData+0x2dc>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	801a      	strh	r2, [r3, #0]
				if ((rx_bytes[1] == 'c') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'z'))
 8001a74:	78e3      	ldrb	r3, [r4, #3]
 8001a76:	2b7a      	cmp	r3, #122	; 0x7a
 8001a78:	f040 81f1 	bne.w	8001e5e <parseFlightMonitorData+0x4b6>
					doCalibrationSensoroutput = 0;
 8001a7c:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <parseFlightMonitorData+0x2e0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
					setCalibrationValues();
 8001a82:	f000 fe4d 	bl	8002720 <setCalibrationValues>
				if ((rx_bytes[1] == 'c') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'm'))
 8001a86:	7863      	ldrb	r3, [r4, #1]
 8001a88:	2b63      	cmp	r3, #99	; 0x63
 8001a8a:	d16b      	bne.n	8001b64 <parseFlightMonitorData+0x1bc>
 8001a8c:	78a2      	ldrb	r2, [r4, #2]
 8001a8e:	2a61      	cmp	r2, #97	; 0x61
 8001a90:	d105      	bne.n	8001a9e <parseFlightMonitorData+0xf6>
 8001a92:	78e2      	ldrb	r2, [r4, #3]
 8001a94:	2a6d      	cmp	r2, #109	; 0x6d
 8001a96:	d102      	bne.n	8001a9e <parseFlightMonitorData+0xf6>
					doCalibrationMagnetometer = 1;
 8001a98:	4a7a      	ldr	r2, [pc, #488]	; (8001c84 <parseFlightMonitorData+0x2dc>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	8011      	strh	r1, [r2, #0]
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 'f') && (rx_bytes[3] == 'm'))
 8001a9e:	2b73      	cmp	r3, #115	; 0x73
 8001aa0:	f000 8140 	beq.w	8001d24 <parseFlightMonitorData+0x37c>
				if ((rx_bytes[1] == 'r') && (rx_bytes[2] == 's') && (rx_bytes[3] == 't'))
 8001aa4:	2b72      	cmp	r3, #114	; 0x72
 8001aa6:	d071      	beq.n	8001b8c <parseFlightMonitorData+0x1e4>
				if ((rx_bytes[1] == 'm') && (rx_bytes[2] == 'o') && (rx_bytes[3] == 'l'))
 8001aa8:	2b6d      	cmp	r3, #109	; 0x6d
 8001aaa:	f000 815e 	beq.w	8001d6a <parseFlightMonitorData+0x3c2>
				if ((rx_bytes[1] == 't') && (rx_bytes[2] == 'v') && (rx_bytes[3] == 'y'))
 8001aae:	2b74      	cmp	r3, #116	; 0x74
 8001ab0:	f040 808f 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
 8001ab4:	78a3      	ldrb	r3, [r4, #2]
 8001ab6:	2b76      	cmp	r3, #118	; 0x76
 8001ab8:	f040 808b 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
 8001abc:	78e3      	ldrb	r3, [r4, #3]
 8001abe:	2b79      	cmp	r3, #121	; 0x79
 8001ac0:	d10d      	bne.n	8001ade <parseFlightMonitorData+0x136>
					trimmValueYaw = (double)((int16_t)(rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001ac2:	79e3      	ldrb	r3, [r4, #7]
 8001ac4:	79a0      	ldrb	r0, [r4, #6]
 8001ac6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001aca:	b200      	sxth	r0, r0
 8001acc:	f7fe fcce 	bl	800046c <__aeabi_i2d>
 8001ad0:	464b      	mov	r3, r9
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	f7fe fe5a 	bl	800078c <__aeabi_ddiv>
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <parseFlightMonitorData+0x2e4>)
 8001ada:	e9c3 0100 	strd	r0, r1, [r3]
				if ((rx_bytes[1] == 't') && (rx_bytes[2] == 'v') && (rx_bytes[3] == 'r'))
 8001ade:	78e3      	ldrb	r3, [r4, #3]
 8001ae0:	2b72      	cmp	r3, #114	; 0x72
 8001ae2:	d10d      	bne.n	8001b00 <parseFlightMonitorData+0x158>
					trimmValueRoll =(double)((int16_t)(rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001ae4:	79e3      	ldrb	r3, [r4, #7]
 8001ae6:	79a0      	ldrb	r0, [r4, #6]
 8001ae8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001aec:	b200      	sxth	r0, r0
 8001aee:	f7fe fcbd 	bl	800046c <__aeabi_i2d>
 8001af2:	464b      	mov	r3, r9
 8001af4:	4642      	mov	r2, r8
 8001af6:	f7fe fe49 	bl	800078c <__aeabi_ddiv>
 8001afa:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <parseFlightMonitorData+0x2e8>)
 8001afc:	e9c3 0100 	strd	r0, r1, [r3]
				if ((rx_bytes[1] == 't') && (rx_bytes[2] == 'v') && (rx_bytes[3] == 'p'))
 8001b00:	78e3      	ldrb	r3, [r4, #3]
 8001b02:	2b70      	cmp	r3, #112	; 0x70
 8001b04:	d165      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
					trimmValuePitch = (double)((int16_t) (rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001b06:	79e3      	ldrb	r3, [r4, #7]
 8001b08:	79a0      	ldrb	r0, [r4, #6]
 8001b0a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001b0e:	b200      	sxth	r0, r0
 8001b10:	f7fe fcac 	bl	800046c <__aeabi_i2d>
 8001b14:	464b      	mov	r3, r9
 8001b16:	4642      	mov	r2, r8
 8001b18:	f7fe fe38 	bl	800078c <__aeabi_ddiv>
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <parseFlightMonitorData+0x2ec>)
 8001b1e:	e056      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[4] == '2') && (rx_bytes_counter == 8))
 8001b20:	2a32      	cmp	r2, #50	; 0x32
 8001b22:	f47f af7c 	bne.w	8001a1e <parseFlightMonitorData+0x76>
 8001b26:	7832      	ldrb	r2, [r6, #0]
 8001b28:	2a08      	cmp	r2, #8
 8001b2a:	e776      	b.n	8001a1a <parseFlightMonitorData+0x72>
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 't') && (rx_bytes[3] == 'a'))
 8001b2c:	2a73      	cmp	r2, #115	; 0x73
 8001b2e:	f040 8136 	bne.w	8001d9e <parseFlightMonitorData+0x3f6>
 8001b32:	78a2      	ldrb	r2, [r4, #2]
 8001b34:	2a74      	cmp	r2, #116	; 0x74
 8001b36:	d18f      	bne.n	8001a58 <parseFlightMonitorData+0xb0>
 8001b38:	78e2      	ldrb	r2, [r4, #3]
 8001b3a:	2a61      	cmp	r2, #97	; 0x61
 8001b3c:	d104      	bne.n	8001b48 <parseFlightMonitorData+0x1a0>
					motorStop = RESET;
 8001b3e:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <parseFlightMonitorData+0x2f0>)
 8001b40:	2100      	movs	r1, #0
 8001b42:	7011      	strb	r1, [r2, #0]
					motorStart = SET;
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <parseFlightMonitorData+0x2f4>)
 8001b46:	7013      	strb	r3, [r2, #0]
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 't') && (rx_bytes[3] == 'o'))
 8001b48:	78e3      	ldrb	r3, [r4, #3]
 8001b4a:	2b6f      	cmp	r3, #111	; 0x6f
 8001b4c:	d184      	bne.n	8001a58 <parseFlightMonitorData+0xb0>
					motorStart = RESET;
 8001b4e:	4a53      	ldr	r2, [pc, #332]	; (8001c9c <parseFlightMonitorData+0x2f4>)
 8001b50:	2300      	movs	r3, #0
 8001b52:	7013      	strb	r3, [r2, #0]
					motorStop = SET;
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <parseFlightMonitorData+0x2f0>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	7011      	strb	r1, [r2, #0]
					motorGotStarted = RESET;
 8001b5a:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <parseFlightMonitorData+0x2f8>)
					setRPM = 40;
 8001b5c:	4951      	ldr	r1, [pc, #324]	; (8001ca4 <parseFlightMonitorData+0x2fc>)
					motorGotStarted = RESET;
 8001b5e:	7013      	strb	r3, [r2, #0]
					setRPM = 40;
 8001b60:	2000      	movs	r0, #0
 8001b62:	e776      	b.n	8001a52 <parseFlightMonitorData+0xaa>
				if ((rx_bytes[1] == 'r') && (rx_bytes[2] == 'o') && (rx_bytes[3] == 'l'))
 8001b64:	2b72      	cmp	r3, #114	; 0x72
 8001b66:	d124      	bne.n	8001bb2 <parseFlightMonitorData+0x20a>
 8001b68:	78a3      	ldrb	r3, [r4, #2]
 8001b6a:	2b6f      	cmp	r3, #111	; 0x6f
 8001b6c:	d10e      	bne.n	8001b8c <parseFlightMonitorData+0x1e4>
 8001b6e:	78e3      	ldrb	r3, [r4, #3]
 8001b70:	2b6c      	cmp	r3, #108	; 0x6c
 8001b72:	d10b      	bne.n	8001b8c <parseFlightMonitorData+0x1e4>
					setRoll = 45 - (double) rx_bytes[6];
 8001b74:	79a0      	ldrb	r0, [r4, #6]
 8001b76:	f7fe fc69 	bl	800044c <__aeabi_ui2d>
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	494a      	ldr	r1, [pc, #296]	; (8001ca8 <parseFlightMonitorData+0x300>)
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7fe fb25 	bl	80001d0 <__aeabi_dsub>
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <parseFlightMonitorData+0x304>)
 8001b88:	e9c3 0100 	strd	r0, r1, [r3]
				if ((rx_bytes[1] == 'r') && (rx_bytes[2] == 's') && (rx_bytes[3] == 't'))
 8001b8c:	78a3      	ldrb	r3, [r4, #2]
 8001b8e:	2b73      	cmp	r3, #115	; 0x73
 8001b90:	d11f      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
 8001b92:	78e3      	ldrb	r3, [r4, #3]
 8001b94:	2b74      	cmp	r3, #116	; 0x74
 8001b96:	d11c      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b98:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b9c:	4944      	ldr	r1, [pc, #272]	; (8001cb0 <parseFlightMonitorData+0x308>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <parseFlightMonitorData+0x30c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ba0:	68ca      	ldr	r2, [r1, #12]
 8001ba2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
 8001baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001bae:	bf00      	nop
 8001bb0:	e7fd      	b.n	8001bae <parseFlightMonitorData+0x206>
				if ((rx_bytes[1] == 'p') && (rx_bytes[2] == 'i') && (rx_bytes[3] == 't'))
 8001bb2:	2b70      	cmp	r3, #112	; 0x70
 8001bb4:	f040 813a 	bne.w	8001e2c <parseFlightMonitorData+0x484>
 8001bb8:	78a3      	ldrb	r3, [r4, #2]
 8001bba:	2b69      	cmp	r3, #105	; 0x69
 8001bbc:	d109      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
 8001bbe:	78e3      	ldrb	r3, [r4, #3]
 8001bc0:	2b74      	cmp	r3, #116	; 0x74
 8001bc2:	d106      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
					setPitch = (double) (rx_bytes[6] - 45);
 8001bc4:	79a0      	ldrb	r0, [r4, #6]
 8001bc6:	382d      	subs	r0, #45	; 0x2d
 8001bc8:	f7fe fc50 	bl	800046c <__aeabi_i2d>
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <parseFlightMonitorData+0x310>)
					trimmValuePitch = (double)((int16_t) (rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001bce:	e9c3 0100 	strd	r0, r1, [r3]
				}

				command_ready = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f88a 3000 	strb.w	r3, [sl]
				data_ready = 0;
 8001bd8:	703b      	strb	r3, [r7, #0]
				rx_bytes_counter = 0;
 8001bda:	7033      	strb	r3, [r6, #0]
 8001bdc:	3d01      	subs	r5, #1
		for (uint8_t i = 0; i < UARTRECEIVEDBUFFERSIZE; i++)
 8001bde:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001be2:	f47f aefa 	bne.w	80019da <parseFlightMonitorData+0x32>
	{
		command_ready = 0;
		data_ready = 0;
		rx_bytes_counter = 0;
	}
	while (HAL_UART_Receive_IT(&huart4, receiveBuffer, UARTRECEIVEDBUFFERSIZE) != HAL_OK);
 8001be6:	4d24      	ldr	r5, [pc, #144]	; (8001c78 <parseFlightMonitorData+0x2d0>)
 8001be8:	4c34      	ldr	r4, [pc, #208]	; (8001cbc <parseFlightMonitorData+0x314>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f005 fdf6 	bl	80077e0 <HAL_UART_Receive_IT>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d1f8      	bne.n	8001bea <parseFlightMonitorData+0x242>
}
 8001bf8:	b003      	add	sp, #12
 8001bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'd') && (rx_bytes[3] == 'p'))
 8001bfe:	78e3      	ldrb	r3, [r4, #3]
 8001c00:	2b70      	cmp	r3, #112	; 0x70
 8001c02:	d1e6      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
					kdr = kdp = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 1000;
 8001c04:	79a3      	ldrb	r3, [r4, #6]
 8001c06:	79e0      	ldrb	r0, [r4, #7]
 8001c08:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001c0c:	f7fe fc2e 	bl	800046c <__aeabi_i2d>
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <parseFlightMonitorData+0x318>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	f7fe fdba 	bl	800078c <__aeabi_ddiv>
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <parseFlightMonitorData+0x31c>)
 8001c1a:	e9c3 0100 	strd	r0, r1, [r3]
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <parseFlightMonitorData+0x320>)
 8001c20:	e7d5      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'i') && (rx_bytes[3] == 'p'))
 8001c22:	78e3      	ldrb	r3, [r4, #3]
 8001c24:	2b70      	cmp	r3, #112	; 0x70
 8001c26:	d1d4      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
					kir = kip = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 100000;
 8001c28:	79a3      	ldrb	r3, [r4, #6]
 8001c2a:	79e0      	ldrb	r0, [r4, #7]
 8001c2c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001c30:	f7fe fc1c 	bl	800046c <__aeabi_i2d>
 8001c34:	a30c      	add	r3, pc, #48	; (adr r3, 8001c68 <parseFlightMonitorData+0x2c0>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fda7 	bl	800078c <__aeabi_ddiv>
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <parseFlightMonitorData+0x324>)
 8001c40:	e9c3 0100 	strd	r0, r1, [r3]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <parseFlightMonitorData+0x328>)
 8001c46:	e7c2      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'o') && (rx_bytes[3] == 'p'))
 8001c48:	78e3      	ldrb	r3, [r4, #3]
 8001c4a:	2b70      	cmp	r3, #112	; 0x70
 8001c4c:	d1c1      	bne.n	8001bd2 <parseFlightMonitorData+0x22a>
					ko = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001c4e:	79a3      	ldrb	r3, [r4, #6]
 8001c50:	79e0      	ldrb	r0, [r4, #7]
 8001c52:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001c56:	f7fe fc09 	bl	800046c <__aeabi_i2d>
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	f7fe fd95 	bl	800078c <__aeabi_ddiv>
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <parseFlightMonitorData+0x32c>)
 8001c64:	e7b3      	b.n	8001bce <parseFlightMonitorData+0x226>
 8001c66:	bf00      	nop
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40f86a00 	.word	0x40f86a00
 8001c70:	200002c2 	.word	0x200002c2
 8001c74:	200002c1 	.word	0x200002c1
 8001c78:	2000c94b 	.word	0x2000c94b
 8001c7c:	200002c0 	.word	0x200002c0
 8001c80:	20004798 	.word	0x20004798
 8001c84:	2000008e 	.word	0x2000008e
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20008738 	.word	0x20008738
 8001c90:	200041d8 	.word	0x200041d8
 8001c94:	200086e8 	.word	0x200086e8
 8001c98:	200088b2 	.word	0x200088b2
 8001c9c:	20008948 	.word	0x20008948
 8001ca0:	200046ac 	.word	0x200046ac
 8001ca4:	40440000 	.word	0x40440000
 8001ca8:	40468000 	.word	0x40468000
 8001cac:	20004638 	.word	0x20004638
 8001cb0:	e000ed00 	.word	0xe000ed00
 8001cb4:	05fa0004 	.word	0x05fa0004
 8001cb8:	2000c928 	.word	0x2000c928
 8001cbc:	20008908 	.word	0x20008908
 8001cc0:	408f4000 	.word	0x408f4000
 8001cc4:	200001a8 	.word	0x200001a8
 8001cc8:	20000170 	.word	0x20000170
 8001ccc:	200001c8 	.word	0x200001c8
 8001cd0:	20000188 	.word	0x20000188
 8001cd4:	200001b8 	.word	0x200001b8
 8001cd8:	200002cc 	.word	0x200002cc
 8001cdc:	40590000 	.word	0x40590000
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == '1') && (rx_bytes[3] == '1'))
 8001ce0:	78e3      	ldrb	r3, [r4, #3]
 8001ce2:	2b31      	cmp	r3, #49	; 0x31
 8001ce4:	f47f af75 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					k1 = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 10000;
 8001ce8:	79a3      	ldrb	r3, [r4, #6]
 8001cea:	79e0      	ldrb	r0, [r4, #7]
 8001cec:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001cf0:	f7fe fbbc 	bl	800046c <__aeabi_i2d>
 8001cf4:	a35c      	add	r3, pc, #368	; (adr r3, 8001e68 <parseFlightMonitorData+0x4c0>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fd47 	bl	800078c <__aeabi_ddiv>
 8001cfe:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <parseFlightMonitorData+0x4d0>)
 8001d00:	e765      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == '2') && (rx_bytes[3] == '2'))
 8001d02:	78e3      	ldrb	r3, [r4, #3]
 8001d04:	2b32      	cmp	r3, #50	; 0x32
 8001d06:	f47f af64 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					k2 = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 10000;
 8001d0a:	79a3      	ldrb	r3, [r4, #6]
 8001d0c:	79e0      	ldrb	r0, [r4, #7]
 8001d0e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001d12:	f7fe fbab 	bl	800046c <__aeabi_i2d>
 8001d16:	a354      	add	r3, pc, #336	; (adr r3, 8001e68 <parseFlightMonitorData+0x4c0>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fd36 	bl	800078c <__aeabi_ddiv>
 8001d20:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <parseFlightMonitorData+0x4d4>)
 8001d22:	e754      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 'f') && (rx_bytes[3] == 'm'))
 8001d24:	78a3      	ldrb	r3, [r4, #2]
 8001d26:	2b66      	cmp	r3, #102	; 0x66
 8001d28:	d10b      	bne.n	8001d42 <parseFlightMonitorData+0x39a>
 8001d2a:	78e3      	ldrb	r3, [r4, #3]
 8001d2c:	2b6d      	cmp	r3, #109	; 0x6d
 8001d2e:	d108      	bne.n	8001d42 <parseFlightMonitorData+0x39a>
					sampleFrequency = (double) (rx_bytes[7] * 256 + rx_bytes[6]);
 8001d30:	79a3      	ldrb	r3, [r4, #6]
 8001d32:	79e0      	ldrb	r0, [r4, #7]
 8001d34:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001d38:	f7fe fb98 	bl	800046c <__aeabi_i2d>
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <parseFlightMonitorData+0x4d8>)
 8001d3e:	e9c3 0100 	strd	r0, r1, [r3]
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 'd') && (rx_bytes[3] == 't'))
 8001d42:	78a3      	ldrb	r3, [r4, #2]
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d15d      	bne.n	8001e04 <parseFlightMonitorData+0x45c>
 8001d48:	78e3      	ldrb	r3, [r4, #3]
 8001d4a:	2b74      	cmp	r3, #116	; 0x74
 8001d4c:	f47f af41 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					deltaT = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 100000;
 8001d50:	79a3      	ldrb	r3, [r4, #6]
 8001d52:	79e0      	ldrb	r0, [r4, #7]
 8001d54:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001d58:	f7fe fb88 	bl	800046c <__aeabi_i2d>
 8001d5c:	a344      	add	r3, pc, #272	; (adr r3, 8001e70 <parseFlightMonitorData+0x4c8>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fd13 	bl	800078c <__aeabi_ddiv>
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <parseFlightMonitorData+0x4dc>)
 8001d68:	e731      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'm') && (rx_bytes[2] == 'o') && (rx_bytes[3] == 'l'))
 8001d6a:	78a3      	ldrb	r3, [r4, #2]
 8001d6c:	2b6f      	cmp	r3, #111	; 0x6f
 8001d6e:	f47f af30 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
 8001d72:	78e3      	ldrb	r3, [r4, #3]
 8001d74:	2b6c      	cmp	r3, #108	; 0x6c
 8001d76:	f47f af2c 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					maxOutputLimit = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 100;
 8001d7a:	79a3      	ldrb	r3, [r4, #6]
 8001d7c:	79e0      	ldrb	r0, [r4, #7]
 8001d7e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001d82:	f7fe fb73 	bl	800046c <__aeabi_i2d>
 8001d86:	464b      	mov	r3, r9
 8001d88:	4642      	mov	r2, r8
 8001d8a:	f7fe fcff 	bl	800078c <__aeabi_ddiv>
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <parseFlightMonitorData+0x4e0>)
 8001d90:	e71d      	b.n	8001bce <parseFlightMonitorData+0x226>
		command_ready = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f88a 3000 	strb.w	r3, [sl]
		data_ready = 0;
 8001d98:	703b      	strb	r3, [r7, #0]
		rx_bytes_counter = 0;
 8001d9a:	7033      	strb	r3, [r6, #0]
 8001d9c:	e723      	b.n	8001be6 <parseFlightMonitorData+0x23e>
				if ((rx_bytes[1] == 'c') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'l'))
 8001d9e:	2a63      	cmp	r2, #99	; 0x63
 8001da0:	f47f ae5a 	bne.w	8001a58 <parseFlightMonitorData+0xb0>
 8001da4:	78a2      	ldrb	r2, [r4, #2]
 8001da6:	2a61      	cmp	r2, #97	; 0x61
 8001da8:	f47f ae5a 	bne.w	8001a60 <parseFlightMonitorData+0xb8>
 8001dac:	78e2      	ldrb	r2, [r4, #3]
 8001dae:	2a6c      	cmp	r2, #108	; 0x6c
 8001db0:	f47f ae56 	bne.w	8001a60 <parseFlightMonitorData+0xb8>
 8001db4:	9301      	str	r3, [sp, #4]
					clearPIDdata();
 8001db6:	f000 fc35 	bl	8002624 <clearPIDdata>
					doCalibrationSensoroutput = 1;
 8001dba:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <parseFlightMonitorData+0x4e4>)
 8001dbc:	9b01      	ldr	r3, [sp, #4]
 8001dbe:	8013      	strh	r3, [r2, #0]
 8001dc0:	e64a      	b.n	8001a58 <parseFlightMonitorData+0xb0>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'd') && (rx_bytes[3] == 'p'))
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	f43f af1b 	beq.w	8001bfe <parseFlightMonitorData+0x256>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'i') && (rx_bytes[3] == 'p'))
 8001dc8:	2b69      	cmp	r3, #105	; 0x69
 8001dca:	f43f af2a 	beq.w	8001c22 <parseFlightMonitorData+0x27a>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'o') && (rx_bytes[3] == 'p'))
 8001dce:	2b6f      	cmp	r3, #111	; 0x6f
 8001dd0:	f43f af3a 	beq.w	8001c48 <parseFlightMonitorData+0x2a0>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == '1') && (rx_bytes[3] == '1'))
 8001dd4:	2b31      	cmp	r3, #49	; 0x31
 8001dd6:	d083      	beq.n	8001ce0 <parseFlightMonitorData+0x338>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == '2') && (rx_bytes[3] == '2'))
 8001dd8:	2b32      	cmp	r3, #50	; 0x32
 8001dda:	d092      	beq.n	8001d02 <parseFlightMonitorData+0x35a>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 't') && (rx_bytes[3] == 'o'))
 8001ddc:	2b74      	cmp	r3, #116	; 0x74
 8001dde:	f47f aef8 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
 8001de2:	78e3      	ldrb	r3, [r4, #3]
 8001de4:	2b6f      	cmp	r3, #111	; 0x6f
 8001de6:	f47f aef4 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					ktot = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 10000;
 8001dea:	79a3      	ldrb	r3, [r4, #6]
 8001dec:	79e0      	ldrb	r0, [r4, #7]
 8001dee:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001df2:	f7fe fb3b 	bl	800046c <__aeabi_i2d>
 8001df6:	a31c      	add	r3, pc, #112	; (adr r3, 8001e68 <parseFlightMonitorData+0x4c0>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fcc6 	bl	800078c <__aeabi_ddiv>
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <parseFlightMonitorData+0x4e8>)
 8001e02:	e6e4      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 's') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'l'))
 8001e04:	2b61      	cmp	r3, #97	; 0x61
 8001e06:	f47f aee4 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
 8001e0a:	78e3      	ldrb	r3, [r4, #3]
 8001e0c:	2b6c      	cmp	r3, #108	; 0x6c
 8001e0e:	f47f aee0 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					alpha = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 10000;
 8001e12:	79a3      	ldrb	r3, [r4, #6]
 8001e14:	79e0      	ldrb	r0, [r4, #7]
 8001e16:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001e1a:	f7fe fb27 	bl	800046c <__aeabi_i2d>
 8001e1e:	a312      	add	r3, pc, #72	; (adr r3, 8001e68 <parseFlightMonitorData+0x4c0>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fcb2 	bl	800078c <__aeabi_ddiv>
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <parseFlightMonitorData+0x4ec>)
 8001e2a:	e6d0      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'k') && (rx_bytes[2] == 'p') && (rx_bytes[3] == 'p'))
 8001e2c:	2b6b      	cmp	r3, #107	; 0x6b
 8001e2e:	f47f ae36 	bne.w	8001a9e <parseFlightMonitorData+0xf6>
 8001e32:	78a3      	ldrb	r3, [r4, #2]
 8001e34:	2b70      	cmp	r3, #112	; 0x70
 8001e36:	d1c4      	bne.n	8001dc2 <parseFlightMonitorData+0x41a>
 8001e38:	78e3      	ldrb	r3, [r4, #3]
 8001e3a:	2b70      	cmp	r3, #112	; 0x70
 8001e3c:	f47f aec9 	bne.w	8001bd2 <parseFlightMonitorData+0x22a>
					kpr = kpp = ((double) (rx_bytes[7] * 256 + rx_bytes[6])) / 1000;
 8001e40:	79a3      	ldrb	r3, [r4, #6]
 8001e42:	79e0      	ldrb	r0, [r4, #7]
 8001e44:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001e48:	f7fe fb10 	bl	800046c <__aeabi_i2d>
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <parseFlightMonitorData+0x4f0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f7fe fc9c 	bl	800078c <__aeabi_ddiv>
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <parseFlightMonitorData+0x4f4>)
 8001e56:	e9c3 0100 	strd	r0, r1, [r3]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <parseFlightMonitorData+0x4f8>)
 8001e5c:	e6b7      	b.n	8001bce <parseFlightMonitorData+0x226>
				if ((rx_bytes[1] == 'c') && (rx_bytes[2] == 'a') && (rx_bytes[3] == 'm'))
 8001e5e:	7863      	ldrb	r3, [r4, #1]
 8001e60:	e614      	b.n	8001a8c <parseFlightMonitorData+0xe4>
 8001e62:	bf00      	nop
 8001e64:	f3af 8000 	nop.w
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40c38800 	.word	0x40c38800
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40f86a00 	.word	0x40f86a00
 8001e78:	20000250 	.word	0x20000250
 8001e7c:	200001c0 	.word	0x200001c0
 8001e80:	20000180 	.word	0x20000180
 8001e84:	200088a0 	.word	0x200088a0
 8001e88:	200041c0 	.word	0x200041c0
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000238 	.word	0x20000238
 8001e94:	2000c9a0 	.word	0x2000c9a0
 8001e98:	408f4000 	.word	0x408f4000
 8001e9c:	20000178 	.word	0x20000178
 8001ea0:	20000258 	.word	0x20000258

08001ea4 <HAL_UART_RxCpltCallback>:
 * with NEMA protocol turned off. Instead the ublock protocol UBX is used to get
 * well defined number of bytes that can be easily interpreted (no need of a NEMA parser)
 ***********************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == UART4)
 8001ea4:	6802      	ldr	r2, [r0, #0]
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_UART_RxCpltCallback+0x8c>)
 8001ea8:	429a      	cmp	r2, r3
{
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
	if (huart->Instance == UART4)
 8001eae:	d101      	bne.n	8001eb4 <HAL_UART_RxCpltCallback+0x10>
	{
		parseFlightMonitorData();
 8001eb0:	f7ff fd7a 	bl	80019a8 <parseFlightMonitorData>
	}

	if (huart->Instance == UART5)
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_UART_RxCpltCallback+0x90>)
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d138      	bne.n	8001f2e <HAL_UART_RxCpltCallback+0x8a>
	{
		latitude[0] = GPS_BUF[14];
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_UART_RxCpltCallback+0x94>)
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_UART_RxCpltCallback+0x98>)
 8001ec0:	7b99      	ldrb	r1, [r3, #14]
 8001ec2:	7011      	strb	r1, [r2, #0]
		latitude[1] = GPS_BUF[15];
 8001ec4:	7bd9      	ldrb	r1, [r3, #15]
 8001ec6:	7051      	strb	r1, [r2, #1]
		latitude[2] = GPS_BUF[16];
 8001ec8:	7c19      	ldrb	r1, [r3, #16]
 8001eca:	7091      	strb	r1, [r2, #2]
		latitude[3] = GPS_BUF[17];
 8001ecc:	7c59      	ldrb	r1, [r3, #17]
 8001ece:	70d1      	strb	r1, [r2, #3]

		longitude[0] = GPS_BUF[10];
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_UART_RxCpltCallback+0x9c>)
 8001ed2:	7a99      	ldrb	r1, [r3, #10]
 8001ed4:	7011      	strb	r1, [r2, #0]
		longitude[1] = GPS_BUF[11];
 8001ed6:	7ad9      	ldrb	r1, [r3, #11]
 8001ed8:	7051      	strb	r1, [r2, #1]
		longitude[2] = GPS_BUF[12];
 8001eda:	7b19      	ldrb	r1, [r3, #12]
 8001edc:	7091      	strb	r1, [r2, #2]
		longitude[3] = GPS_BUF[13];
 8001ede:	7b59      	ldrb	r1, [r3, #13]
 8001ee0:	70d1      	strb	r1, [r2, #3]

		hMSLGPS[0] = GPS_BUF[22];
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_UART_RxCpltCallback+0xa0>)
 8001ee4:	7d99      	ldrb	r1, [r3, #22]
 8001ee6:	7011      	strb	r1, [r2, #0]
		hMSLGPS[1] = GPS_BUF[23];
 8001ee8:	7dd9      	ldrb	r1, [r3, #23]
 8001eea:	7051      	strb	r1, [r2, #1]
		hMSLGPS[2] = GPS_BUF[24];
 8001eec:	7e19      	ldrb	r1, [r3, #24]
 8001eee:	7091      	strb	r1, [r2, #2]
		hMSLGPS[3] = GPS_BUF[25];
 8001ef0:	7e59      	ldrb	r1, [r3, #25]
 8001ef2:	70d1      	strb	r1, [r2, #3]

		groundSpeedGPS[0] = GPS_BUF[60];
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_UART_RxCpltCallback+0xa4>)
 8001ef6:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8001efa:	7011      	strb	r1, [r2, #0]
		groundSpeedGPS[1] = GPS_BUF[61];
 8001efc:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8001f00:	7051      	strb	r1, [r2, #1]
		groundSpeedGPS[2] = GPS_BUF[62];
 8001f02:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001f06:	7091      	strb	r1, [r2, #2]
		groundSpeedGPS[3] = GPS_BUF[63];
 8001f08:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8001f0c:	70d1      	strb	r1, [r2, #3]

		headingGPS[0] = GPS_BUF[64];
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_UART_RxCpltCallback+0xa8>)
 8001f10:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8001f14:	7011      	strb	r1, [r2, #0]
		headingGPS[1] = GPS_BUF[65];
 8001f16:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8001f1a:	7051      	strb	r1, [r2, #1]
		headingGPS[2] = GPS_BUF[66];
 8001f1c:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
		headingGPS[3] = GPS_BUF[67];
 8001f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
		headingGPS[2] = GPS_BUF[66];
 8001f24:	7091      	strb	r1, [r2, #2]
		headingGPS[3] = GPS_BUF[67];
 8001f26:	70d3      	strb	r3, [r2, #3]

		gpsDataReady = SET;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_UART_RxCpltCallback+0xac>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	40004c00 	.word	0x40004c00
 8001f34:	40005000 	.word	0x40005000
 8001f38:	200046c1 	.word	0x200046c1
 8001f3c:	200088f4 	.word	0x200088f4
 8001f40:	20008774 	.word	0x20008774
 8001f44:	20004270 	.word	0x20004270
 8001f48:	200042fd 	.word	0x200042fd
 8001f4c:	20004711 	.word	0x20004711
 8001f50:	2000c828 	.word	0x2000c828

08001f54 <HAL_UART_TxCpltCallback>:
 * After the flight controller monitoring information have been send of to the
 * monitoring system through the UART the buzzer can be turned off
 ***********************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == UART4)
 8001f54:	6802      	ldr	r2, [r0, #0]
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_UART_TxCpltCallback+0x24>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10b      	bne.n	8001f74 <HAL_UART_TxCpltCallback+0x20>
	{
		if (doCalibrationSensoroutput == 0 && doCalibrationMagnetometer == 0)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_UART_TxCpltCallback+0x28>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b93b      	cbnz	r3, 8001f74 <HAL_UART_TxCpltCallback+0x20>
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_UART_TxCpltCallback+0x2c>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b91b      	cbnz	r3, 8001f74 <HAL_UART_TxCpltCallback+0x20>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_UART_TxCpltCallback+0x30>)
 8001f70:	f005 ba8a 	b.w	8007488 <HAL_TIM_PWM_Stop>
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40004c00 	.word	0x40004c00
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	2000008e 	.word	0x2000008e
 8001f84:	20004670 	.word	0x20004670

08001f88 <HAL_I2C_MemRxCpltCallback>:
/***********************************************************************************
 * We have received data from the I2C bus. Check from what sensor the data came
 * and store the received information away.
 ***********************************************************************************/
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dataReadyfromBMP280 == SET)
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
{
 8001f92:	b089      	sub	sp, #36	; 0x24
	if (dataReadyfromBMP280 == SET)
 8001f94:	d120      	bne.n	8001fd8 <HAL_I2C_MemRxCpltCallback+0x50>
	{
		adc_T = (readBMP280Buffer[3] << 12) + (readBMP280Buffer[4] << 4) + (readBMP280Buffer[5] >> 4);
 8001f96:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_I2C_MemRxCpltCallback+0x44>)
 8001f98:	7913      	ldrb	r3, [r2, #4]
 8001f9a:	78d1      	ldrb	r1, [r2, #3]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	eb03 3301 	add.w	r3, r3, r1, lsl #12
 8001fa2:	7951      	ldrb	r1, [r2, #5]
 8001fa4:	eb03 1311 	add.w	r3, r3, r1, lsr #4
 8001fa8:	4909      	ldr	r1, [pc, #36]	; (8001fd0 <HAL_I2C_MemRxCpltCallback+0x48>)
 8001faa:	600b      	str	r3, [r1, #0]
		adc_P = (readBMP280Buffer[0] << 12) + (readBMP280Buffer[1] << 4) + (readBMP280Buffer[2] >> 4);
 8001fac:	7853      	ldrb	r3, [r2, #1]
 8001fae:	7811      	ldrb	r1, [r2, #0]
 8001fb0:	7892      	ldrb	r2, [r2, #2]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	eb03 3301 	add.w	r3, r3, r1, lsl #12
 8001fb8:	eb03 1312 	add.w	r3, r3, r2, lsr #4
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8001fbe:	6013      	str	r3, [r2, #0]
		{
			dataReadyfromMPU9250Counter = 0;
			readPandT(BMP280_REGISTER_STARTDATA, readBMP280Buffer);
		}
	}
}
 8001fc0:	b009      	add	sp, #36	; 0x24
 8001fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000009c 	.word	0x2000009c
 8001fcc:	2000ca12 	.word	0x2000ca12
 8001fd0:	20000098 	.word	0x20000098
 8001fd4:	20000094 	.word	0x20000094
	else if (dataReadyfromMPU9250 == SET)
 8001fd8:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <HAL_I2C_MemRxCpltCallback+0x2e0>)
 8001fda:	f893 a000 	ldrb.w	sl, [r3]
 8001fde:	fa5f fa8a 	uxtb.w	sl, sl
 8001fe2:	f1ba 0f01 	cmp.w	sl, #1
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_I2C_MemRxCpltCallback+0x38>
		ray = 1 * ((int16_t) readMPU9250Buffer[0] << 8) + (int16_t) readMPU9250Buffer[1]; //MSB und LSB; we read MSB first
 8001fe8:	4ca0      	ldr	r4, [pc, #640]	; (800226c <HAL_I2C_MemRxCpltCallback+0x2e4>)
 8001fea:	48a1      	ldr	r0, [pc, #644]	; (8002270 <HAL_I2C_MemRxCpltCallback+0x2e8>)
		raz = 1 * ((int16_t) readMPU9250Buffer[4] << 8) + (int16_t) readMPU9250Buffer[5];
 8001fec:	7961      	ldrb	r1, [r4, #5]
		rgx = 1 * ((int16_t) readMPU9250Buffer[8] << 8) + (int16_t) readMPU9250Buffer[9];
 8001fee:	7a25      	ldrb	r5, [r4, #8]
 8001ff0:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 80022c8 <HAL_I2C_MemRxCpltCallback+0x340>
		rgy = -1 * ((int16_t) readMPU9250Buffer[10] << 8) + (int16_t) readMPU9250Buffer[11];
 8001ff4:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80022cc <HAL_I2C_MemRxCpltCallback+0x344>
		rgz = -1 * ((int16_t) readMPU9250Buffer[12] << 8) + (int16_t) readMPU9250Buffer[13];
 8001ff8:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80022d0 <HAL_I2C_MemRxCpltCallback+0x348>
		rcx = ((int16_t) readMPU9250Buffer[16] << 8) + (int16_t) readMPU9250Buffer[15];
 8001ffc:	4f9d      	ldr	r7, [pc, #628]	; (8002274 <HAL_I2C_MemRxCpltCallback+0x2ec>)
		rcy = ((int16_t) readMPU9250Buffer[18] << 8) + (int16_t) readMPU9250Buffer[17];
 8001ffe:	4e9e      	ldr	r6, [pc, #632]	; (8002278 <HAL_I2C_MemRxCpltCallback+0x2f0>)
		dataReadyfromMPU9250 = RESET;
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
		ray = 1 * ((int16_t) readMPU9250Buffer[0] << 8) + (int16_t) readMPU9250Buffer[1]; //MSB und LSB; we read MSB first
 8002006:	7822      	ldrb	r2, [r4, #0]
 8002008:	7863      	ldrb	r3, [r4, #1]
 800200a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800200e:	b21b      	sxth	r3, r3
 8002010:	8003      	strh	r3, [r0, #0]
		rax = 1 * ((int16_t) readMPU9250Buffer[2] << 8) + (int16_t) readMPU9250Buffer[3];
 8002012:	78a2      	ldrb	r2, [r4, #2]
 8002014:	78e3      	ldrb	r3, [r4, #3]
 8002016:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800201a:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_I2C_MemRxCpltCallback+0x2f4>)
 800201c:	9202      	str	r2, [sp, #8]
 800201e:	b21b      	sxth	r3, r3
 8002020:	8013      	strh	r3, [r2, #0]
		raz = 1 * ((int16_t) readMPU9250Buffer[4] << 8) + (int16_t) readMPU9250Buffer[5];
 8002022:	7923      	ldrb	r3, [r4, #4]
 8002024:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002028:	4b95      	ldr	r3, [pc, #596]	; (8002280 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	b209      	sxth	r1, r1
 800202e:	8019      	strh	r1, [r3, #0]
		rgx = 1 * ((int16_t) readMPU9250Buffer[8] << 8) + (int16_t) readMPU9250Buffer[9];
 8002030:	7a61      	ldrb	r1, [r4, #9]
 8002032:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8002036:	b209      	sxth	r1, r1
 8002038:	f8ab 1000 	strh.w	r1, [fp]
		rgy = -1 * ((int16_t) readMPU9250Buffer[10] << 8) + (int16_t) readMPU9250Buffer[11];
 800203c:	7aa5      	ldrb	r5, [r4, #10]
 800203e:	7ae1      	ldrb	r1, [r4, #11]
 8002040:	eba1 2105 	sub.w	r1, r1, r5, lsl #8
 8002044:	b209      	sxth	r1, r1
 8002046:	f8a9 1000 	strh.w	r1, [r9]
		rgz = -1 * ((int16_t) readMPU9250Buffer[12] << 8) + (int16_t) readMPU9250Buffer[13];
 800204a:	7b25      	ldrb	r5, [r4, #12]
 800204c:	7b61      	ldrb	r1, [r4, #13]
 800204e:	eba1 2105 	sub.w	r1, r1, r5, lsl #8
 8002052:	b209      	sxth	r1, r1
 8002054:	f8a8 1000 	strh.w	r1, [r8]
		rcx = ((int16_t) readMPU9250Buffer[16] << 8) + (int16_t) readMPU9250Buffer[15];
 8002058:	7c25      	ldrb	r5, [r4, #16]
 800205a:	7be1      	ldrb	r1, [r4, #15]
 800205c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8002060:	b209      	sxth	r1, r1
 8002062:	8039      	strh	r1, [r7, #0]
		rcy = ((int16_t) readMPU9250Buffer[18] << 8) + (int16_t) readMPU9250Buffer[17];
 8002064:	7ca5      	ldrb	r5, [r4, #18]
 8002066:	7c61      	ldrb	r1, [r4, #17]
 8002068:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 800206c:	b209      	sxth	r1, r1
 800206e:	8031      	strh	r1, [r6, #0]
		rcz = ((int16_t) readMPU9250Buffer[20] << 8) + (int16_t) readMPU9250Buffer[19];
 8002070:	7d25      	ldrb	r5, [r4, #20]
 8002072:	7ce1      	ldrb	r1, [r4, #19]
 8002074:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8002078:	4d82      	ldr	r5, [pc, #520]	; (8002284 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800207a:	b209      	sxth	r1, r1
 800207c:	8029      	strh	r1, [r5, #0]
		rayd = (double) ray;
 800207e:	8800      	ldrh	r0, [r0, #0]
 8002080:	b200      	sxth	r0, r0
 8002082:	f7fe f9f3 	bl	800046c <__aeabi_i2d>
 8002086:	f8df e24c 	ldr.w	lr, [pc, #588]	; 80022d4 <HAL_I2C_MemRxCpltCallback+0x34c>
		raxd = (double) rax;
 800208a:	9a02      	ldr	r2, [sp, #8]
		rayd = (double) ray;
 800208c:	e9ce 0100 	strd	r0, r1, [lr]
		raxd = (double) rax;
 8002090:	8810      	ldrh	r0, [r2, #0]
 8002092:	b200      	sxth	r0, r0
 8002094:	f7fe f9ea 	bl	800046c <__aeabi_i2d>
 8002098:	4a7b      	ldr	r2, [pc, #492]	; (8002288 <HAL_I2C_MemRxCpltCallback+0x300>)
		razd = (double) raz;
 800209a:	9b00      	ldr	r3, [sp, #0]
		raxd = (double) rax;
 800209c:	e9c2 0100 	strd	r0, r1, [r2]
		razd = (double) raz;
 80020a0:	8818      	ldrh	r0, [r3, #0]
 80020a2:	b200      	sxth	r0, r0
 80020a4:	f7fe f9e2 	bl	800046c <__aeabi_i2d>
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_I2C_MemRxCpltCallback+0x304>)
 80020aa:	e9c3 0100 	strd	r0, r1, [r3]
		rgxd = (double) rgx;
 80020ae:	f8bb 0000 	ldrh.w	r0, [fp]
 80020b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80022d8 <HAL_I2C_MemRxCpltCallback+0x350>
 80020b6:	b200      	sxth	r0, r0
 80020b8:	f7fe f9d8 	bl	800046c <__aeabi_i2d>
 80020bc:	e9cb 0100 	strd	r0, r1, [fp]
		rgyd = (double) rgy;
 80020c0:	f8b9 0000 	ldrh.w	r0, [r9]
 80020c4:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80022dc <HAL_I2C_MemRxCpltCallback+0x354>
 80020c8:	b200      	sxth	r0, r0
 80020ca:	f7fe f9cf 	bl	800046c <__aeabi_i2d>
 80020ce:	e9c9 0100 	strd	r0, r1, [r9]
		rgzd = (double) rgz;
 80020d2:	f8b8 0000 	ldrh.w	r0, [r8]
 80020d6:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80022e0 <HAL_I2C_MemRxCpltCallback+0x358>
 80020da:	b200      	sxth	r0, r0
 80020dc:	f7fe f9c6 	bl	800046c <__aeabi_i2d>
 80020e0:	e9c8 0100 	strd	r0, r1, [r8]
		rcxd = (double) rcx;
 80020e4:	8838      	ldrh	r0, [r7, #0]
 80020e6:	4f6a      	ldr	r7, [pc, #424]	; (8002290 <HAL_I2C_MemRxCpltCallback+0x308>)
 80020e8:	b200      	sxth	r0, r0
 80020ea:	f7fe f9bf 	bl	800046c <__aeabi_i2d>
 80020ee:	e9c7 0100 	strd	r0, r1, [r7]
		rcyd = (double) rcy;
 80020f2:	8830      	ldrh	r0, [r6, #0]
 80020f4:	4e67      	ldr	r6, [pc, #412]	; (8002294 <HAL_I2C_MemRxCpltCallback+0x30c>)
 80020f6:	b200      	sxth	r0, r0
 80020f8:	f7fe f9b8 	bl	800046c <__aeabi_i2d>
 80020fc:	e9c6 0100 	strd	r0, r1, [r6]
		rczd = (double) rcz;
 8002100:	8828      	ldrh	r0, [r5, #0]
 8002102:	4d65      	ldr	r5, [pc, #404]	; (8002298 <HAL_I2C_MemRxCpltCallback+0x310>)
 8002104:	b200      	sxth	r0, r0
 8002106:	f7fe f9b1 	bl	800046c <__aeabi_i2d>
		ST1_register = readMPU9250Buffer[14]; //AK8963 status registers
 800210a:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_I2C_MemRxCpltCallback+0x314>)
 800210c:	7ba2      	ldrb	r2, [r4, #14]
		rczd = (double) rcz;
 800210e:	e9c5 0100 	strd	r0, r1, [r5]
		ST1_register = readMPU9250Buffer[14]; //AK8963 status registers
 8002112:	701a      	strb	r2, [r3, #0]
		ST2_register = readMPU9250Buffer[21];
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_I2C_MemRxCpltCallback+0x318>)
 8002116:	7d62      	ldrb	r2, [r4, #21]
 8002118:	701a      	strb	r2, [r3, #0]
		scaleconst = 0.005;
 800211a:	a351      	add	r3, pc, #324	; (adr r3, 8002260 <HAL_I2C_MemRxCpltCallback+0x2d8>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	4c60      	ldr	r4, [pc, #384]	; (80022a4 <HAL_I2C_MemRxCpltCallback+0x31c>)
 8002122:	e9c4 2300 	strd	r2, r3, [r4]
		rgxd = rgxd * scaleconst;
 8002126:	e9db 0100 	ldrd	r0, r1, [fp]
 800212a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800212e:	f7fe fa03 	bl	8000538 <__aeabi_dmul>
 8002132:	e9cb 0100 	strd	r0, r1, [fp]
		rgyd = rgyd * scaleconst;
 8002136:	e9d9 0100 	ldrd	r0, r1, [r9]
 800213a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800213e:	f7fe f9fb 	bl	8000538 <__aeabi_dmul>
 8002142:	e9c9 0100 	strd	r0, r1, [r9]
		rgzd = rgzd * scaleconst;
 8002146:	e9d8 0100 	ldrd	r0, r1, [r8]
 800214a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800214e:	f7fe f9f3 	bl	8000538 <__aeabi_dmul>
 8002152:	e9c8 0100 	strd	r0, r1, [r8]
		mx = rcxd * fabCalConst[0]; //calibrate with the read factory calibration constants
 8002156:	4c54      	ldr	r4, [pc, #336]	; (80022a8 <HAL_I2C_MemRxCpltCallback+0x320>)
 8002158:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80022e4 <HAL_I2C_MemRxCpltCallback+0x35c>
		my = rcyd * fabCalConst[1];
 800215c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80022e8 <HAL_I2C_MemRxCpltCallback+0x360>
		mx = rcxd * fabCalConst[0]; //calibrate with the read factory calibration constants
 8002160:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002168:	f7fe f9e6 	bl	8000538 <__aeabi_dmul>
 800216c:	e9c9 0100 	strd	r0, r1, [r9]
		my = rcyd * fabCalConst[1];
 8002170:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002174:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002178:	f7fe f9de 	bl	8000538 <__aeabi_dmul>
 800217c:	e9c8 0100 	strd	r0, r1, [r8]
		mz = rczd * fabCalConst[2];
 8002180:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002184:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002188:	f7fe f9d6 	bl	8000538 <__aeabi_dmul>
 800218c:	4c47      	ldr	r4, [pc, #284]	; (80022ac <HAL_I2C_MemRxCpltCallback+0x324>)
		rcxd = (mx - rcxHardIronCorrection);
 800218e:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_I2C_MemRxCpltCallback+0x328>)
		mz = rczd * fabCalConst[2];
 8002190:	e9c4 0100 	strd	r0, r1, [r4]
		rcxd = (mx - rcxHardIronCorrection);
 8002194:	e9d9 0100 	ldrd	r0, r1, [r9]
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f818 	bl	80001d0 <__aeabi_dsub>
 80021a0:	e9c7 0100 	strd	r0, r1, [r7]
		rcyd = (my - rcyHardIronCorrection);
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80021a6:	e9d8 0100 	ldrd	r0, r1, [r8]
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f80f 	bl	80001d0 <__aeabi_dsub>
 80021b2:	e9c6 0100 	strd	r0, r1, [r6]
		rczd = (mz - rczHardIronCorrection); //is this needed or even correct? Try out with 0 next time to see if tilt comp works... check Kris.
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80021b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe f806 	bl	80001d0 <__aeabi_dsub>
 80021c4:	e9c5 0100 	strd	r0, r1, [r5]
		rcNorm = sqrt((rcxd * rcxd) + (rcyd * rcyd) + (rczd * rczd));
 80021c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d0:	ed96 7b00 	vldr	d7, [r6]
 80021d4:	ed8d 7b00 	vstr	d7, [sp]
 80021d8:	ed96 7b00 	vldr	d7, [r6]
 80021dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80021e0:	ed95 7b00 	vldr	d7, [r5]
 80021e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80021e8:	ed95 7b00 	vldr	d7, [r5]
 80021ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80021f0:	f7fe f9a2 	bl	8000538 <__aeabi_dmul>
 80021f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021f8:	4680      	mov	r8, r0
 80021fa:	4689      	mov	r9, r1
 80021fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002200:	f7fe f99a 	bl	8000538 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fd ffe2 	bl	80001d4 <__adddf3>
 8002210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002214:	4680      	mov	r8, r0
 8002216:	4689      	mov	r9, r1
 8002218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800221c:	f7fe f98c 	bl	8000538 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4640      	mov	r0, r8
 8002226:	4649      	mov	r1, r9
 8002228:	f7fd ffd4 	bl	80001d4 <__adddf3>
 800222c:	ec41 0b10 	vmov	d0, r0, r1
 8002230:	f005 fef0 	bl	8008014 <sqrt>
 8002234:	4c21      	ldr	r4, [pc, #132]	; (80022bc <HAL_I2C_MemRxCpltCallback+0x334>)
 8002236:	ed84 0b00 	vstr	d0, [r4]
		rcxNorm = rcxd / rcNorm;
 800223a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800223e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002242:	f7fe faa3 	bl	800078c <__aeabi_ddiv>
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_I2C_MemRxCpltCallback+0x338>)
 8002248:	e9c3 0100 	strd	r0, r1, [r3]
		rcyNorm = rcyd / rcNorm;
 800224c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002250:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002254:	f7fe fa9a 	bl	800078c <__aeabi_ddiv>
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_I2C_MemRxCpltCallback+0x33c>)
 800225a:	e9c3 0100 	strd	r0, r1, [r3]
 800225e:	e045      	b.n	80022ec <HAL_I2C_MemRxCpltCallback+0x364>
 8002260:	47ae147b 	.word	0x47ae147b
 8002264:	3f747ae1 	.word	0x3f747ae1
 8002268:	20008720 	.word	0x20008720
 800226c:	20008958 	.word	0x20008958
 8002270:	200087c8 	.word	0x200087c8
 8002274:	2000c942 	.word	0x2000c942
 8002278:	200002ee 	.word	0x200002ee
 800227c:	20008722 	.word	0x20008722
 8002280:	2000c840 	.word	0x2000c840
 8002284:	200041ba 	.word	0x200041ba
 8002288:	20008750 	.word	0x20008750
 800228c:	20008898 	.word	0x20008898
 8002290:	20008740 	.word	0x20008740
 8002294:	200041b0 	.word	0x200041b0
 8002298:	20004190 	.word	0x20004190
 800229c:	20008710 	.word	0x20008710
 80022a0:	200041e2 	.word	0x200041e2
 80022a4:	20008728 	.word	0x20008728
 80022a8:	2000c910 	.word	0x2000c910
 80022ac:	20008900 	.word	0x20008900
 80022b0:	2000c810 	.word	0x2000c810
 80022b4:	20004848 	.word	0x20004848
 80022b8:	200046b0 	.word	0x200046b0
 80022bc:	20004808 	.word	0x20004808
 80022c0:	20004198 	.word	0x20004198
 80022c4:	20004748 	.word	0x20004748
 80022c8:	2000462a 	.word	0x2000462a
 80022cc:	20004834 	.word	0x20004834
 80022d0:	20004188 	.word	0x20004188
 80022d4:	20008718 	.word	0x20008718
 80022d8:	20008950 	.word	0x20008950
 80022dc:	200086f0 	.word	0x200086f0
 80022e0:	2000c900 	.word	0x2000c900
 80022e4:	2000c990 	.word	0x2000c990
 80022e8:	20004658 	.word	0x20004658
		rczNorm = rczd / rcNorm;
 80022ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80022f0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80022f4:	f7fe fa4a 	bl	800078c <__aeabi_ddiv>
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80022fa:	e9c3 0100 	strd	r0, r1, [r3]
		readyToCalcEuler = SET;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_I2C_MemRxCpltCallback+0x3a0>)
 8002300:	f883 a000 	strb.w	sl, [r3]
		if (dataReadyfromMPU9250Counter == 5) //since the data sample rate of the BMP280 is only 100Hz
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	2a05      	cmp	r2, #5
 800230a:	f47f ae59 	bne.w	8001fc0 <HAL_I2C_MemRxCpltCallback+0x38>
			readPandT(BMP280_REGISTER_STARTDATA, readBMP280Buffer);
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <HAL_I2C_MemRxCpltCallback+0x3a8>)
			dataReadyfromMPU9250Counter = 0;
 8002310:	f04f 0200 	mov.w	r2, #0
			readPandT(BMP280_REGISTER_STARTDATA, readBMP280Buffer);
 8002314:	20f7      	movs	r0, #247	; 0xf7
			dataReadyfromMPU9250Counter = 0;
 8002316:	701a      	strb	r2, [r3, #0]
}
 8002318:	b009      	add	sp, #36	; 0x24
 800231a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			readPandT(BMP280_REGISTER_STARTDATA, readBMP280Buffer);
 800231e:	f7fe bca1 	b.w	8000c64 <readPandT>
 8002322:	bf00      	nop
 8002324:	200047f8 	.word	0x200047f8
 8002328:	200086f8 	.word	0x200086f8
 800232c:	20004648 	.word	0x20004648
 8002330:	2000ca12 	.word	0x2000ca12

08002334 <doTransmit>:
/******************************************************************************
 *	This sends the current monitoring information to the external monitoring
 *	system. The buzzer indicates the transmission.
 ******************************************************************************/
void doTransmit(void)
{
 8002334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002338:	2108      	movs	r1, #8
 800233a:	48a9      	ldr	r0, [pc, #676]	; (80025e0 <doTransmit+0x2ac>)

	intLong = (uint16_t)(altitude * 100.0);
 800233c:	4da9      	ldr	r5, [pc, #676]	; (80025e4 <doTransmit+0x2b0>)
	int_lsb = (uint8_t) intLong;
 800233e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800261c <doTransmit+0x2e8>
	int_msb = (uint8_t)(intLong >> 8);
 8002342:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8002620 <doTransmit+0x2ec>
	txBuffer[0] = '#';
 8002346:	4ca8      	ldr	r4, [pc, #672]	; (80025e8 <doTransmit+0x2b4>)
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002348:	f005 f884 	bl	8007454 <HAL_TIM_PWM_Start>
	intLong = (uint16_t)(altitude * 100.0);
 800234c:	49a7      	ldr	r1, [pc, #668]	; (80025ec <doTransmit+0x2b8>)
 800234e:	4ba8      	ldr	r3, [pc, #672]	; (80025f0 <doTransmit+0x2bc>)
 8002350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002354:	2200      	movs	r2, #0
 8002356:	f7fe f8ef 	bl	8000538 <__aeabi_dmul>
 800235a:	f7fe fbc5 	bl	8000ae8 <__aeabi_d2uiz>
 800235e:	b200      	sxth	r0, r0
 8002360:	8028      	strh	r0, [r5, #0]
	int_lsb = (uint8_t) intLong;
 8002362:	882b      	ldrh	r3, [r5, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f889 3000 	strb.w	r3, [r9]
	int_msb = (uint8_t)(intLong >> 8);
 800236a:	882b      	ldrh	r3, [r5, #0]
 800236c:	f343 2307 	sbfx	r3, r3, #8, #8
 8002370:	f888 3000 	strb.w	r3, [r8]
	txBuffer[1] = 'a';
	txBuffer[2] = 'l';
	txBuffer[3] = 'p';
	txBuffer[4] = '2';
	txBuffer[5] = '/';
	txBuffer[6] = int_lsb; //LSB first
 8002374:	f899 2000 	ldrb.w	r2, [r9]
 8002378:	71a2      	strb	r2, [r4, #6]
	txBuffer[7] = int_msb; //MSB
 800237a:	f898 2000 	ldrb.w	r2, [r8]
 800237e:	71e2      	strb	r2, [r4, #7]

	intLong = averageADCRawData;
 8002380:	4a9c      	ldr	r2, [pc, #624]	; (80025f4 <doTransmit+0x2c0>)
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	b212      	sxth	r2, r2
 8002386:	802a      	strh	r2, [r5, #0]
	int_lsb = (uint8_t) intLong;
 8002388:	882a      	ldrh	r2, [r5, #0]
 800238a:	b252      	sxtb	r2, r2
 800238c:	f889 2000 	strb.w	r2, [r9]
	int_msb = (uint8_t)(intLong >> 8);
 8002390:	882a      	ldrh	r2, [r5, #0]
	txBuffer[3] = 'p';
 8002392:	2370      	movs	r3, #112	; 0x70
 8002394:	70e3      	strb	r3, [r4, #3]
 8002396:	9301      	str	r3, [sp, #4]
	txBuffer[4] = '2';
 8002398:	f04f 0332 	mov.w	r3, #50	; 0x32
 800239c:	7123      	strb	r3, [r4, #4]
	int_msb = (uint8_t)(intLong >> 8);
 800239e:	f342 2207 	sbfx	r2, r2, #8, #8
	txBuffer[8] = '#';
	txBuffer[9] = 'v';
 80023a2:	f04f 0376 	mov.w	r3, #118	; 0x76
	int_msb = (uint8_t)(intLong >> 8);
 80023a6:	f888 2000 	strb.w	r2, [r8]
	txBuffer[9] = 'v';
 80023aa:	7263      	strb	r3, [r4, #9]
	txBuffer[10] = 'l';
	txBuffer[11] = 't';
 80023ac:	f04f 0374 	mov.w	r3, #116	; 0x74
	txBuffer[0] = '#';
 80023b0:	2723      	movs	r7, #35	; 0x23
	txBuffer[5] = '/';
 80023b2:	262f      	movs	r6, #47	; 0x2f
	txBuffer[1] = 'a';
 80023b4:	f04f 0a61 	mov.w	sl, #97	; 0x61
	txBuffer[2] = 'l';
 80023b8:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
	txBuffer[11] = 't';
 80023bc:	72e3      	strb	r3, [r4, #11]
	txBuffer[12] = '2';
	txBuffer[13] = '/';
	txBuffer[14] = int_lsb; //LSB first
 80023be:	f899 2000 	ldrb.w	r2, [r9]
	txBuffer[0] = '#';
 80023c2:	7027      	strb	r7, [r4, #0]
	txBuffer[12] = '2';
 80023c4:	f04f 0332 	mov.w	r3, #50	; 0x32
 80023c8:	7323      	strb	r3, [r4, #12]
	txBuffer[1] = 'a';
 80023ca:	f884 a001 	strb.w	sl, [r4, #1]
	txBuffer[2] = 'l';
 80023ce:	f884 b002 	strb.w	fp, [r4, #2]
	txBuffer[5] = '/';
 80023d2:	7166      	strb	r6, [r4, #5]
	txBuffer[8] = '#';
 80023d4:	7227      	strb	r7, [r4, #8]
	txBuffer[10] = 'l';
 80023d6:	f884 b00a 	strb.w	fp, [r4, #10]
	txBuffer[13] = '/';
 80023da:	7366      	strb	r6, [r4, #13]
	txBuffer[14] = int_lsb; //LSB first
 80023dc:	73a2      	strb	r2, [r4, #14]
	txBuffer[15] = int_msb; //MSB
 80023de:	f898 2000 	ldrb.w	r2, [r8]
 80023e2:	73e2      	strb	r2, [r4, #15]

	intLong = (uint16_t) yaw;
 80023e4:	4a84      	ldr	r2, [pc, #528]	; (80025f8 <doTransmit+0x2c4>)
 80023e6:	e9d2 0100 	ldrd	r0, r1, [r2]
 80023ea:	f7fe fb7d 	bl	8000ae8 <__aeabi_d2uiz>
 80023ee:	b200      	sxth	r0, r0
 80023f0:	8028      	strh	r0, [r5, #0]
	int_lsb = (uint8_t) intLong;
 80023f2:	882a      	ldrh	r2, [r5, #0]
	int_msb = (uint8_t)(intLong >> 8);
	txBuffer[16] = '#';
 80023f4:	7427      	strb	r7, [r4, #16]
	int_lsb = (uint8_t) intLong;
 80023f6:	b252      	sxtb	r2, r2
 80023f8:	f889 2000 	strb.w	r2, [r9]
	int_msb = (uint8_t)(intLong >> 8);
 80023fc:	882a      	ldrh	r2, [r5, #0]
	txBuffer[17] = 'y';
	txBuffer[18] = 'a';
 80023fe:	f884 a012 	strb.w	sl, [r4, #18]
	int_msb = (uint8_t)(intLong >> 8);
 8002402:	f342 2207 	sbfx	r2, r2, #8, #8
 8002406:	f888 2000 	strb.w	r2, [r8]
	txBuffer[19] = 'n';
	txBuffer[20] = '2';
	txBuffer[21] = '/';
	txBuffer[22] = int_lsb; //LSB first
 800240a:	f899 1000 	ldrb.w	r1, [r9]
 800240e:	75a1      	strb	r1, [r4, #22]
	txBuffer[23] = int_msb; //MSB
 8002410:	f898 1000 	ldrb.w	r1, [r8]
 8002414:	75e1      	strb	r1, [r4, #23]
	txBuffer[17] = 'y';
 8002416:	2279      	movs	r2, #121	; 0x79

	intLong = -1 * (int16_t) roll;
 8002418:	4978      	ldr	r1, [pc, #480]	; (80025fc <doTransmit+0x2c8>)
	txBuffer[17] = 'y';
 800241a:	7462      	strb	r2, [r4, #17]
	txBuffer[20] = '2';
 800241c:	f04f 0332 	mov.w	r3, #50	; 0x32
	txBuffer[19] = 'n';
 8002420:	226e      	movs	r2, #110	; 0x6e
	intLong = -1 * (int16_t) roll;
 8002422:	e9d1 0100 	ldrd	r0, r1, [r1]
	txBuffer[19] = 'n';
 8002426:	74e2      	strb	r2, [r4, #19]
	txBuffer[20] = '2';
 8002428:	7523      	strb	r3, [r4, #20]
	txBuffer[21] = '/';
 800242a:	7566      	strb	r6, [r4, #21]
	txBuffer[19] = 'n';
 800242c:	9200      	str	r2, [sp, #0]
	intLong = -1 * (int16_t) roll;
 800242e:	f7fe fb33 	bl	8000a98 <__aeabi_d2iz>
 8002432:	4240      	negs	r0, r0
 8002434:	b200      	sxth	r0, r0
 8002436:	8028      	strh	r0, [r5, #0]
	int_lsb = (uint8_t) intLong;
 8002438:	8829      	ldrh	r1, [r5, #0]
	int_msb = (uint8_t)(intLong >> 8);
	txBuffer[24] = '#';
	txBuffer[25] = 'r';
	txBuffer[26] = 'a';
	txBuffer[27] = 'n';
 800243a:	9a00      	ldr	r2, [sp, #0]
 800243c:	76e2      	strb	r2, [r4, #27]
	int_lsb = (uint8_t) intLong;
 800243e:	b249      	sxtb	r1, r1
 8002440:	f889 1000 	strb.w	r1, [r9]
	int_msb = (uint8_t)(intLong >> 8);
 8002444:	8829      	ldrh	r1, [r5, #0]
	txBuffer[24] = '#';
 8002446:	7627      	strb	r7, [r4, #24]
	int_msb = (uint8_t)(intLong >> 8);
 8002448:	f341 2107 	sbfx	r1, r1, #8, #8
 800244c:	f888 1000 	strb.w	r1, [r8]
	txBuffer[25] = 'r';
 8002450:	2172      	movs	r1, #114	; 0x72
 8002452:	7661      	strb	r1, [r4, #25]
	txBuffer[28] = '2';
	txBuffer[29] = '/';
	txBuffer[30] = int_lsb; //LSB first
 8002454:	f899 1000 	ldrb.w	r1, [r9]
 8002458:	77a1      	strb	r1, [r4, #30]
	txBuffer[31] = int_msb; //MSB
 800245a:	f898 1000 	ldrb.w	r1, [r8]
 800245e:	77e1      	strb	r1, [r4, #31]

	intLong = (int16_t) pitch;
 8002460:	4967      	ldr	r1, [pc, #412]	; (8002600 <doTransmit+0x2cc>)
	txBuffer[26] = 'a';
 8002462:	f884 a01a 	strb.w	sl, [r4, #26]
	txBuffer[28] = '2';
 8002466:	f04f 0332 	mov.w	r3, #50	; 0x32
	intLong = (int16_t) pitch;
 800246a:	e9d1 0100 	ldrd	r0, r1, [r1]
	txBuffer[28] = '2';
 800246e:	7723      	strb	r3, [r4, #28]
	txBuffer[29] = '/';
 8002470:	7766      	strb	r6, [r4, #29]
	intLong = (int16_t) pitch;
 8002472:	f7fe fb11 	bl	8000a98 <__aeabi_d2iz>
 8002476:	b200      	sxth	r0, r0
 8002478:	8028      	strh	r0, [r5, #0]
	int_lsb = (uint8_t) intLong;
 800247a:	8829      	ldrh	r1, [r5, #0]
	int_msb = (uint8_t)(intLong >> 8);
	txBuffer[32] = '#';
	txBuffer[33] = 'p';
 800247c:	9b01      	ldr	r3, [sp, #4]
 800247e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	int_lsb = (uint8_t) intLong;
 8002482:	b249      	sxtb	r1, r1
 8002484:	f889 1000 	strb.w	r1, [r9]
	int_msb = (uint8_t)(intLong >> 8);
 8002488:	8829      	ldrh	r1, [r5, #0]
	txBuffer[34] = 'a';
	txBuffer[35] = 'n';
 800248a:	9a00      	ldr	r2, [sp, #0]
 800248c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	int_msb = (uint8_t)(intLong >> 8);
 8002490:	f341 2107 	sbfx	r1, r1, #8, #8
 8002494:	f888 1000 	strb.w	r1, [r8]
	txBuffer[36] = '2';
 8002498:	f04f 0332 	mov.w	r3, #50	; 0x32
 800249c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	txBuffer[37] = '/';
	txBuffer[38] = int_lsb; //LSB first
 80024a0:	f899 3000 	ldrb.w	r3, [r9]
 80024a4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	txBuffer[39] = int_msb; //MSB
 80024a8:	f898 3000 	ldrb.w	r3, [r8]
	txBuffer[32] = '#';
 80024ac:	f884 7020 	strb.w	r7, [r4, #32]
	txBuffer[34] = 'a';
 80024b0:	f884 a022 	strb.w	sl, [r4, #34]	; 0x22
	txBuffer[37] = '/';
 80024b4:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
	txBuffer[39] = int_msb; //MSB
 80024b8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27

	txBuffer[40] = '#';
	txBuffer[41] = 'l';
	txBuffer[42] = 'o';
	txBuffer[43] = 'n';
 80024bc:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
	txBuffer[44] = '4';
	txBuffer[45] = '/';
	txBuffer[46] = longitude[3];
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <doTransmit+0x2d0>)
	txBuffer[40] = '#';
 80024c2:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
	txBuffer[46] = longitude[3];
 80024c6:	78d1      	ldrb	r1, [r2, #3]
 80024c8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
	txBuffer[47] = longitude[2];
 80024cc:	7891      	ldrb	r1, [r2, #2]
 80024ce:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
	txBuffer[48] = longitude[1];
 80024d2:	7851      	ldrb	r1, [r2, #1]
	txBuffer[49] = longitude[0];
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31

	txBuffer[50] = '#';
	txBuffer[51] = 'l';
	txBuffer[52] = 'a';
	txBuffer[53] = 't';
 80024da:	f04f 0274 	mov.w	r2, #116	; 0x74
 80024de:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
	txBuffer[54] = '4';
	txBuffer[55] = '/';
	txBuffer[56] = latitude[3];
 80024e2:	4a49      	ldr	r2, [pc, #292]	; (8002608 <doTransmit+0x2d4>)
	txBuffer[48] = longitude[1];
 80024e4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
	txBuffer[56] = latitude[3];
 80024e8:	78d1      	ldrb	r1, [r2, #3]
 80024ea:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	txBuffer[57] = latitude[2];
 80024ee:	7891      	ldrb	r1, [r2, #2]
 80024f0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	txBuffer[58] = latitude[1];
 80024f4:	7851      	ldrb	r1, [r2, #1]
	txBuffer[59] = latitude[0];
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	txBuffer[42] = 'o';
 80024fc:	236f      	movs	r3, #111	; 0x6f
	txBuffer[61] = 'a';
	txBuffer[62] = 'l';
	txBuffer[63] = 'g';
	txBuffer[64] = '4';
	txBuffer[65] = '/';
	txBuffer[66] = hMSLGPS[3];
 80024fe:	4a43      	ldr	r2, [pc, #268]	; (800260c <doTransmit+0x2d8>)
	txBuffer[42] = 'o';
 8002500:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	txBuffer[58] = latitude[1];
 8002504:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	txBuffer[44] = '4';
 8002508:	2334      	movs	r3, #52	; 0x34
	txBuffer[63] = 'g';
 800250a:	2167      	movs	r1, #103	; 0x67
	txBuffer[44] = '4';
 800250c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	txBuffer[54] = '4';
 8002510:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	txBuffer[41] = 'l';
 8002514:	f884 b029 	strb.w	fp, [r4, #41]	; 0x29
	txBuffer[45] = '/';
 8002518:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
	txBuffer[50] = '#';
 800251c:	f884 7032 	strb.w	r7, [r4, #50]	; 0x32
	txBuffer[51] = 'l';
 8002520:	f884 b033 	strb.w	fp, [r4, #51]	; 0x33
	txBuffer[52] = 'a';
 8002524:	f884 a034 	strb.w	sl, [r4, #52]	; 0x34
	txBuffer[55] = '/';
 8002528:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
	txBuffer[60] = '#';
 800252c:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
	txBuffer[61] = 'a';
 8002530:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
	txBuffer[62] = 'l';
 8002534:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
	txBuffer[63] = 'g';
 8002538:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
	txBuffer[64] = '4';
 800253c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	txBuffer[66] = hMSLGPS[3];
 8002540:	78d0      	ldrb	r0, [r2, #3]
 8002542:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
	txBuffer[67] = hMSLGPS[2];
 8002546:	7890      	ldrb	r0, [r2, #2]
 8002548:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	txBuffer[68] = hMSLGPS[1];
 800254c:	7850      	ldrb	r0, [r2, #1]
	txBuffer[69] = hMSLGPS[0];
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45

	txBuffer[70] = '#';
	txBuffer[71] = 'c';
 8002554:	2263      	movs	r2, #99	; 0x63
 8002556:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
	txBuffer[72] = 'v';
 800255a:	f04f 0276 	mov.w	r2, #118	; 0x76
 800255e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	txBuffer[73] = 'g';
	txBuffer[74] = '4';
	txBuffer[75] = '/';
	txBuffer[76] = groundSpeedGPS[3];
 8002562:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <doTransmit+0x2dc>)
	txBuffer[68] = hMSLGPS[1];
 8002564:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	txBuffer[76] = groundSpeedGPS[3];
 8002568:	78d0      	ldrb	r0, [r2, #3]
 800256a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
	txBuffer[77] = groundSpeedGPS[2];
 800256e:	7890      	ldrb	r0, [r2, #2]
	txBuffer[74] = '4';
 8002570:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	txBuffer[77] = groundSpeedGPS[2];
 8002574:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d

	txBuffer[80] = '#';
	txBuffer[81] = 'h';
	txBuffer[82] = 'a';
	txBuffer[83] = 'g';
	txBuffer[84] = '4';
 8002578:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	txBuffer[78] = groundSpeedGPS[1];
 800257c:	7850      	ldrb	r0, [r2, #1]
	txBuffer[85] = '/';
	txBuffer[86] = headingGPS[3];
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <doTransmit+0x2e0>)
	txBuffer[79] = groundSpeedGPS[0];
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
	txBuffer[81] = 'h';
 8002586:	2268      	movs	r2, #104	; 0x68
 8002588:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
	txBuffer[86] = headingGPS[3];
 800258c:	78da      	ldrb	r2, [r3, #3]
 800258e:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
	txBuffer[87] = headingGPS[2];
 8002592:	789a      	ldrb	r2, [r3, #2]
	txBuffer[65] = '/';
 8002594:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
	txBuffer[70] = '#';
 8002598:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
	txBuffer[73] = 'g';
 800259c:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
	txBuffer[75] = '/';
 80025a0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
	txBuffer[78] = groundSpeedGPS[1];
 80025a4:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
	txBuffer[80] = '#';
 80025a8:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	txBuffer[82] = 'a';
 80025ac:	f884 a052 	strb.w	sl, [r4, #82]	; 0x52
	txBuffer[83] = 'g';
 80025b0:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
	txBuffer[85] = '/';
 80025b4:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
	txBuffer[88] = headingGPS[1];
	txBuffer[89] = headingGPS[0];

	while (HAL_UART_Transmit_DMA(&huart4, txBuffer, 90) != HAL_OK);
 80025b8:	4d17      	ldr	r5, [pc, #92]	; (8002618 <doTransmit+0x2e4>)
	txBuffer[87] = headingGPS[2];
 80025ba:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
	txBuffer[88] = headingGPS[1];
 80025be:	785a      	ldrb	r2, [r3, #1]
	txBuffer[89] = headingGPS[0];
 80025c0:	781b      	ldrb	r3, [r3, #0]
	txBuffer[88] = headingGPS[1];
 80025c2:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
	txBuffer[89] = headingGPS[0];
 80025c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
	while (HAL_UART_Transmit_DMA(&huart4, txBuffer, 90) != HAL_OK);
 80025ca:	225a      	movs	r2, #90	; 0x5a
 80025cc:	4621      	mov	r1, r4
 80025ce:	4628      	mov	r0, r5
 80025d0:	f005 f92a 	bl	8007828 <HAL_UART_Transmit_DMA>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1f8      	bne.n	80025ca <doTransmit+0x296>
}
 80025d8:	b003      	add	sp, #12
 80025da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025de:	bf00      	nop
 80025e0:	20004670 	.word	0x20004670
 80025e4:	200086da 	.word	0x200086da
 80025e8:	20008838 	.word	0x20008838
 80025ec:	200087c0 	.word	0x200087c0
 80025f0:	40590000 	.word	0x40590000
 80025f4:	2000c908 	.word	0x2000c908
 80025f8:	2000c7f8 	.word	0x2000c7f8
 80025fc:	2000c8a8 	.word	0x2000c8a8
 8002600:	2000c838 	.word	0x2000c838
 8002604:	20008774 	.word	0x20008774
 8002608:	200088f4 	.word	0x200088f4
 800260c:	20004270 	.word	0x20004270
 8002610:	200042fd 	.word	0x200042fd
 8002614:	20004711 	.word	0x20004711
 8002618:	20008908 	.word	0x20008908
 800261c:	20004178 	.word	0x20004178
 8002620:	200041e1 	.word	0x200041e1

08002624 <clearPIDdata>:
 * Clears all the data variables for the PID loop calculation
 ******************************************************************************/
void clearPIDdata()
{
	errorR = lastErrR = errSumR = outputR[0] = outputR[1] = outputR[2] = outputR[3] = outputR[4] = outputR[5] = outputR[6] = outputR[7] = outputR[8] =
			outputR[9] = outputR[10] = 0;
 8002624:	4931      	ldr	r1, [pc, #196]	; (80026ec <clearPIDdata+0xc8>)
 8002626:	2200      	movs	r2, #0
 8002628:	2300      	movs	r3, #0
 800262a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800262e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	errorR = lastErrR = errSumR = outputR[0] = outputR[1] = outputR[2] = outputR[3] = outputR[4] = outputR[5] = outputR[6] = outputR[7] = outputR[8] =
 8002632:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002636:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800263a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800263e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002642:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002646:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800264a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800264e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002652:	e9c1 2300 	strd	r2, r3, [r1]
 8002656:	4926      	ldr	r1, [pc, #152]	; (80026f0 <clearPIDdata+0xcc>)
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
 800265c:	4925      	ldr	r1, [pc, #148]	; (80026f4 <clearPIDdata+0xd0>)
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
 8002662:	4925      	ldr	r1, [pc, #148]	; (80026f8 <clearPIDdata+0xd4>)
 8002664:	e9c1 2300 	strd	r2, r3, [r1]
	errorP = lastErrP = errSumP = outputP[0] = outputP[1] = outputP[2] = outputP[3] = outputP[4] = outputP[5] = outputP[6] = outputP[7] = outputP[8] =
			outputP[9] = outputP[10] = 0;
 8002668:	4924      	ldr	r1, [pc, #144]	; (80026fc <clearPIDdata+0xd8>)
 800266a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800266e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	errorP = lastErrP = errSumP = outputP[0] = outputP[1] = outputP[2] = outputP[3] = outputP[4] = outputP[5] = outputP[6] = outputP[7] = outputP[8] =
 8002672:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002676:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800267a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800267e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002682:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002686:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800268a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800268e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002692:	e9c1 2300 	strd	r2, r3, [r1]
 8002696:	491a      	ldr	r1, [pc, #104]	; (8002700 <clearPIDdata+0xdc>)
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
 800269c:	4919      	ldr	r1, [pc, #100]	; (8002704 <clearPIDdata+0xe0>)
 800269e:	e9c1 2300 	strd	r2, r3, [r1]
 80026a2:	4919      	ldr	r1, [pc, #100]	; (8002708 <clearPIDdata+0xe4>)
 80026a4:	e9c1 2300 	strd	r2, r3, [r1]
	errorY = lastErrY = errSumY = outputY[0] = outputY[1] = outputY[2] = outputY[3] = outputY[4] = outputY[5] = outputY[6] = outputY[7] = outputY[8] =
			outputY[9] = outputY[10] = 0;
 80026a8:	4918      	ldr	r1, [pc, #96]	; (800270c <clearPIDdata+0xe8>)
 80026aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80026ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	errorY = lastErrY = errSumY = outputY[0] = outputY[1] = outputY[2] = outputY[3] = outputY[4] = outputY[5] = outputY[6] = outputY[7] = outputY[8] =
 80026b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80026b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80026ba:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80026be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80026c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80026c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80026ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026d2:	e9c1 2300 	strd	r2, r3, [r1]
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <clearPIDdata+0xec>)
 80026d8:	e9c1 2300 	strd	r2, r3, [r1]
 80026dc:	490d      	ldr	r1, [pc, #52]	; (8002714 <clearPIDdata+0xf0>)
 80026de:	e9c1 2300 	strd	r2, r3, [r1]
 80026e2:	490d      	ldr	r1, [pc, #52]	; (8002718 <clearPIDdata+0xf4>)
 80026e4:	e9c1 2300 	strd	r2, r3, [r1]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	200001d8 	.word	0x200001d8
 80026f0:	20000230 	.word	0x20000230
 80026f4:	200001d0 	.word	0x200001d0
 80026f8:	20000240 	.word	0x20000240
 80026fc:	200000d0 	.word	0x200000d0
 8002700:	200000c8 	.word	0x200000c8
 8002704:	20000248 	.word	0x20000248
 8002708:	20000190 	.word	0x20000190
 800270c:	20000268 	.word	0x20000268
 8002710:	20000160 	.word	0x20000160
 8002714:	200001a0 	.word	0x200001a0
 8002718:	200001b0 	.word	0x200001b0
 800271c:	00000000 	.word	0x00000000

08002720 <setCalibrationValues>:
/******************************************************************************
 * Loads the predefined horizontal calibration values of the MPU9250
 ******************************************************************************/
void setCalibrationValues()
{
	calibValRax = 23.8;
 8002720:	a133      	add	r1, pc, #204	; (adr r1, 80027f0 <setCalibrationValues+0xd0>)
 8002722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <setCalibrationValues+0xa8>)
 8002728:	e9c3 0100 	strd	r0, r1, [r3]
	calibValRay = -96.1;
 800272c:	a118      	add	r1, pc, #96	; (adr r1, 8002790 <setCalibrationValues+0x70>)
 800272e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <setCalibrationValues+0xac>)
 8002734:	e9c3 0100 	strd	r0, r1, [r3]
	calibValRaz = -237.4;
 8002738:	a117      	add	r1, pc, #92	; (adr r1, 8002798 <setCalibrationValues+0x78>)
 800273a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <setCalibrationValues+0xb0>)
 8002740:	e9c3 0100 	strd	r0, r1, [r3]
	calibValRgx = -0.83;
 8002744:	a116      	add	r1, pc, #88	; (adr r1, 80027a0 <setCalibrationValues+0x80>)
 8002746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <setCalibrationValues+0xb4>)
 800274c:	e9c3 0100 	strd	r0, r1, [r3]
	calibValRgy = 0.16;
 8002750:	a115      	add	r1, pc, #84	; (adr r1, 80027a8 <setCalibrationValues+0x88>)
 8002752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <setCalibrationValues+0xb8>)
 8002758:	e9c3 0100 	strd	r0, r1, [r3]
	calibValRgz = 2.13;
 800275c:	a114      	add	r1, pc, #80	; (adr r1, 80027b0 <setCalibrationValues+0x90>)
 800275e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <setCalibrationValues+0xbc>)
 8002764:	e9c3 0100 	strd	r0, r1, [r3]

	rcxHardIronCorrection = 38.5;
 8002768:	491d      	ldr	r1, [pc, #116]	; (80027e0 <setCalibrationValues+0xc0>)
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <setCalibrationValues+0xc4>)
 800276c:	2000      	movs	r0, #0
 800276e:	e9c3 0100 	strd	r0, r1, [r3]
	rcyHardIronCorrection = 40.3;
 8002772:	a111      	add	r1, pc, #68	; (adr r1, 80027b8 <setCalibrationValues+0x98>)
 8002774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <setCalibrationValues+0xc8>)
 800277a:	e9c3 0100 	strd	r0, r1, [r3]
	rczHardIronCorrection = -65.8;
 800277e:	a110      	add	r1, pc, #64	; (adr r1, 80027c0 <setCalibrationValues+0xa0>)
 8002780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <setCalibrationValues+0xcc>)
 8002786:	e9c3 0100 	strd	r0, r1, [r3]
 800278a:	4770      	bx	lr
 800278c:	f3af 8000 	nop.w
 8002790:	66666666 	.word	0x66666666
 8002794:	c0580666 	.word	0xc0580666
 8002798:	cccccccd 	.word	0xcccccccd
 800279c:	c06daccc 	.word	0xc06daccc
 80027a0:	28f5c28f 	.word	0x28f5c28f
 80027a4:	bfea8f5c 	.word	0xbfea8f5c
 80027a8:	47ae147b 	.word	0x47ae147b
 80027ac:	3fc47ae1 	.word	0x3fc47ae1
 80027b0:	70a3d70a 	.word	0x70a3d70a
 80027b4:	40010a3d 	.word	0x40010a3d
 80027b8:	66666666 	.word	0x66666666
 80027bc:	40442666 	.word	0x40442666
 80027c0:	33333333 	.word	0x33333333
 80027c4:	c0507333 	.word	0xc0507333
 80027c8:	20008758 	.word	0x20008758
 80027cc:	200088f8 	.word	0x200088f8
 80027d0:	20008708 	.word	0x20008708
 80027d4:	2000ca30 	.word	0x2000ca30
 80027d8:	20004278 	.word	0x20004278
 80027dc:	20004660 	.word	0x20004660
 80027e0:	40434000 	.word	0x40434000
 80027e4:	2000c810 	.word	0x2000c810
 80027e8:	20004848 	.word	0x20004848
 80027ec:	200046b0 	.word	0x200046b0
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	4037cccc 	.word	0x4037cccc

080027f8 <calibrateMPU9250AccelerometerAndGyro>:

/******************************************************************************
 * The accelerator and the gyro evaluate its steady state readings for compensation
 ******************************************************************************/
void calibrateMPU9250AccelerometerAndGyro()
{
 80027f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (doCalibrationSensoroutput == 1)
 80027fc:	4c58      	ldr	r4, [pc, #352]	; (8002960 <calibrateMPU9250AccelerometerAndGyro+0x168>)
 80027fe:	4d59      	ldr	r5, [pc, #356]	; (8002964 <calibrateMPU9250AccelerometerAndGyro+0x16c>)
 8002800:	8823      	ldrh	r3, [r4, #0]
 8002802:	4e59      	ldr	r6, [pc, #356]	; (8002968 <calibrateMPU9250AccelerometerAndGyro+0x170>)
 8002804:	4f59      	ldr	r7, [pc, #356]	; (800296c <calibrateMPU9250AccelerometerAndGyro+0x174>)
 8002806:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80029c4 <calibrateMPU9250AccelerometerAndGyro+0x1cc>
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d11f      	bne.n	8002850 <calibrateMPU9250AccelerometerAndGyro+0x58>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002810:	2108      	movs	r1, #8
 8002812:	4857      	ldr	r0, [pc, #348]	; (8002970 <calibrateMPU9250AccelerometerAndGyro+0x178>)
 8002814:	f004 fe1e 	bl	8007454 <HAL_TIM_PWM_Start>
		sumRax = sumRay = sumRaz = sumRgx = sumRgy = sumRgz = 0;
 8002818:	4956      	ldr	r1, [pc, #344]	; (8002974 <calibrateMPU9250AccelerometerAndGyro+0x17c>)
 800281a:	2200      	movs	r2, #0
 800281c:	2300      	movs	r3, #0
 800281e:	e9c5 2300 	strd	r2, r3, [r5]
 8002822:	e9c6 2300 	strd	r2, r3, [r6]
 8002826:	e9c7 2300 	strd	r2, r3, [r7]
 800282a:	e9c1 2300 	strd	r2, r3, [r1]
 800282e:	4952      	ldr	r1, [pc, #328]	; (8002978 <calibrateMPU9250AccelerometerAndGyro+0x180>)
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
		errSumP = errSumPWatch = 0;
 8002834:	4951      	ldr	r1, [pc, #324]	; (800297c <calibrateMPU9250AccelerometerAndGyro+0x184>)
		sumRax = sumRay = sumRaz = sumRgx = sumRgy = sumRgz = 0;
 8002836:	e9c8 2300 	strd	r2, r3, [r8]
		errSumP = errSumPWatch = 0;
 800283a:	e9c1 2300 	strd	r2, r3, [r1]
 800283e:	4950      	ldr	r1, [pc, #320]	; (8002980 <calibrateMPU9250AccelerometerAndGyro+0x188>)
 8002840:	e9c1 2300 	strd	r2, r3, [r1]
		errSumR = errSumRWatch = 0;
 8002844:	494f      	ldr	r1, [pc, #316]	; (8002984 <calibrateMPU9250AccelerometerAndGyro+0x18c>)
 8002846:	e9c1 2300 	strd	r2, r3, [r1]
 800284a:	494f      	ldr	r1, [pc, #316]	; (8002988 <calibrateMPU9250AccelerometerAndGyro+0x190>)
 800284c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	sumRax += raxd;
 8002850:	4b4e      	ldr	r3, [pc, #312]	; (800298c <calibrateMPU9250AccelerometerAndGyro+0x194>)
	sumRay += rayd;
 8002852:	f8df a124 	ldr.w	sl, [pc, #292]	; 8002978 <calibrateMPU9250AccelerometerAndGyro+0x180>
	sumRaz += razd;
 8002856:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002974 <calibrateMPU9250AccelerometerAndGyro+0x17c>
	sumRax += raxd;
 800285a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800285e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002862:	f7fd fcb7 	bl	80001d4 <__adddf3>
 8002866:	e9c8 0100 	strd	r0, r1, [r8]
	sumRay += rayd;
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <calibrateMPU9250AccelerometerAndGyro+0x198>)
 800286c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002870:	e9da 2300 	ldrd	r2, r3, [sl]
 8002874:	f7fd fcae 	bl	80001d4 <__adddf3>
 8002878:	e9ca 0100 	strd	r0, r1, [sl]
	sumRaz += razd;
 800287c:	4b45      	ldr	r3, [pc, #276]	; (8002994 <calibrateMPU9250AccelerometerAndGyro+0x19c>)
 800287e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002882:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002886:	f7fd fca5 	bl	80001d4 <__adddf3>
 800288a:	e9c9 0100 	strd	r0, r1, [r9]
	sumRgx += rgxd;
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <calibrateMPU9250AccelerometerAndGyro+0x1a0>)
 8002890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002898:	f7fd fc9c 	bl	80001d4 <__adddf3>
 800289c:	e9c7 0100 	strd	r0, r1, [r7]
	sumRgy += rgyd;
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <calibrateMPU9250AccelerometerAndGyro+0x1a4>)
 80028a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80028aa:	f7fd fc93 	bl	80001d4 <__adddf3>
 80028ae:	e9c6 0100 	strd	r0, r1, [r6]
	sumRgz += rgzd;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <calibrateMPU9250AccelerometerAndGyro+0x1a8>)
 80028b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80028bc:	f7fd fc8a 	bl	80001d4 <__adddf3>
 80028c0:	e9c5 0100 	strd	r0, r1, [r5]
	doCalibrationSensoroutput++;
 80028c4:	8823      	ldrh	r3, [r4, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8023      	strh	r3, [r4, #0]

	if (doCalibrationSensoroutput == 2001)
 80028cc:	8823      	ldrh	r3, [r4, #0]
 80028ce:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d141      	bne.n	800295c <calibrateMPU9250AccelerometerAndGyro+0x164>
	{
		calibValRax = (sumRax / 2000);
 80028d8:	e9d8 0100 	ldrd	r0, r1, [r8]
 80028dc:	2200      	movs	r2, #0
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 80028e0:	f7fd ff54 	bl	800078c <__aeabi_ddiv>
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <calibrateMPU9250AccelerometerAndGyro+0x1b0>)
 80028e6:	e9c3 0100 	strd	r0, r1, [r3]
		calibValRay = (sumRay / 2000);
 80028ea:	2200      	movs	r2, #0
 80028ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 80028f2:	f7fd ff4b 	bl	800078c <__aeabi_ddiv>
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <calibrateMPU9250AccelerometerAndGyro+0x1b4>)
 80028f8:	e9c3 0100 	strd	r0, r1, [r3]
		calibValRaz = (sumRaz / 2000 - 4096); //take g into account; without acceleration: raz should be zero
 80028fc:	2200      	movs	r2, #0
 80028fe:	e9d9 0100 	ldrd	r0, r1, [r9]
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 8002904:	f7fd ff42 	bl	800078c <__aeabi_ddiv>
 8002908:	2200      	movs	r2, #0
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <calibrateMPU9250AccelerometerAndGyro+0x1b8>)
 800290c:	f7fd fc60 	bl	80001d0 <__aeabi_dsub>
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <calibrateMPU9250AccelerometerAndGyro+0x1bc>)
 8002912:	e9c3 0100 	strd	r0, r1, [r3]
		calibValRgx = (sumRgx / 2000);
 8002916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800291a:	2200      	movs	r2, #0
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 800291e:	f7fd ff35 	bl	800078c <__aeabi_ddiv>
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <calibrateMPU9250AccelerometerAndGyro+0x1c0>)
 8002924:	e9c3 0100 	strd	r0, r1, [r3]
		calibValRgy = (sumRgy / 2000);
 8002928:	2200      	movs	r2, #0
 800292a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 8002930:	f7fd ff2c 	bl	800078c <__aeabi_ddiv>
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <calibrateMPU9250AccelerometerAndGyro+0x1c4>)
 8002936:	e9c3 0100 	strd	r0, r1, [r3]
		calibValRgz = (sumRgz / 2000);
 800293a:	2200      	movs	r2, #0
 800293c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <calibrateMPU9250AccelerometerAndGyro+0x1ac>)
 8002942:	f7fd ff23 	bl	800078c <__aeabi_ddiv>
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <calibrateMPU9250AccelerometerAndGyro+0x1c8>)
 8002948:	e9c3 0100 	strd	r0, r1, [r3]
		doCalibrationSensoroutput = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	8023      	strh	r3, [r4, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002950:	2108      	movs	r1, #8
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <calibrateMPU9250AccelerometerAndGyro+0x178>)
	}
}
 8002954:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002958:	f004 bd96 	b.w	8007488 <HAL_TIM_PWM_Stop>
 800295c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002960:	20000000 	.word	0x20000000
 8002964:	2000ca08 	.word	0x2000ca08
 8002968:	200088a8 	.word	0x200088a8
 800296c:	20004180 	.word	0x20004180
 8002970:	20004670 	.word	0x20004670
 8002974:	2000c830 	.word	0x2000c830
 8002978:	200041f0 	.word	0x200041f0
 800297c:	20000198 	.word	0x20000198
 8002980:	200000c8 	.word	0x200000c8
 8002984:	20000150 	.word	0x20000150
 8002988:	20000230 	.word	0x20000230
 800298c:	20008750 	.word	0x20008750
 8002990:	20008718 	.word	0x20008718
 8002994:	20008898 	.word	0x20008898
 8002998:	20008950 	.word	0x20008950
 800299c:	200086f0 	.word	0x200086f0
 80029a0:	2000c900 	.word	0x2000c900
 80029a4:	409f4000 	.word	0x409f4000
 80029a8:	20008758 	.word	0x20008758
 80029ac:	200088f8 	.word	0x200088f8
 80029b0:	40b00000 	.word	0x40b00000
 80029b4:	20008708 	.word	0x20008708
 80029b8:	2000ca30 	.word	0x2000ca30
 80029bc:	20004278 	.word	0x20004278
 80029c0:	20004660 	.word	0x20004660
 80029c4:	200086e0 	.word	0x200086e0

080029c8 <calibrateMPU9250Magnetometer>:

/******************************************************************************
 * Move the magnetometer in an 8 form to hard iron calibrate the magnetometer
 ******************************************************************************/
void calibrateMPU9250Magnetometer()
{
 80029c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (doCalibrationMagnetometer == 1)
 80029cc:	4c6d      	ldr	r4, [pc, #436]	; (8002b84 <calibrateMPU9250Magnetometer+0x1bc>)
 80029ce:	8823      	ldrh	r3, [r4, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b01      	cmp	r3, #1
{
 80029d4:	b08b      	sub	sp, #44	; 0x2c
	if (doCalibrationMagnetometer == 1)
 80029d6:	d103      	bne.n	80029e0 <calibrateMPU9250Magnetometer+0x18>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80029d8:	2108      	movs	r1, #8
 80029da:	486b      	ldr	r0, [pc, #428]	; (8002b88 <calibrateMPU9250Magnetometer+0x1c0>)
 80029dc:	f004 fd3a 	bl	8007454 <HAL_TIM_PWM_Start>
	}

	mxArray[doCalibrationMagnetometer - 1] = mx;
 80029e0:	4a6a      	ldr	r2, [pc, #424]	; (8002b8c <calibrateMPU9250Magnetometer+0x1c4>)
 80029e2:	8823      	ldrh	r3, [r4, #0]
 80029e4:	4d6a      	ldr	r5, [pc, #424]	; (8002b90 <calibrateMPU9250Magnetometer+0x1c8>)
	myArray[doCalibrationMagnetometer - 1] = my;
 80029e6:	4e6b      	ldr	r6, [pc, #428]	; (8002b94 <calibrateMPU9250Magnetometer+0x1cc>)
	mzArray[doCalibrationMagnetometer - 1] = mz;
 80029e8:	4f6b      	ldr	r7, [pc, #428]	; (8002b98 <calibrateMPU9250Magnetometer+0x1d0>)
	mxArray[doCalibrationMagnetometer - 1] = mx;
 80029ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80029f4:	e943 0102 	strd	r0, r1, [r3, #-8]
	myArray[doCalibrationMagnetometer - 1] = my;
 80029f8:	4a68      	ldr	r2, [pc, #416]	; (8002b9c <calibrateMPU9250Magnetometer+0x1d4>)
 80029fa:	8823      	ldrh	r3, [r4, #0]
 80029fc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002a06:	e943 0102 	strd	r0, r1, [r3, #-8]
	mzArray[doCalibrationMagnetometer - 1] = mz;
 8002a0a:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <calibrateMPU9250Magnetometer+0x1d8>)
 8002a0c:	8823      	ldrh	r3, [r4, #0]
 8002a0e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8002a18:	e943 0102 	strd	r0, r1, [r3, #-8]
	doCalibrationMagnetometer++;
 8002a1c:	8823      	ldrh	r3, [r4, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	8023      	strh	r3, [r4, #0]

	if (doCalibrationMagnetometer == 2001)
 8002a24:	8823      	ldrh	r3, [r4, #0]
 8002a26:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f040 80a6 	bne.w	8002b7e <calibrateMPU9250Magnetometer+0x1b6>
	{
		double maxX, minX, maxY, minY, maxZ, minZ;

		minX = maxX = mxArray[0];
 8002a32:	ed95 7b00 	vldr	d7, [r5]
 8002a36:	ed8d 7b00 	vstr	d7, [sp]
		minY = maxY = myArray[0];
 8002a3a:	ed96 7b00 	vldr	d7, [r6]
		minZ = maxZ = mzArray[0];
 8002a3e:	e897 0600 	ldmia.w	r7, {r9, sl}
		minY = maxY = myArray[0];
 8002a42:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a46:	ed8d 7b06 	vstr	d7, [sp, #24]
		minX = maxX = mxArray[0];
 8002a4a:	ed9d 7b00 	vldr	d7, [sp]
		minZ = maxZ = mzArray[0];
 8002a4e:	e9cd 9a08 	strd	r9, sl, [sp, #32]
		minX = maxX = mxArray[0];
 8002a52:	ed8d 7b04 	vstr	d7, [sp, #16]

		for (int i = 1; i < 2000; i++)
 8002a56:	2401      	movs	r4, #1
		{
			if (minX > mxArray[i])
 8002a58:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002a5c:	eb05 0b08 	add.w	fp, r5, r8
 8002a60:	e9db 0100 	ldrd	r0, r1, [fp]
 8002a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a68:	f7fd ffd8 	bl	8000a1c <__aeabi_dcmplt>
 8002a6c:	b118      	cbz	r0, 8002a76 <calibrateMPU9250Magnetometer+0xae>
				minX = mxArray[i];
 8002a6e:	ed9b 7b00 	vldr	d7, [fp]
 8002a72:	ed8d 7b00 	vstr	d7, [sp]
			if (maxX < mxArray[i])
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <calibrateMPU9250Magnetometer+0x1c8>)
 8002a78:	4498      	add	r8, r3
 8002a7a:	e9d8 0100 	ldrd	r0, r1, [r8]
 8002a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a82:	f7fd ffe9 	bl	8000a58 <__aeabi_dcmpgt>
 8002a86:	b118      	cbz	r0, 8002a90 <calibrateMPU9250Magnetometer+0xc8>
				maxX = mxArray[i];
 8002a88:	ed98 7b00 	vldr	d7, [r8]
 8002a8c:	ed8d 7b04 	vstr	d7, [sp, #16]

			if (minY > myArray[i])
 8002a90:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002a94:	eb06 0b08 	add.w	fp, r6, r8
 8002a98:	e9db 0100 	ldrd	r0, r1, [fp]
 8002a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aa0:	f7fd ffbc 	bl	8000a1c <__aeabi_dcmplt>
 8002aa4:	b118      	cbz	r0, 8002aae <calibrateMPU9250Magnetometer+0xe6>
				minY = myArray[i];
 8002aa6:	ed9b 7b00 	vldr	d7, [fp]
 8002aaa:	ed8d 7b02 	vstr	d7, [sp, #8]
			if (maxY < myArray[i])
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <calibrateMPU9250Magnetometer+0x1cc>)
 8002ab0:	4498      	add	r8, r3
 8002ab2:	e9d8 0100 	ldrd	r0, r1, [r8]
 8002ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002aba:	f7fd ffcd 	bl	8000a58 <__aeabi_dcmpgt>
 8002abe:	b118      	cbz	r0, 8002ac8 <calibrateMPU9250Magnetometer+0x100>
				maxY = myArray[i];
 8002ac0:	ed98 7b00 	vldr	d7, [r8]
 8002ac4:	ed8d 7b06 	vstr	d7, [sp, #24]

			if (minZ > mzArray[i])
 8002ac8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002acc:	eb07 0b08 	add.w	fp, r7, r8
 8002ad0:	e9db 0100 	ldrd	r0, r1, [fp]
 8002ad4:	464a      	mov	r2, r9
 8002ad6:	4653      	mov	r3, sl
 8002ad8:	f7fd ffa0 	bl	8000a1c <__aeabi_dcmplt>
 8002adc:	b108      	cbz	r0, 8002ae2 <calibrateMPU9250Magnetometer+0x11a>
				minZ = mzArray[i];
 8002ade:	e89b 0600 	ldmia.w	fp, {r9, sl}
			if (maxZ < mzArray[i])
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <calibrateMPU9250Magnetometer+0x1d0>)
 8002ae4:	4498      	add	r8, r3
 8002ae6:	e9d8 0100 	ldrd	r0, r1, [r8]
 8002aea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002aee:	f7fd ffb3 	bl	8000a58 <__aeabi_dcmpgt>
 8002af2:	b118      	cbz	r0, 8002afc <calibrateMPU9250Magnetometer+0x134>
				maxZ = mzArray[i];
 8002af4:	ed98 7b00 	vldr	d7, [r8]
 8002af8:	ed8d 7b08 	vstr	d7, [sp, #32]
		for (int i = 1; i < 2000; i++)
 8002afc:	3401      	adds	r4, #1
 8002afe:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8002b02:	d1a9      	bne.n	8002a58 <calibrateMPU9250Magnetometer+0x90>
		}

		rcxHardIronCorrection = minX + ((maxX - minX) / 2);
 8002b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b0c:	f7fd fb60 	bl	80001d0 <__aeabi_dsub>
 8002b10:	2200      	movs	r2, #0
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <calibrateMPU9250Magnetometer+0x1dc>)
 8002b14:	f7fd fd10 	bl	8000538 <__aeabi_dmul>
 8002b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b1c:	f7fd fb5a 	bl	80001d4 <__adddf3>
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <calibrateMPU9250Magnetometer+0x1e0>)
 8002b22:	e9c3 0100 	strd	r0, r1, [r3]
		rcyHardIronCorrection = minY + ((maxY - minY) / 2);
 8002b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b2e:	f7fd fb4f 	bl	80001d0 <__aeabi_dsub>
 8002b32:	2200      	movs	r2, #0
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <calibrateMPU9250Magnetometer+0x1dc>)
 8002b36:	f7fd fcff 	bl	8000538 <__aeabi_dmul>
 8002b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b3e:	f7fd fb49 	bl	80001d4 <__adddf3>
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <calibrateMPU9250Magnetometer+0x1e4>)
		rczHardIronCorrection = minZ + ((maxZ - minZ) / 2);
 8002b44:	464a      	mov	r2, r9
		rcyHardIronCorrection = minY + ((maxY - minY) / 2);
 8002b46:	e9c3 0100 	strd	r0, r1, [r3]
		rczHardIronCorrection = minZ + ((maxZ - minZ) / 2);
 8002b4a:	4653      	mov	r3, sl
 8002b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002b50:	f7fd fb3e 	bl	80001d0 <__aeabi_dsub>
 8002b54:	2200      	movs	r2, #0
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <calibrateMPU9250Magnetometer+0x1dc>)
 8002b58:	f7fd fcee 	bl	8000538 <__aeabi_dmul>
 8002b5c:	464a      	mov	r2, r9
 8002b5e:	4653      	mov	r3, sl
 8002b60:	f7fd fb38 	bl	80001d4 <__adddf3>
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <calibrateMPU9250Magnetometer+0x1e8>)
 8002b66:	e9c3 0100 	strd	r0, r1, [r3]

		doCalibrationMagnetometer = 0;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <calibrateMPU9250Magnetometer+0x1bc>)
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002b6c:	4806      	ldr	r0, [pc, #24]	; (8002b88 <calibrateMPU9250Magnetometer+0x1c0>)
		doCalibrationMagnetometer = 0;
 8002b6e:	2200      	movs	r2, #0
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002b70:	2108      	movs	r1, #8
		doCalibrationMagnetometer = 0;
 8002b72:	801a      	strh	r2, [r3, #0]
	}
}
 8002b74:	b00b      	add	sp, #44	; 0x2c
 8002b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002b7a:	f004 bc85 	b.w	8007488 <HAL_TIM_PWM_Stop>
}
 8002b7e:	b00b      	add	sp, #44	; 0x2c
 8002b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b84:	2000008e 	.word	0x2000008e
 8002b88:	20004670 	.word	0x20004670
 8002b8c:	2000c990 	.word	0x2000c990
 8002b90:	200002f8 	.word	0x200002f8
 8002b94:	20008970 	.word	0x20008970
 8002b98:	20004858 	.word	0x20004858
 8002b9c:	20004658 	.word	0x20004658
 8002ba0:	20008900 	.word	0x20008900
 8002ba4:	3fe00000 	.word	0x3fe00000
 8002ba8:	2000c810 	.word	0x2000c810
 8002bac:	20004848 	.word	0x20004848
 8002bb0:	200046b0 	.word	0x200046b0

08002bb4 <CAN_Motor_Stop>:

/***********************************************************************************
 * Tell the BLDC motor controllers to turn off the motors
 ***********************************************************************************/
void CAN_Motor_Stop()
{
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	motorStop = RESET;
 8002bb6:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <CAN_Motor_Stop+0xc4>)
	dummyTxBuffer[4] = '2';
	dummyTxBuffer[5] = '/';
	dummyTxBuffer[6] = 0x00;
	dummyTxBuffer[7] = 0x00;

	hcan1.pTxMsg = &myTxMessage;
 8002bb8:	4d30      	ldr	r5, [pc, #192]	; (8002c7c <CAN_Motor_Stop+0xc8>)
	motorStop = RESET;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
	dummyTxBuffer[0] = '#';
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <CAN_Motor_Stop+0xcc>)
	dummyTxBuffer[2] = 't';
 8002bc0:	2674      	movs	r6, #116	; 0x74
	dummyTxBuffer[3] = 'o';
 8002bc2:	246f      	movs	r4, #111	; 0x6f
	dummyTxBuffer[0] = '#';
 8002bc4:	f04f 0e23 	mov.w	lr, #35	; 0x23
	dummyTxBuffer[1] = 's';
 8002bc8:	2773      	movs	r7, #115	; 0x73
	dummyTxBuffer[4] = '2';
 8002bca:	2032      	movs	r0, #50	; 0x32
	dummyTxBuffer[5] = '/';
 8002bcc:	212f      	movs	r1, #47	; 0x2f
	dummyTxBuffer[2] = 't';
 8002bce:	709e      	strb	r6, [r3, #2]
	dummyTxBuffer[3] = 'o';
 8002bd0:	70dc      	strb	r4, [r3, #3]
	dummyTxBuffer[0] = '#';
 8002bd2:	f883 e000 	strb.w	lr, [r3]
	dummyTxBuffer[1] = 's';
 8002bd6:	705f      	strb	r7, [r3, #1]
	dummyTxBuffer[4] = '2';
 8002bd8:	7118      	strb	r0, [r3, #4]
	dummyTxBuffer[5] = '/';
 8002bda:	7159      	strb	r1, [r3, #5]
	dummyTxBuffer[6] = 0x00;
 8002bdc:	719a      	strb	r2, [r3, #6]
	dummyTxBuffer[7] = 0x00;
 8002bde:	71da      	strb	r2, [r3, #7]
	hcan1.pTxMsg = &myTxMessage;
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <CAN_Motor_Stop+0xd0>)
 8002be2:	632b      	str	r3, [r5, #48]	; 0x30
	myTxMessage.DLC = 8;
 8002be4:	f04f 0c08 	mov.w	ip, #8
 8002be8:	f8c3 c010 	str.w	ip, [r3, #16]
	myTxMessage.StdId = 0x231;
 8002bec:	f240 2c31 	movw	ip, #561	; 0x231
	myTxMessage.IDE = CAN_ID_STD;
	myTxMessage.ExtId = 0x00;
	myTxMessage.RTR = CAN_RTR_DATA;
	myTxMessage.Data[0] = dummyTxBuffer[0];
	myTxMessage.Data[1] = dummyTxBuffer[1];
	myTxMessage.Data[2] = dummyTxBuffer[2];
 8002bf0:	759e      	strb	r6, [r3, #22]
	myTxMessage.Data[3] = dummyTxBuffer[3];
 8002bf2:	75dc      	strb	r4, [r3, #23]
	myTxMessage.StdId = 0x231;
 8002bf4:	f8c3 c000 	str.w	ip, [r3]
	myTxMessage.IDE = CAN_ID_STD;
 8002bf8:	609a      	str	r2, [r3, #8]
	myTxMessage.ExtId = 0x00;
 8002bfa:	605a      	str	r2, [r3, #4]
	myTxMessage.RTR = CAN_RTR_DATA;
 8002bfc:	60da      	str	r2, [r3, #12]
	myTxMessage.Data[0] = dummyTxBuffer[0];
 8002bfe:	f883 e014 	strb.w	lr, [r3, #20]
	myTxMessage.Data[1] = dummyTxBuffer[1];
 8002c02:	755f      	strb	r7, [r3, #21]
	myTxMessage.Data[4] = dummyTxBuffer[4];
 8002c04:	7618      	strb	r0, [r3, #24]
	myTxMessage.Data[5] = dummyTxBuffer[5];
 8002c06:	7659      	strb	r1, [r3, #25]
	myTxMessage.Data[6] = dummyTxBuffer[6];
 8002c08:	769a      	strb	r2, [r3, #26]
	myTxMessage.Data[7] = dummyTxBuffer[7];
 8002c0a:	76da      	strb	r2, [r3, #27]
 8002c0c:	461c      	mov	r4, r3

	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c0e:	462e      	mov	r6, r5
 8002c10:	4630      	mov	r0, r6
 8002c12:	f002 faed 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d1fa      	bne.n	8002c10 <CAN_Motor_Stop+0x5c>
	myTxMessage.StdId = 0x232;
 8002c1a:	f240 2332 	movw	r3, #562	; 0x232
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c1e:	4e17      	ldr	r6, [pc, #92]	; (8002c7c <CAN_Motor_Stop+0xc8>)
	myTxMessage.StdId = 0x232;
 8002c20:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c22:	4630      	mov	r0, r6
 8002c24:	f002 fae4 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d1fa      	bne.n	8002c22 <CAN_Motor_Stop+0x6e>
	myTxMessage.StdId = 0x233;
 8002c2c:	f240 2333 	movw	r3, #563	; 0x233
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c30:	4e12      	ldr	r6, [pc, #72]	; (8002c7c <CAN_Motor_Stop+0xc8>)
	myTxMessage.StdId = 0x233;
 8002c32:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c34:	4630      	mov	r0, r6
 8002c36:	f002 fadb 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d1fa      	bne.n	8002c34 <CAN_Motor_Stop+0x80>
	myTxMessage.StdId = 0x234;
 8002c3e:	f44f 730d 	mov.w	r3, #564	; 0x234
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c42:	4e0e      	ldr	r6, [pc, #56]	; (8002c7c <CAN_Motor_Stop+0xc8>)
	myTxMessage.StdId = 0x234;
 8002c44:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002c46:	4630      	mov	r0, r6
 8002c48:	f002 fad2 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1fa      	bne.n	8002c46 <CAN_Motor_Stop+0x92>
	__LOADCANWITHDEFAULT
 8002c50:	2323      	movs	r3, #35	; 0x23
 8002c52:	7523      	strb	r3, [r4, #20]
 8002c54:	2370      	movs	r3, #112	; 0x70
 8002c56:	7563      	strb	r3, [r4, #21]
 8002c58:	2377      	movs	r3, #119	; 0x77
 8002c5a:	75a3      	strb	r3, [r4, #22]
 8002c5c:	236d      	movs	r3, #109	; 0x6d
 8002c5e:	75e3      	strb	r3, [r4, #23]
 8002c60:	2332      	movs	r3, #50	; 0x32
 8002c62:	7623      	strb	r3, [r4, #24]
 8002c64:	232f      	movs	r3, #47	; 0x2f
 8002c66:	7663      	strb	r3, [r4, #25]
 8002c68:	2308      	movs	r3, #8
 8002c6a:	632c      	str	r4, [r5, #48]	; 0x30
 8002c6c:	6123      	str	r3, [r4, #16]
 8002c6e:	60a0      	str	r0, [r4, #8]
 8002c70:	6060      	str	r0, [r4, #4]
 8002c72:	60e0      	str	r0, [r4, #12]
 8002c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200088b2 	.word	0x200088b2
 8002c7c:	2000c8b0 	.word	0x2000c8b0
 8002c80:	2000c800 	.word	0x2000c800
 8002c84:	20004818 	.word	0x20004818

08002c88 <CAN_Motor_Start>:
/***********************************************************************************
 * Tell the BLDC motor controllers to start the motors at minimum speed
 ***********************************************************************************/
void CAN_Motor_Start()
{
	motorStart = RESET;
 8002c88:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <CAN_Motor_Start+0xd8>)
 8002c8a:	2100      	movs	r1, #0
{
 8002c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	motorStart = RESET;
 8002c90:	7019      	strb	r1, [r3, #0]
	dummyTxBuffer[0] = '#';
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <CAN_Motor_Start+0xdc>)
	dummyTxBuffer[4] = '2';
	dummyTxBuffer[5] = '/';
	dummyTxBuffer[6] = 0x30;
	dummyTxBuffer[7] = 0x30;

	hcan1.pTxMsg = &myTxMessage;
 8002c94:	4d34      	ldr	r5, [pc, #208]	; (8002d68 <CAN_Motor_Start+0xe0>)
	dummyTxBuffer[6] = 0x30;
 8002c96:	2230      	movs	r2, #48	; 0x30
	dummyTxBuffer[3] = 'a';
 8002c98:	2661      	movs	r6, #97	; 0x61
	dummyTxBuffer[4] = '2';
 8002c9a:	2432      	movs	r4, #50	; 0x32
	dummyTxBuffer[0] = '#';
 8002c9c:	f04f 0c23 	mov.w	ip, #35	; 0x23
	dummyTxBuffer[1] = 's';
 8002ca0:	f04f 0e73 	mov.w	lr, #115	; 0x73
	dummyTxBuffer[2] = 't';
 8002ca4:	2774      	movs	r7, #116	; 0x74
	dummyTxBuffer[5] = '/';
 8002ca6:	202f      	movs	r0, #47	; 0x2f
	dummyTxBuffer[3] = 'a';
 8002ca8:	70de      	strb	r6, [r3, #3]
	dummyTxBuffer[4] = '2';
 8002caa:	711c      	strb	r4, [r3, #4]
	dummyTxBuffer[0] = '#';
 8002cac:	f883 c000 	strb.w	ip, [r3]
	dummyTxBuffer[1] = 's';
 8002cb0:	f883 e001 	strb.w	lr, [r3, #1]
	dummyTxBuffer[2] = 't';
 8002cb4:	709f      	strb	r7, [r3, #2]
	dummyTxBuffer[5] = '/';
 8002cb6:	7158      	strb	r0, [r3, #5]
	dummyTxBuffer[6] = 0x30;
 8002cb8:	719a      	strb	r2, [r3, #6]
	dummyTxBuffer[7] = 0x30;
 8002cba:	71da      	strb	r2, [r3, #7]
	hcan1.pTxMsg = &myTxMessage;
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <CAN_Motor_Start+0xe4>)
 8002cbe:	632b      	str	r3, [r5, #48]	; 0x30
	myTxMessage.DLC = 8;
 8002cc0:	f04f 0808 	mov.w	r8, #8
 8002cc4:	f8c3 8010 	str.w	r8, [r3, #16]
	myTxMessage.StdId = 0x231;
 8002cc8:	f240 2831 	movw	r8, #561	; 0x231
	myTxMessage.ExtId = 0x00;
	myTxMessage.RTR = CAN_RTR_DATA;
	myTxMessage.Data[0] = dummyTxBuffer[0];
	myTxMessage.Data[1] = dummyTxBuffer[1];
	myTxMessage.Data[2] = dummyTxBuffer[2];
	myTxMessage.Data[3] = dummyTxBuffer[3];
 8002ccc:	75de      	strb	r6, [r3, #23]
	myTxMessage.Data[4] = dummyTxBuffer[4];
 8002cce:	761c      	strb	r4, [r3, #24]
	myTxMessage.StdId = 0x231;
 8002cd0:	f8c3 8000 	str.w	r8, [r3]
	myTxMessage.IDE = CAN_ID_STD;
 8002cd4:	6099      	str	r1, [r3, #8]
	myTxMessage.ExtId = 0x00;
 8002cd6:	6059      	str	r1, [r3, #4]
	myTxMessage.RTR = CAN_RTR_DATA;
 8002cd8:	60d9      	str	r1, [r3, #12]
	myTxMessage.Data[0] = dummyTxBuffer[0];
 8002cda:	f883 c014 	strb.w	ip, [r3, #20]
	myTxMessage.Data[1] = dummyTxBuffer[1];
 8002cde:	f883 e015 	strb.w	lr, [r3, #21]
	myTxMessage.Data[2] = dummyTxBuffer[2];
 8002ce2:	759f      	strb	r7, [r3, #22]
	myTxMessage.Data[5] = dummyTxBuffer[5];
 8002ce4:	7658      	strb	r0, [r3, #25]
	myTxMessage.Data[6] = dummyTxBuffer[6];
 8002ce6:	769a      	strb	r2, [r3, #26]
	myTxMessage.Data[7] = dummyTxBuffer[7];
 8002ce8:	76da      	strb	r2, [r3, #27]
 8002cea:	461c      	mov	r4, r3

	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002cec:	462e      	mov	r6, r5
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f002 fa7e 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d1fa      	bne.n	8002cee <CAN_Motor_Start+0x66>
	myTxMessage.StdId = 0x232;
 8002cf8:	f240 2332 	movw	r3, #562	; 0x232
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002cfc:	4e1a      	ldr	r6, [pc, #104]	; (8002d68 <CAN_Motor_Start+0xe0>)
	myTxMessage.StdId = 0x232;
 8002cfe:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002d00:	4630      	mov	r0, r6
 8002d02:	f002 fa75 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1fa      	bne.n	8002d00 <CAN_Motor_Start+0x78>
	myTxMessage.StdId = 0x233;
 8002d0a:	f240 2333 	movw	r3, #563	; 0x233
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002d0e:	4e16      	ldr	r6, [pc, #88]	; (8002d68 <CAN_Motor_Start+0xe0>)
	myTxMessage.StdId = 0x233;
 8002d10:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002d12:	4630      	mov	r0, r6
 8002d14:	f002 fa6c 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1fa      	bne.n	8002d12 <CAN_Motor_Start+0x8a>
	myTxMessage.StdId = 0x234;
 8002d1c:	f44f 730d 	mov.w	r3, #564	; 0x234
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002d20:	4f11      	ldr	r7, [pc, #68]	; (8002d68 <CAN_Motor_Start+0xe0>)
	myTxMessage.StdId = 0x234;
 8002d22:	6023      	str	r3, [r4, #0]
	while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8002d24:	4638      	mov	r0, r7
 8002d26:	f002 fa63 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d1f9      	bne.n	8002d24 <CAN_Motor_Start+0x9c>
	HAL_CAN_Transmit_IT(&hcan1);
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <CAN_Motor_Start+0xe0>)
 8002d32:	f002 fa5d 	bl	80051f0 <HAL_CAN_Transmit_IT>
	__LOADCANWITHDEFAULT
 8002d36:	2323      	movs	r3, #35	; 0x23
 8002d38:	7523      	strb	r3, [r4, #20]
 8002d3a:	2370      	movs	r3, #112	; 0x70
 8002d3c:	7563      	strb	r3, [r4, #21]
 8002d3e:	2377      	movs	r3, #119	; 0x77
 8002d40:	75a3      	strb	r3, [r4, #22]
 8002d42:	236d      	movs	r3, #109	; 0x6d
 8002d44:	75e3      	strb	r3, [r4, #23]
 8002d46:	2332      	movs	r3, #50	; 0x32
 8002d48:	7623      	strb	r3, [r4, #24]
 8002d4a:	232f      	movs	r3, #47	; 0x2f
 8002d4c:	7663      	strb	r3, [r4, #25]
 8002d4e:	2308      	movs	r3, #8
 8002d50:	632c      	str	r4, [r5, #48]	; 0x30
 8002d52:	6123      	str	r3, [r4, #16]
 8002d54:	60a6      	str	r6, [r4, #8]
 8002d56:	6066      	str	r6, [r4, #4]
 8002d58:	60e6      	str	r6, [r4, #12]
 8002d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d5e:	bf00      	nop
 8002d60:	20008948 	.word	0x20008948
 8002d64:	2000c800 	.word	0x2000c800
 8002d68:	2000c8b0 	.word	0x2000c8b0
 8002d6c:	20004818 	.word	0x20004818

08002d70 <Read_Futaba>:

/***********************************************************************************
 * Read the Futaba remote control inputs
 ***********************************************************************************/
void Read_Futaba()
{
 8002d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//check if new remote controller values are available
	if (exti1_count > 0 && exti2_count > 0 && exti3_count > 0 && exti4_count > 0 && exti5_count > 0 && exti6_count > 0)
 8002d74:	4aa4      	ldr	r2, [pc, #656]	; (8003008 <Read_Futaba+0x298>)
 8002d76:	8813      	ldrh	r3, [r2, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4693      	mov	fp, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 81d8 	beq.w	8003132 <Read_Futaba+0x3c2>
 8002d82:	4ca2      	ldr	r4, [pc, #648]	; (800300c <Read_Futaba+0x29c>)
 8002d84:	8823      	ldrh	r3, [r4, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 81d2 	beq.w	8003132 <Read_Futaba+0x3c2>
 8002d8e:	4aa0      	ldr	r2, [pc, #640]	; (8003010 <Read_Futaba+0x2a0>)
 8002d90:	8813      	ldrh	r3, [r2, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4692      	mov	sl, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 81cb 	beq.w	8003132 <Read_Futaba+0x3c2>
 8002d9c:	4a9d      	ldr	r2, [pc, #628]	; (8003014 <Read_Futaba+0x2a4>)
 8002d9e:	9201      	str	r2, [sp, #4]
 8002da0:	8813      	ldrh	r3, [r2, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 81c4 	beq.w	8003132 <Read_Futaba+0x3c2>
 8002daa:	4d9b      	ldr	r5, [pc, #620]	; (8003018 <Read_Futaba+0x2a8>)
 8002dac:	882b      	ldrh	r3, [r5, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 81be 	beq.w	8003132 <Read_Futaba+0x3c2>
 8002db6:	4e99      	ldr	r6, [pc, #612]	; (800301c <Read_Futaba+0x2ac>)
 8002db8:	8833      	ldrh	r3, [r6, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 81b8 	beq.w	8003132 <Read_Futaba+0x3c2>
	{
		if (exti1_count > 500 && exti1_count < 1200)
 8002dc2:	f8bb 3000 	ldrh.w	r3, [fp]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dcc:	d90a      	bls.n	8002de4 <Read_Futaba+0x74>
 8002dce:	f8bb 3000 	ldrh.w	r3, [fp]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
		{
			exti1_count_value = exti1_count; //only for debugging; can be deleted
 8002dd8:	bf3f      	itttt	cc
 8002dda:	f8bb 3000 	ldrhcc.w	r3, [fp]
 8002dde:	4a90      	ldrcc	r2, [pc, #576]	; (8003020 <Read_Futaba+0x2b0>)
 8002de0:	b29b      	uxthcc	r3, r3
 8002de2:	8013      	strhcc	r3, [r2, #0]
			//ko = ((double) (exti1_count_value - 595) * 10) / 590; //middle position of VR potentiometer of the Futaba remote control results in a ko of 5 (min 0, max 2)
		}
		if (exti2_count > 500 && exti2_count < 1200) //exti2_count values: g_switch_down == 594; g_switch_up == 930
 8002de4:	8823      	ldrh	r3, [r4, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dec:	d925      	bls.n	8002e3a <Read_Futaba+0xca>
 8002dee:	8823      	ldrh	r3, [r4, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002df6:	d220      	bcs.n	8002e3a <Read_Futaba+0xca>
		{
			exti2_count_value = exti2_count; //only for debugging; can be deleted
 8002df8:	8823      	ldrh	r3, [r4, #0]
 8002dfa:	4a8a      	ldr	r2, [pc, #552]	; (8003024 <Read_Futaba+0x2b4>)
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
			if (exti2_count > 900 && gSwitch == RESET && doCalibrationSensoroutput == 0)
 8002e00:	8823      	ldrh	r3, [r4, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e08:	d90b      	bls.n	8002e22 <Read_Futaba+0xb2>
 8002e0a:	4a87      	ldr	r2, [pc, #540]	; (8003028 <Read_Futaba+0x2b8>)
 8002e0c:	7813      	ldrb	r3, [r2, #0]
 8002e0e:	b943      	cbnz	r3, 8002e22 <Read_Futaba+0xb2>
 8002e10:	4886      	ldr	r0, [pc, #536]	; (800302c <Read_Futaba+0x2bc>)
 8002e12:	8803      	ldrh	r3, [r0, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b923      	cbnz	r3, 8002e22 <Read_Futaba+0xb2>
			{
				gSwitch = SET; //represents the G switch on the Futaba remote control
 8002e18:	2701      	movs	r7, #1
 8002e1a:	7017      	strb	r7, [r2, #0]
				clearPIDdata();
 8002e1c:	f7ff fc02 	bl	8002624 <clearPIDdata>
				doCalibrationSensoroutput = 1;
 8002e20:	8007      	strh	r7, [r0, #0]
			}
			if (exti2_count < 600)
 8002e22:	8823      	ldrh	r3, [r4, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002e2a:	d206      	bcs.n	8002e3a <Read_Futaba+0xca>
			{
				gSwitch = RESET;
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <Read_Futaba+0x2b8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
				clearPIDdata();
 8002e32:	f7ff fbf7 	bl	8002624 <clearPIDdata>
				setCalibrationValues();
 8002e36:	f7ff fc73 	bl	8002720 <setCalibrationValues>
			}
		}
		if (exti3_count > 500 && exti3_count < 1200)
 8002e3a:	f8ba 3000 	ldrh.w	r3, [sl]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e44:	d90a      	bls.n	8002e5c <Read_Futaba+0xec>
 8002e46:	f8ba 3000 	ldrh.w	r3, [sl]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
			remoteYaw = exti3_count;
 8002e50:	bf3f      	itttt	cc
 8002e52:	f8ba 3000 	ldrhcc.w	r3, [sl]
 8002e56:	4a76      	ldrcc	r2, [pc, #472]	; (8003030 <Read_Futaba+0x2c0>)
 8002e58:	b29b      	uxthcc	r3, r3
 8002e5a:	8013      	strhcc	r3, [r2, #0]
		if (exti4_count > 500 && exti4_count < 1200)
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	4875      	ldr	r0, [pc, #468]	; (8003034 <Read_Futaba+0x2c4>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e68:	d909      	bls.n	8002e7e <Read_Futaba+0x10e>
 8002e6a:	9b01      	ldr	r3, [sp, #4]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
			remoteThrottle = exti4_count;
 8002e74:	bf3f      	itttt	cc
 8002e76:	9b01      	ldrcc	r3, [sp, #4]
 8002e78:	881b      	ldrhcc	r3, [r3, #0]
 8002e7a:	b29b      	uxthcc	r3, r3
 8002e7c:	8003      	strhcc	r3, [r0, #0]
		if (exti5_count > 500 && exti5_count < 1200)
 8002e7e:	882b      	ldrh	r3, [r5, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e86:	d908      	bls.n	8002e9a <Read_Futaba+0x12a>
 8002e88:	882b      	ldrh	r3, [r5, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
			remotePitch = exti5_count;
 8002e90:	bf3f      	itttt	cc
 8002e92:	882b      	ldrhcc	r3, [r5, #0]
 8002e94:	4a68      	ldrcc	r2, [pc, #416]	; (8003038 <Read_Futaba+0x2c8>)
 8002e96:	b29b      	uxthcc	r3, r3
 8002e98:	8013      	strhcc	r3, [r2, #0]
		if (exti6_count > 500 && exti6_count < 1200)
 8002e9a:	8833      	ldrh	r3, [r6, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ea2:	d908      	bls.n	8002eb6 <Read_Futaba+0x146>
 8002ea4:	8833      	ldrh	r3, [r6, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
			remoteRoll = exti6_count;
 8002eac:	bf3f      	itttt	cc
 8002eae:	8833      	ldrhcc	r3, [r6, #0]
 8002eb0:	4a62      	ldrcc	r2, [pc, #392]	; (800303c <Read_Futaba+0x2cc>)
 8002eb2:	b29b      	uxthcc	r3, r3
 8002eb4:	8013      	strhcc	r3, [r2, #0]

		if (remoteThrottle < 690 && remoteYaw < 790)
 8002eb6:	8803      	ldrh	r3, [r0, #0]
 8002eb8:	f240 22b1 	movw	r2, #689	; 0x2b1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d80b      	bhi.n	8002eda <Read_Futaba+0x16a>
 8002ec2:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <Read_Futaba+0x2c0>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	f240 3215 	movw	r2, #789	; 0x315
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d804      	bhi.n	8002eda <Read_Futaba+0x16a>
		{
			clearPIDdata();
 8002ed0:	f7ff fba8 	bl	8002624 <clearPIDdata>
			motorStart = SET;
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <Read_Futaba+0x2d0>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
		}
		if (remoteThrottle < 690 && remoteYaw > 1050)
 8002eda:	8803      	ldrh	r3, [r0, #0]
 8002edc:	f240 22b1 	movw	r2, #689	; 0x2b1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d80b      	bhi.n	8002efe <Read_Futaba+0x18e>
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <Read_Futaba+0x2c0>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f240 421a 	movw	r2, #1050	; 0x41a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d904      	bls.n	8002efe <Read_Futaba+0x18e>
		{
			clearPIDdata();
 8002ef4:	f7ff fb96 	bl	8002624 <clearPIDdata>
			motorStop = SET;
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <Read_Futaba+0x2d4>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
		}

		//setRPM = ((double) remoteThrottle - 680.0) / 2;
		//make throttle stick less sensitive in the +/- lift off region for better maneuver control
		if (remoteThrottle <= 750)
 8002efe:	8803      	ldrh	r3, [r0, #0]
 8002f00:	4f51      	ldr	r7, [pc, #324]	; (8003048 <Read_Futaba+0x2d8>)
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f200 8115 	bhi.w	8003138 <Read_Futaba+0x3c8>
		{
			setRPM = ((double) (remoteThrottle - 600)) * 96 / 150;
 8002f0e:	8800      	ldrh	r0, [r0, #0]
 8002f10:	b280      	uxth	r0, r0
 8002f12:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8002f16:	f7fd faa9 	bl	800046c <__aeabi_i2d>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <Read_Futaba+0x2dc>)
 8002f1e:	f7fd fb0b 	bl	8000538 <__aeabi_dmul>
 8002f22:	a333      	add	r3, pc, #204	; (adr r3, 8002ff0 <Read_Futaba+0x280>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fc30 	bl	800078c <__aeabi_ddiv>
		else
		{
			setRPM = ((double) (remoteThrottle - 1050)) * 96 / 150 + 160;
		}

		if (setRPM < 60.0)
 8002f2c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8003070 <Read_Futaba+0x300>
			setRPM = ((double) (remoteThrottle - 1050)) * 96 / 150 + 160;
 8002f30:	e9c7 0100 	strd	r0, r1, [r7]
		if (setRPM < 60.0)
 8002f34:	f04f 0800 	mov.w	r8, #0
 8002f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	f7fd fd6c 	bl	8000a1c <__aeabi_dcmplt>
 8002f44:	b108      	cbz	r0, 8002f4a <Read_Futaba+0x1da>
		{
			setRPM = 60.0;
 8002f46:	e9c7 8900 	strd	r8, r9, [r7]
		}

		setPitch = 2.0 * (0.18 * ((double) remotePitch - 680.0) - 46.0) + trimmValuePitch; //multiplier of 2.0 to scale joystick movement
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <Read_Futaba+0x2c8>)
 8002f4c:	4f40      	ldr	r7, [pc, #256]	; (8003050 <Read_Futaba+0x2e0>)
 8002f4e:	8818      	ldrh	r0, [r3, #0]
 8002f50:	4b40      	ldr	r3, [pc, #256]	; (8003054 <Read_Futaba+0x2e4>)
 8002f52:	b280      	uxth	r0, r0
 8002f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f58:	f7fd fa78 	bl	800044c <__aeabi_ui2d>
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <Read_Futaba+0x2e8>)
 8002f60:	f7fd f936 	bl	80001d0 <__aeabi_dsub>
 8002f64:	a324      	add	r3, pc, #144	; (adr r3, 8002ff8 <Read_Futaba+0x288>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fae5 	bl	8000538 <__aeabi_dmul>
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4b3a      	ldr	r3, [pc, #232]	; (800305c <Read_Futaba+0x2ec>)
 8002f72:	f7fd f92d 	bl	80001d0 <__aeabi_dsub>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	f7fd f92b 	bl	80001d4 <__adddf3>
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	f7fd f927 	bl	80001d4 <__adddf3>
 8002f86:	e9c7 0100 	strd	r0, r1, [r7]
		if (setPitch < 1.0 && setPitch > -1.0)
 8002f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <Read_Futaba+0x2f0>)
 8002f92:	f7fd fd43 	bl	8000a1c <__aeabi_dcmplt>
 8002f96:	b150      	cbz	r0, 8002fae <Read_Futaba+0x23e>
 8002f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <Read_Futaba+0x2f4>)
 8002fa0:	f7fd fd5a 	bl	8000a58 <__aeabi_dcmpgt>
 8002fa4:	b118      	cbz	r0, 8002fae <Read_Futaba+0x23e>
			setPitch = 0;
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e9c7 2300 	strd	r2, r3, [r7]

		setRoll = -2.8 * (0.18 * ((double) remoteRoll - 680.0) - 46.0) + trimmValueRoll;
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <Read_Futaba+0x2cc>)
 8002fb0:	4f2d      	ldr	r7, [pc, #180]	; (8003068 <Read_Futaba+0x2f8>)
 8002fb2:	8818      	ldrh	r0, [r3, #0]
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <Read_Futaba+0x2fc>)
 8002fb6:	b280      	uxth	r0, r0
 8002fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fbc:	f7fd fa46 	bl	800044c <__aeabi_ui2d>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <Read_Futaba+0x2e8>)
 8002fc4:	f7fd f904 	bl	80001d0 <__aeabi_dsub>
 8002fc8:	a30b      	add	r3, pc, #44	; (adr r3, 8002ff8 <Read_Futaba+0x288>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fab3 	bl	8000538 <__aeabi_dmul>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <Read_Futaba+0x2ec>)
 8002fd6:	f7fd f8fb 	bl	80001d0 <__aeabi_dsub>
 8002fda:	a309      	add	r3, pc, #36	; (adr r3, 8003000 <Read_Futaba+0x290>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd faaa 	bl	8000538 <__aeabi_dmul>
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	e044      	b.n	8003074 <Read_Futaba+0x304>
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	4062c000 	.word	0x4062c000
 8002ff8:	70a3d70a 	.word	0x70a3d70a
 8002ffc:	3fc70a3d 	.word	0x3fc70a3d
 8003000:	66666666 	.word	0x66666666
 8003004:	c0066666 	.word	0xc0066666
 8003008:	20004280 	.word	0x20004280
 800300c:	2000c940 	.word	0x2000c940
 8003010:	20004268 	.word	0x20004268
 8003014:	20004250 	.word	0x20004250
 8003018:	2000c80c 	.word	0x2000c80c
 800301c:	2000c930 	.word	0x2000c930
 8003020:	2000ca10 	.word	0x2000ca10
 8003024:	20004802 	.word	0x20004802
 8003028:	20000002 	.word	0x20000002
 800302c:	20000000 	.word	0x20000000
 8003030:	20004850 	.word	0x20004850
 8003034:	20008730 	.word	0x20008730
 8003038:	200088b0 	.word	0x200088b0
 800303c:	20004790 	.word	0x20004790
 8003040:	20008948 	.word	0x20008948
 8003044:	200088b2 	.word	0x200088b2
 8003048:	20004798 	.word	0x20004798
 800304c:	40580000 	.word	0x40580000
 8003050:	2000c928 	.word	0x2000c928
 8003054:	200086e8 	.word	0x200086e8
 8003058:	40854000 	.word	0x40854000
 800305c:	40470000 	.word	0x40470000
 8003060:	3ff00000 	.word	0x3ff00000
 8003064:	bff00000 	.word	0xbff00000
 8003068:	20004638 	.word	0x20004638
 800306c:	200041d8 	.word	0x200041d8
 8003070:	404e0000 	.word	0x404e0000
 8003074:	f7fd f8ae 	bl	80001d4 <__adddf3>
 8003078:	e9c7 0100 	strd	r0, r1, [r7]
		if (setRoll < 1.0 && setRoll > -1.0)
 800307c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003080:	2200      	movs	r2, #0
 8003082:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <Read_Futaba+0x458>)
 8003084:	f7fd fcca 	bl	8000a1c <__aeabi_dcmplt>
 8003088:	b150      	cbz	r0, 80030a0 <Read_Futaba+0x330>
 800308a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800308e:	2200      	movs	r2, #0
 8003090:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <Read_Futaba+0x45c>)
 8003092:	f7fd fce1 	bl	8000a58 <__aeabi_dcmpgt>
 8003096:	b118      	cbz	r0, 80030a0 <Read_Futaba+0x330>
			setRoll = 0;
 8003098:	2200      	movs	r2, #0
 800309a:	2300      	movs	r3, #0
 800309c:	e9c7 2300 	strd	r2, r3, [r7]

		scaledRemoteYaw = 2.0 * (0.18 * ((double) remoteYaw - 680.0) - 46.0) + trimmValueYaw;
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <Read_Futaba+0x460>)
 80030a2:	4f4c      	ldr	r7, [pc, #304]	; (80031d4 <Read_Futaba+0x464>)
 80030a4:	8818      	ldrh	r0, [r3, #0]
 80030a6:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <Read_Futaba+0x468>)
 80030a8:	b280      	uxth	r0, r0
 80030aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030ae:	f7fd f9cd 	bl	800044c <__aeabi_ui2d>
 80030b2:	2200      	movs	r2, #0
 80030b4:	4b49      	ldr	r3, [pc, #292]	; (80031dc <Read_Futaba+0x46c>)
 80030b6:	f7fd f88b 	bl	80001d0 <__aeabi_dsub>
 80030ba:	a33d      	add	r3, pc, #244	; (adr r3, 80031b0 <Read_Futaba+0x440>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd fa3a 	bl	8000538 <__aeabi_dmul>
 80030c4:	2200      	movs	r2, #0
 80030c6:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <Read_Futaba+0x470>)
 80030c8:	f7fd f882 	bl	80001d0 <__aeabi_dsub>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	f7fd f880 	bl	80001d4 <__adddf3>
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	f7fd f87c 	bl	80001d4 <__adddf3>
 80030dc:	e9c7 0100 	strd	r0, r1, [r7]
		if (scaledRemoteYaw < 10.0 && scaledRemoteYaw > -10.0)
 80030e0:	2200      	movs	r2, #0
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <Read_Futaba+0x474>)
 80030e4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8003200 <Read_Futaba+0x490>
 80030e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030ec:	f7fd fc96 	bl	8000a1c <__aeabi_dcmplt>
 80030f0:	46b9      	mov	r9, r7
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d050      	beq.n	8003198 <Read_Futaba+0x428>
 80030f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030fa:	2200      	movs	r2, #0
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <Read_Futaba+0x478>)
 80030fe:	f7fd fcab 	bl	8000a58 <__aeabi_dcmpgt>
 8003102:	2800      	cmp	r0, #0
 8003104:	d048      	beq.n	8003198 <Read_Futaba+0x428>
		{
			if (yawHold == RESET)
 8003106:	f898 3000 	ldrb.w	r3, [r8]
 800310a:	b943      	cbnz	r3, 800311e <Read_Futaba+0x3ae>
			{
				setYaw = aYaw;
 800310c:	4b37      	ldr	r3, [pc, #220]	; (80031ec <Read_Futaba+0x47c>)
 800310e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <Read_Futaba+0x480>)
 8003114:	e9c3 0100 	strd	r0, r1, [r3]
				yawHold = SET;
 8003118:	2301      	movs	r3, #1

		}
		else
		{
			setYaw = aYaw + scaledRemoteYaw;
			yawHold = RESET;
 800311a:	f888 3000 	strb.w	r3, [r8]
		}

		exti1_count = exti2_count = exti3_count = exti4_count = exti5_count = exti6_count = 0;
 800311e:	9a01      	ldr	r2, [sp, #4]
 8003120:	2300      	movs	r3, #0
 8003122:	8033      	strh	r3, [r6, #0]
 8003124:	802b      	strh	r3, [r5, #0]
 8003126:	8013      	strh	r3, [r2, #0]
 8003128:	f8aa 3000 	strh.w	r3, [sl]
 800312c:	8023      	strh	r3, [r4, #0]
 800312e:	f8ab 3000 	strh.w	r3, [fp]
	}

}
 8003132:	b003      	add	sp, #12
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (remoteThrottle > 750 && remoteThrottle <= 1050)
 8003138:	8803      	ldrh	r3, [r0, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	4293      	cmp	r3, r2
 800313e:	d919      	bls.n	8003174 <Read_Futaba+0x404>
 8003140:	8803      	ldrh	r3, [r0, #0]
 8003142:	f240 421a 	movw	r2, #1050	; 0x41a
 8003146:	b29b      	uxth	r3, r3
 8003148:	4293      	cmp	r3, r2
 800314a:	d813      	bhi.n	8003174 <Read_Futaba+0x404>
			setRPM = ((double) (remoteThrottle - 750)) * 64 / 300 + 96;
 800314c:	8800      	ldrh	r0, [r0, #0]
 800314e:	b280      	uxth	r0, r0
 8003150:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
 8003154:	f7fd f98a 	bl	800046c <__aeabi_i2d>
 8003158:	2200      	movs	r2, #0
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <Read_Futaba+0x484>)
 800315c:	f7fd f9ec 	bl	8000538 <__aeabi_dmul>
 8003160:	a315      	add	r3, pc, #84	; (adr r3, 80031b8 <Read_Futaba+0x448>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fb11 	bl	800078c <__aeabi_ddiv>
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <Read_Futaba+0x488>)
 800316c:	2200      	movs	r2, #0
			setRPM = ((double) (remoteThrottle - 1050)) * 96 / 150 + 160;
 800316e:	f7fd f831 	bl	80001d4 <__adddf3>
 8003172:	e6db      	b.n	8002f2c <Read_Futaba+0x1bc>
 8003174:	8800      	ldrh	r0, [r0, #0]
 8003176:	b280      	uxth	r0, r0
 8003178:	f2a0 401a 	subw	r0, r0, #1050	; 0x41a
 800317c:	f7fd f976 	bl	800046c <__aeabi_i2d>
 8003180:	2200      	movs	r2, #0
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <Read_Futaba+0x488>)
 8003184:	f7fd f9d8 	bl	8000538 <__aeabi_dmul>
 8003188:	a30d      	add	r3, pc, #52	; (adr r3, 80031c0 <Read_Futaba+0x450>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fafd 	bl	800078c <__aeabi_ddiv>
 8003192:	2200      	movs	r2, #0
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <Read_Futaba+0x48c>)
 8003196:	e7ea      	b.n	800316e <Read_Futaba+0x3fe>
			setYaw = aYaw + scaledRemoteYaw;
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <Read_Futaba+0x47c>)
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	e9d9 2300 	ldrd	r2, r3, [r9]
 80031a2:	f7fd f817 	bl	80001d4 <__adddf3>
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <Read_Futaba+0x480>)
 80031a8:	e9c3 0100 	strd	r0, r1, [r3]
			yawHold = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e7b4      	b.n	800311a <Read_Futaba+0x3aa>
 80031b0:	70a3d70a 	.word	0x70a3d70a
 80031b4:	3fc70a3d 	.word	0x3fc70a3d
 80031b8:	00000000 	.word	0x00000000
 80031bc:	4072c000 	.word	0x4072c000
 80031c0:	00000000 	.word	0x00000000
 80031c4:	4062c000 	.word	0x4062c000
 80031c8:	3ff00000 	.word	0x3ff00000
 80031cc:	bff00000 	.word	0xbff00000
 80031d0:	20004850 	.word	0x20004850
 80031d4:	20008700 	.word	0x20008700
 80031d8:	20008738 	.word	0x20008738
 80031dc:	40854000 	.word	0x40854000
 80031e0:	40470000 	.word	0x40470000
 80031e4:	40240000 	.word	0x40240000
 80031e8:	c0240000 	.word	0xc0240000
 80031ec:	20008778 	.word	0x20008778
 80031f0:	200002f0 	.word	0x200002f0
 80031f4:	40500000 	.word	0x40500000
 80031f8:	40580000 	.word	0x40580000
 80031fc:	40640000 	.word	0x40640000
 8003200:	20000003 	.word	0x20000003

08003204 <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 8003204:	b530      	push	{r4, r5, lr}
 8003206:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003208:	2300      	movs	r3, #0
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <SystemClock_Config+0xa8>)
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003210:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003214:	6411      	str	r1, [r2, #64]	; 0x40
 8003216:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003218:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800321c:	9201      	str	r2, [sp, #4]
 800321e:	9a01      	ldr	r2, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <SystemClock_Config+0xac>)
 8003222:	9302      	str	r3, [sp, #8]
 8003224:	6811      	ldr	r1, [r2, #0]
 8003226:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800322a:	6011      	str	r1, [r2, #0]
 800322c:	6812      	ldr	r2, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800322e:	930f      	str	r3, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003230:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003234:	9202      	str	r2, [sp, #8]
 8003236:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003238:	220a      	movs	r2, #10
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800323a:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800323c:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 800323e:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003240:	f44f 73a8 	mov.w	r3, #336	; 0x150
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8003244:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003246:	2504      	movs	r5, #4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003248:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800324a:	910b      	str	r1, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800324c:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800324e:	910d      	str	r1, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003250:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8003252:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003254:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003256:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003258:	9513      	str	r5, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800325a:	f003 fbc7 	bl	80069ec <HAL_RCC_OscConfig>
 800325e:	b100      	cbz	r0, 8003262 <SystemClock_Config+0x5e>
 8003260:	e7fe      	b.n	8003260 <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003262:	230f      	movs	r3, #15
 8003264:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003266:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326a:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800326c:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800326e:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003274:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003276:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003278:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800327a:	f003 fd85 	bl	8006d88 <HAL_RCC_ClockConfig>
 800327e:	4604      	mov	r4, r0
 8003280:	b100      	cbz	r0, 8003284 <SystemClock_Config+0x80>
 8003282:	e7fe      	b.n	8003282 <SystemClock_Config+0x7e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003284:	f003 fe36 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 8003288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003290:	f002 f878 	bl	8005384 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003294:	4628      	mov	r0, r5
 8003296:	f002 f88b 	bl	80053b0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800329a:	4622      	mov	r2, r4
 800329c:	4621      	mov	r1, r4
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	f002 f82f 	bl	8005304 <HAL_NVIC_SetPriority>
}
 80032a6:	b015      	add	sp, #84	; 0x54
 80032a8:	bd30      	pop	{r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	00000000 	.word	0x00000000

080032b8 <main>:
{
 80032b8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80032bc:	b0ab      	sub	sp, #172	; 0xac
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80032be:	2400      	movs	r4, #0
 80032c0:	4d8a      	ldr	r5, [pc, #552]	; (80034ec <main+0x234>)
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_11, GPIO_PIN_RESET);

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032c2:	4f8b      	ldr	r7, [pc, #556]	; (80034f0 <main+0x238>)
	HAL_Init();
 80032c4:	f001 fc1e 	bl	8004b04 <HAL_Init>
	SystemClock_Config();
 80032c8:	f7ff ff9c 	bl	8003204 <SystemClock_Config>
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80032cc:	941d      	str	r4, [sp, #116]	; 0x74
 80032ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_11, GPIO_PIN_RESET);
 80032d0:	4888      	ldr	r0, [pc, #544]	; (80034f4 <main+0x23c>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	632b      	str	r3, [r5, #48]	; 0x30
 80032d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	931d      	str	r3, [sp, #116]	; 0x74
 80032e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80032e2:	941e      	str	r4, [sp, #120]	; 0x78
 80032e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	632b      	str	r3, [r5, #48]	; 0x30
 80032ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	931e      	str	r3, [sp, #120]	; 0x78
 80032f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80032f6:	941f      	str	r4, [sp, #124]	; 0x7c
 80032f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	632b      	str	r3, [r5, #48]	; 0x30
 8003300:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	931f      	str	r3, [sp, #124]	; 0x7c
 8003308:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800330a:	9420      	str	r4, [sp, #128]	; 0x80
 800330c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	632b      	str	r3, [r5, #48]	; 0x30
 8003314:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003316:	f003 0308 	and.w	r3, r3, #8
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_11, GPIO_PIN_RESET);
 800331a:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800331c:	9320      	str	r3, [sp, #128]	; 0x80
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_11, GPIO_PIN_RESET);
 800331e:	f640 0102 	movw	r1, #2050	; 0x802
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003322:	9b20      	ldr	r3, [sp, #128]	; 0x80
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_11, GPIO_PIN_RESET);
 8003324:	f002 fad8 	bl	80058d8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003328:	2302      	movs	r3, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	a923      	add	r1, sp, #140	; 0x8c
 800332c:	4872      	ldr	r0, [pc, #456]	; (80034f8 <main+0x240>)
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800332e:	9323      	str	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003330:	9724      	str	r7, [sp, #144]	; 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	9425      	str	r4, [sp, #148]	; 0x94
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f002 f9f0 	bl	8005718 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA4 PA5
	 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003338:	237c      	movs	r3, #124	; 0x7c
 800333a:	9323      	str	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	a923      	add	r1, sp, #140	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800333e:	4b6f      	ldr	r3, [pc, #444]	; (80034fc <main+0x244>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	486d      	ldr	r0, [pc, #436]	; (80034f8 <main+0x240>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003342:	9324      	str	r3, [sp, #144]	; 0x90

	/*Configure GPIO pins : PB1 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2601      	movs	r6, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9425      	str	r4, [sp, #148]	; 0x94
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f002 f9e6 	bl	8005718 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_11;
 800334c:	f640 0302 	movw	r3, #2050	; 0x802
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003350:	a923      	add	r1, sp, #140	; 0x8c
 8003352:	4868      	ldr	r0, [pc, #416]	; (80034f4 <main+0x23c>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_11;
 8003354:	9323      	str	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003356:	9624      	str	r6, [sp, #144]	; 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	9425      	str	r4, [sp, #148]	; 0x94
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	9426      	str	r4, [sp, #152]	; 0x98
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335c:	f002 f9dc 	bl	8005718 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	a923      	add	r1, sp, #140	; 0x8c
 8003366:	4863      	ldr	r0, [pc, #396]	; (80034f4 <main+0x23c>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003368:	9323      	str	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800336a:	9724      	str	r7, [sp, #144]	; 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	9425      	str	r4, [sp, #148]	; 0x94
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f002 f9d3 	bl	8005718 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003372:	4622      	mov	r2, r4
 8003374:	4621      	mov	r1, r4
 8003376:	2007      	movs	r0, #7
 8003378:	f001 ffc4 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800337c:	2007      	movs	r0, #7
 800337e:	f001 fff5 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003382:	4622      	mov	r2, r4
 8003384:	4621      	mov	r1, r4
 8003386:	2008      	movs	r0, #8
 8003388:	f001 ffbc 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800338c:	2008      	movs	r0, #8
 800338e:	f001 ffed 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003392:	4622      	mov	r2, r4
 8003394:	4621      	mov	r1, r4
 8003396:	2009      	movs	r0, #9
 8003398:	f001 ffb4 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800339c:	2009      	movs	r0, #9
 800339e:	f001 ffe5 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80033a2:	4622      	mov	r2, r4
 80033a4:	4621      	mov	r1, r4
 80033a6:	200a      	movs	r0, #10
 80033a8:	f001 ffac 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80033ac:	200a      	movs	r0, #10
 80033ae:	f001 ffdd 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033b2:	4622      	mov	r2, r4
 80033b4:	4621      	mov	r1, r4
 80033b6:	2017      	movs	r0, #23
 80033b8:	f001 ffa4 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033bc:	2017      	movs	r0, #23
 80033be:	f001 ffd5 	bl	800536c <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80033c2:	4622      	mov	r2, r4
 80033c4:	2104      	movs	r1, #4
 80033c6:	2028      	movs	r0, #40	; 0x28
 80033c8:	f001 ff9c 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033cc:	2028      	movs	r0, #40	; 0x28
 80033ce:	f001 ffcd 	bl	800536c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE()
 80033d2:	941c      	str	r4, [sp, #112]	; 0x70
 80033d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	hadc1.Instance = ADC1;
 80033d6:	4f4a      	ldr	r7, [pc, #296]	; (8003500 <main+0x248>)
	__HAL_RCC_DMA1_CLK_ENABLE()
 80033d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033dc:	632b      	str	r3, [r5, #48]	; 0x30
 80033de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033e4:	4622      	mov	r2, r4
 80033e6:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 80033e8:	931c      	str	r3, [sp, #112]	; 0x70
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033ea:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE()
 80033ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033ee:	f001 ff89 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033f2:	200b      	movs	r0, #11
 80033f4:	f001 ffba 	bl	800536c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80033f8:	4622      	mov	r2, r4
 80033fa:	4621      	mov	r1, r4
 80033fc:	2010      	movs	r0, #16
 80033fe:	f001 ff81 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003402:	2010      	movs	r0, #16
 8003404:	f001 ffb2 	bl	800536c <HAL_NVIC_EnableIRQ>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <main+0x24c>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800340a:	60bc      	str	r4, [r7, #8]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800340c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8003410:	e887 0028 	stmia.w	r7, {r3, r5}
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003414:	4638      	mov	r0, r7
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <main+0x250>)
	hadc1.Init.ScanConvMode = DISABLE;
 8003418:	613c      	str	r4, [r7, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800341a:	61bc      	str	r4, [r7, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800341c:	623c      	str	r4, [r7, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800341e:	62fc      	str	r4, [r7, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003422:	60fc      	str	r4, [r7, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003424:	61fe      	str	r6, [r7, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003426:	633c      	str	r4, [r7, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003428:	617c      	str	r4, [r7, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800342a:	f001 fba3 	bl	8004b74 <HAL_ADC_Init>
 800342e:	b100      	cbz	r0, 8003432 <main+0x17a>
 8003430:	e7fe      	b.n	8003430 <main+0x178>
	sConfig.Channel = ADC_CHANNEL_0;
 8003432:	9023      	str	r0, [sp, #140]	; 0x8c
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003434:	9025      	str	r0, [sp, #148]	; 0x94
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003436:	a923      	add	r1, sp, #140	; 0x8c
 8003438:	4638      	mov	r0, r7
	sConfig.Rank = 1;
 800343a:	9624      	str	r6, [sp, #144]	; 0x90
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343c:	f001 fdac 	bl	8004f98 <HAL_ADC_ConfigChannel>
 8003440:	b100      	cbz	r0, 8003444 <main+0x18c>
 8003442:	e7fe      	b.n	8003442 <main+0x18a>
	hcan1.Instance = CAN1;
 8003444:	4c31      	ldr	r4, [pc, #196]	; (800350c <main+0x254>)
	hcan1.Init.Prescaler = 21;
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <main+0x258>)
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003448:	60a0      	str	r0, [r4, #8]
	hcan1.Init.Prescaler = 21;
 800344a:	f04f 0a15 	mov.w	sl, #21
 800344e:	e884 0408 	stmia.w	r4, {r3, sl}
	hcan1.Init.SJW = CAN_SJW_2TQ;
 8003452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003456:	60e3      	str	r3, [r4, #12]
	hcan1.Init.TTCM = DISABLE;
 8003458:	61a0      	str	r0, [r4, #24]
	hcan1.Init.BS2 = CAN_BS2_2TQ;
 800345a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	hcan1.Init.ABOM = DISABLE;
 800345e:	61e0      	str	r0, [r4, #28]
	hcan1.Init.AWUM = DISABLE;
 8003460:	6220      	str	r0, [r4, #32]
	hcan1.Init.NART = DISABLE;
 8003462:	6260      	str	r0, [r4, #36]	; 0x24
	hcan1.Init.RFLM = DISABLE;
 8003464:	62a0      	str	r0, [r4, #40]	; 0x28
	hcan1.Init.TXFP = DISABLE;
 8003466:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003468:	4620      	mov	r0, r4
	hcan1.Init.BS1 = CAN_BS1_2TQ;
 800346a:	6125      	str	r5, [r4, #16]
	hcan1.Init.BS2 = CAN_BS2_2TQ;
 800346c:	6163      	str	r3, [r4, #20]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800346e:	f001 fe2a 	bl	80050c6 <HAL_CAN_Init>
 8003472:	b100      	cbz	r0, 8003476 <main+0x1be>
 8003474:	e7fe      	b.n	8003474 <main+0x1bc>
	hi2c1.Instance = I2C1;
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <main+0x25c>)
	hi2c1.Init.ClockSpeed = 400000;
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <main+0x260>)
 800347a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003524 <main+0x26c>
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800347e:	6098      	str	r0, [r3, #8]
	hi2c1.Init.ClockSpeed = 400000;
 8003480:	e883 0204 	stmia.w	r3, {r2, r9}
	hi2c1.Init.OwnAddress1 = 0;
 8003484:	60d8      	str	r0, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800348a:	6158      	str	r0, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800348c:	6198      	str	r0, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348e:	61d8      	str	r0, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003490:	6218      	str	r0, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003492:	4618      	mov	r0, r3
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003494:	611a      	str	r2, [r3, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003496:	f002 fba9 	bl	8005bec <HAL_I2C_Init>
 800349a:	b100      	cbz	r0, 800349e <main+0x1e6>
 800349c:	e7fe      	b.n	800349c <main+0x1e4>
	htim3.Instance = TIM3;
 800349e:	4d1f      	ldr	r5, [pc, #124]	; (800351c <main+0x264>)
	htim3.Init.Prescaler = 25;
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <main+0x268>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	60a8      	str	r0, [r5, #8]
	htim3.Init.Prescaler = 25;
 80034a4:	f04f 0819 	mov.w	r8, #25
 80034a8:	e885 0108 	stmia.w	r5, {r3, r8}
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ac:	6128      	str	r0, [r5, #16]
	htim3.Init.Period = 1000;
 80034ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034b2:	4628      	mov	r0, r5
	htim3.Init.Period = 1000;
 80034b4:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034b6:	f003 ff15 	bl	80072e4 <HAL_TIM_PWM_Init>
 80034ba:	b100      	cbz	r0, 80034be <main+0x206>
 80034bc:	e7fe      	b.n	80034bc <main+0x204>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034be:	9021      	str	r0, [sp, #132]	; 0x84
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c0:	9022      	str	r0, [sp, #136]	; 0x88
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034c2:	a921      	add	r1, sp, #132	; 0x84
 80034c4:	4628      	mov	r0, r5
 80034c6:	f004 f811 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 80034ca:	b100      	cbz	r0, 80034ce <main+0x216>
 80034cc:	e7fe      	b.n	80034cc <main+0x214>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ce:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034d0:	9025      	str	r0, [sp, #148]	; 0x94
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034d2:	9027      	str	r0, [sp, #156]	; 0x9c
	sConfigOC.Pulse = 500;
 80034d4:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034d8:	2208      	movs	r2, #8
 80034da:	a923      	add	r1, sp, #140	; 0x8c
 80034dc:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034de:	9323      	str	r3, [sp, #140]	; 0x8c
	sConfigOC.Pulse = 500;
 80034e0:	9624      	str	r6, [sp, #144]	; 0x90
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034e2:	f003 ff49 	bl	8007378 <HAL_TIM_PWM_ConfigChannel>
 80034e6:	4607      	mov	r7, r0
 80034e8:	b1f0      	cbz	r0, 8003528 <main+0x270>
 80034ea:	e7fe      	b.n	80034ea <main+0x232>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	10110000 	.word	0x10110000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020000 	.word	0x40020000
 80034fc:	10210000 	.word	0x10210000
 8003500:	200047a0 	.word	0x200047a0
 8003504:	40012000 	.word	0x40012000
 8003508:	0f000001 	.word	0x0f000001
 800350c:	2000c8b0 	.word	0x2000c8b0
 8003510:	40006400 	.word	0x40006400
 8003514:	200041fc 	.word	0x200041fc
 8003518:	40005400 	.word	0x40005400
 800351c:	20004670 	.word	0x20004670
 8003520:	40000400 	.word	0x40000400
 8003524:	00061a80 	.word	0x00061a80
	HAL_TIM_MspPostInit(&htim3);
 8003528:	4628      	mov	r0, r5
 800352a:	f001 f8df 	bl	80046ec <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800352e:	2108      	movs	r1, #8
 8003530:	4628      	mov	r0, r5
 8003532:	f003 ff8f 	bl	8007454 <HAL_TIM_PWM_Start>
	BMP280_Init();
 8003536:	f7fd fb33 	bl	8000ba0 <BMP280_Init>
	MPU9250_Init();
 800353a:	f7fd fd65 	bl	8001008 <MPU9250_Init>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800353e:	2108      	movs	r1, #8
 8003540:	4628      	mov	r0, r5
 8003542:	f003 ffa1 	bl	8007488 <HAL_TIM_PWM_Stop>
	setRPM = 60;
 8003546:	495e      	ldr	r1, [pc, #376]	; (80036c0 <main+0x408>)
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <main+0x40c>)
	htim6.Instance = TIM6;
 800354a:	4d5f      	ldr	r5, [pc, #380]	; (80036c8 <main+0x410>)
	setRoll = 0;
 800354c:	ed9f cb54 	vldr	d12, [pc, #336]	; 80036a0 <main+0x3e8>
	setRPM = 60;
 8003550:	2000      	movs	r0, #0
 8003552:	e9c3 0100 	strd	r0, r1, [r3]
	setRoll = 0;
 8003556:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <main+0x414>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003558:	60af      	str	r7, [r5, #8]
	setRoll = 0;
 800355a:	ed83 cb00 	vstr	d12, [r3]
	setPitch = 0;
 800355e:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <main+0x418>)
	htim6.Init.Period = 500;
 8003560:	60ee      	str	r6, [r5, #12]
	setPitch = 0;
 8003562:	ed83 cb00 	vstr	d12, [r3]
	setYaw = 0;
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <main+0x41c>)
 8003568:	ed83 cb00 	vstr	d12, [r3]
	dataToSendByCAN = RESET;
 800356c:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <main+0x420>)
 800356e:	701f      	strb	r7, [r3, #0]
	canTransmitCounter = 0;
 8003570:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <main+0x424>)
 8003572:	701f      	strb	r7, [r3, #0]
	motorStart = 0;
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <main+0x428>)
 8003576:	701f      	strb	r7, [r3, #0]
	motorStop = 0;
 8003578:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <main+0x42c>)
	maxOutputLimit = 150;
 800357a:	a14b      	add	r1, pc, #300	; (adr r1, 80036a8 <main+0x3f0>)
 800357c:	e9d1 0100 	ldrd	r0, r1, [r1]
	motorStop = 0;
 8003580:	701f      	strb	r7, [r3, #0]
	maxOutputLimit = 150;
 8003582:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <main+0x430>)
 8003584:	e9c3 0100 	strd	r0, r1, [r3]
	trimmValueRoll = -6.6;
 8003588:	a149      	add	r1, pc, #292	; (adr r1, 80036b0 <main+0x3f8>)
 800358a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800358e:	4b57      	ldr	r3, [pc, #348]	; (80036ec <main+0x434>)
 8003590:	e9c3 0100 	strd	r0, r1, [r3]
	trimmValuePitch = 4.6;
 8003594:	a148      	add	r1, pc, #288	; (adr r1, 80036b8 <main+0x400>)
 8003596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800359a:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <main+0x438>)
 800359c:	e9c3 0100 	strd	r0, r1, [r3]
	trimmValueYaw = 0;
 80035a0:	4b54      	ldr	r3, [pc, #336]	; (80036f4 <main+0x43c>)
 80035a2:	ed83 cb00 	vstr	d12, [r3]
	htim6.Init.Prescaler = 16800;
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <main+0x440>)
 80035a8:	f244 1ca0 	movw	ip, #16800	; 0x41a0
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035ac:	4628      	mov	r0, r5
	htim6.Init.Prescaler = 16800;
 80035ae:	e885 1008 	stmia.w	r5, {r3, ip}
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035b2:	f003 fe7d 	bl	80072b0 <HAL_TIM_Base_Init>
 80035b6:	b100      	cbz	r0, 80035ba <main+0x302>
 80035b8:	e7fe      	b.n	80035b8 <main+0x300>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ba:	9023      	str	r0, [sp, #140]	; 0x8c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035bc:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035be:	a923      	add	r1, sp, #140	; 0x8c
 80035c0:	4628      	mov	r0, r5
 80035c2:	f003 ff93 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 80035c6:	4606      	mov	r6, r0
 80035c8:	b100      	cbz	r0, 80035cc <main+0x314>
 80035ca:	e7fe      	b.n	80035ca <main+0x312>
	HAL_TIM_Base_Start_IT(&htim6); //start timer 6 to send periodically data to the flight controller
 80035cc:	4628      	mov	r0, r5
 80035ce:	f003 fd58 	bl	8007082 <HAL_TIM_Base_Start_IT>
	htim7.Instance = TIM7;
 80035d2:	484a      	ldr	r0, [pc, #296]	; (80036fc <main+0x444>)
	htim7.Init.Prescaler = 136;
 80035d4:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <main+0x448>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d6:	6086      	str	r6, [r0, #8]
	htim7.Init.Prescaler = 136;
 80035d8:	f04f 0e88 	mov.w	lr, #136	; 0x88
 80035dc:	e880 4008 	stmia.w	r0, {r3, lr}
	htim7.Init.Period = 10000;
 80035e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80035e4:	60c3      	str	r3, [r0, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035e6:	f003 fe63 	bl	80072b0 <HAL_TIM_Base_Init>
 80035ea:	b100      	cbz	r0, 80035ee <main+0x336>
 80035ec:	e7fe      	b.n	80035ec <main+0x334>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035f0:	a923      	add	r1, sp, #140	; 0x8c
 80035f2:	4842      	ldr	r0, [pc, #264]	; (80036fc <main+0x444>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f4:	9323      	str	r3, [sp, #140]	; 0x8c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f6:	9324      	str	r3, [sp, #144]	; 0x90
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035f8:	f003 ff78 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 80035fc:	4605      	mov	r5, r0
 80035fe:	b100      	cbz	r0, 8003602 <main+0x34a>
 8003600:	e7fe      	b.n	8003600 <main+0x348>
	HAL_TIM_Base_Start(&htim7); //start timer 7 to count the pulse width of the remote receiver channels (exti 1-6)
 8003602:	483e      	ldr	r0, [pc, #248]	; (80036fc <main+0x444>)
	huart4.Instance = UART4;
 8003604:	4e3f      	ldr	r6, [pc, #252]	; (8003704 <main+0x44c>)
	HAL_TIM_Base_Start(&htim7); //start timer 7 to count the pulse width of the remote receiver channels (exti 1-6)
 8003606:	f003 fd2f 	bl	8007068 <HAL_TIM_Base_Start>
	HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800360a:	462a      	mov	r2, r5
 800360c:	2105      	movs	r1, #5
 800360e:	2034      	movs	r0, #52	; 0x34
 8003610:	f001 fe78 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003614:	2034      	movs	r0, #52	; 0x34
 8003616:	f001 fea9 	bl	800536c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800361a:	462a      	mov	r2, r5
 800361c:	2105      	movs	r1, #5
 800361e:	2035      	movs	r0, #53	; 0x35
 8003620:	f001 fe70 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003624:	2035      	movs	r0, #53	; 0x35
 8003626:	f001 fea1 	bl	800536c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800362a:	462a      	mov	r2, r5
 800362c:	4629      	mov	r1, r5
 800362e:	200f      	movs	r0, #15
 8003630:	f001 fe68 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003634:	200f      	movs	r0, #15
 8003636:	f001 fe99 	bl	800536c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800363a:	462a      	mov	r2, r5
 800363c:	2102      	movs	r1, #2
 800363e:	2012      	movs	r0, #18
 8003640:	f001 fe60 	bl	8005304 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003644:	2012      	movs	r0, #18
 8003646:	f001 fe91 	bl	800536c <HAL_NVIC_EnableIRQ>
	doCalibrationSensoroutput = 0;  //start up with no calibration, use defaults
 800364a:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <main+0x450>)
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800364c:	60b5      	str	r5, [r6, #8]
	doCalibrationSensoroutput = 0;  //start up with no calibration, use defaults
 800364e:	801d      	strh	r5, [r3, #0]
	doCalibrationMagnetometer = 0; //start up with no calibration, use defaults
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <main+0x454>)
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003652:	60f5      	str	r5, [r6, #12]
	doCalibrationMagnetometer = 0; //start up with no calibration, use defaults
 8003654:	801d      	strh	r5, [r3, #0]
	huart4.Init.BaudRate = 57600;
 8003656:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <main+0x458>)
	huart4.Init.Parity = UART_PARITY_NONE;
 8003658:	6135      	str	r5, [r6, #16]
	huart4.Init.BaudRate = 57600;
 800365a:	f44f 4761 	mov.w	r7, #57600	; 0xe100
 800365e:	e886 0088 	stmia.w	r6, {r3, r7}
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8003662:	4630      	mov	r0, r6
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003664:	230c      	movs	r3, #12
 8003666:	6173      	str	r3, [r6, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003668:	61b5      	str	r5, [r6, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800366a:	61f5      	str	r5, [r6, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800366c:	f004 f88a 	bl	8007784 <HAL_UART_Init>
 8003670:	b998      	cbnz	r0, 800369a <main+0x3e2>
	while (HAL_UART_Receive_IT(&huart4, receiveBuffer, UARTRECEIVEDBUFFERSIZE) != HAL_OK); //get ready to receive instructions from the flight monitor system (through RS232 telemetry system)
 8003672:	4d28      	ldr	r5, [pc, #160]	; (8003714 <main+0x45c>)
 8003674:	2208      	movs	r2, #8
 8003676:	4629      	mov	r1, r5
 8003678:	4630      	mov	r0, r6
 800367a:	f004 f8b1 	bl	80077e0 <HAL_UART_Receive_IT>
 800367e:	2800      	cmp	r0, #0
 8003680:	d1f8      	bne.n	8003674 <main+0x3bc>
	hiwdg.Instance = IWDG;
 8003682:	4d25      	ldr	r5, [pc, #148]	; (8003718 <main+0x460>)
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <main+0x464>)
 8003686:	602b      	str	r3, [r5, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003688:	6068      	str	r0, [r5, #4]
	hiwdg.Init.Reload = 150;
 800368a:	2396      	movs	r3, #150	; 0x96
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800368c:	4628      	mov	r0, r5
	hiwdg.Init.Reload = 150;
 800368e:	60ab      	str	r3, [r5, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003690:	f003 f985 	bl	800699e <HAL_IWDG_Init>
 8003694:	2800      	cmp	r0, #0
 8003696:	d043      	beq.n	8003720 <main+0x468>
 8003698:	e7fe      	b.n	8003698 <main+0x3e0>
 800369a:	e7fe      	b.n	800369a <main+0x3e2>
 800369c:	f3af 8000 	nop.w
	...
 80036ac:	4062c000 	.word	0x4062c000
 80036b0:	66666666 	.word	0x66666666
 80036b4:	c01a6666 	.word	0xc01a6666
 80036b8:	66666666 	.word	0x66666666
 80036bc:	40126666 	.word	0x40126666
 80036c0:	404e0000 	.word	0x404e0000
 80036c4:	20004798 	.word	0x20004798
 80036c8:	20008780 	.word	0x20008780
 80036cc:	20004638 	.word	0x20004638
 80036d0:	2000c928 	.word	0x2000c928
 80036d4:	200002f0 	.word	0x200002f0
 80036d8:	2000c998 	.word	0x2000c998
 80036dc:	20004800 	.word	0x20004800
 80036e0:	20008948 	.word	0x20008948
 80036e4:	200088b2 	.word	0x200088b2
 80036e8:	200041c0 	.word	0x200041c0
 80036ec:	200041d8 	.word	0x200041d8
 80036f0:	200086e8 	.word	0x200086e8
 80036f4:	20008738 	.word	0x20008738
 80036f8:	40001000 	.word	0x40001000
 80036fc:	2000c954 	.word	0x2000c954
 8003700:	40001400 	.word	0x40001400
 8003704:	20008908 	.word	0x20008908
 8003708:	20000000 	.word	0x20000000
 800370c:	2000008e 	.word	0x2000008e
 8003710:	40004c00 	.word	0x40004c00
 8003714:	2000c94b 	.word	0x2000c94b
 8003718:	20004254 	.word	0x20004254
 800371c:	40003000 	.word	0x40003000
	__HAL_IWDG_START(&hiwdg);
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003726:	601a      	str	r2, [r3, #0]
	__LOADCANWITHDEFAULT
 8003728:	4baf      	ldr	r3, [pc, #700]	; (80039e8 <main+0x730>)
 800372a:	6323      	str	r3, [r4, #48]	; 0x30
 800372c:	2223      	movs	r2, #35	; 0x23
 800372e:	751a      	strb	r2, [r3, #20]
 8003730:	2270      	movs	r2, #112	; 0x70
 8003732:	755a      	strb	r2, [r3, #21]
 8003734:	2277      	movs	r2, #119	; 0x77
 8003736:	759a      	strb	r2, [r3, #22]
 8003738:	226d      	movs	r2, #109	; 0x6d
 800373a:	75da      	strb	r2, [r3, #23]
 800373c:	2232      	movs	r2, #50	; 0x32
 800373e:	761a      	strb	r2, [r3, #24]
 8003740:	222f      	movs	r2, #47	; 0x2f
 8003742:	765a      	strb	r2, [r3, #25]
 8003744:	2208      	movs	r2, #8
 8003746:	6098      	str	r0, [r3, #8]
 8003748:	6058      	str	r0, [r3, #4]
 800374a:	60d8      	str	r0, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]
	clearPIDdata();
 800374e:	f7fe ff69 	bl	8002624 <clearPIDdata>
	setPIDFactors();
 8003752:	f7fd fde9 	bl	8001328 <setPIDFactors>
	setCalibrationValues();
 8003756:	f7fe ffe3 	bl	8002720 <setCalibrationValues>
	alpha = 0.98;  //set the default time constant of the complementary filter
 800375a:	a19d      	add	r1, pc, #628	; (adr r1, 80039d0 <main+0x718>)
 800375c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003760:	4ba2      	ldr	r3, [pc, #648]	; (80039ec <main+0x734>)
 8003762:	e9c3 0100 	strd	r0, r1, [r3]
	deltaT = 0.1; //set the integration time of the complementary filter
 8003766:	a19c      	add	r1, pc, #624	; (adr r1, 80039d8 <main+0x720>)
 8003768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800376c:	4ba0      	ldr	r3, [pc, #640]	; (80039f0 <main+0x738>)
 800376e:	e9c3 0100 	strd	r0, r1, [r3]
		if (readyToCalcEuler && startUpCounter < STARTUPCOUNTERSIZE)
 8003772:	49a0      	ldr	r1, [pc, #640]	; (80039f4 <main+0x73c>)
 8003774:	780b      	ldrb	r3, [r1, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 85a3 	beq.w	80042c2 <main+0x100a>
 800377c:	4b9e      	ldr	r3, [pc, #632]	; (80039f8 <main+0x740>)
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	b292      	uxth	r2, r2
 8003782:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8003786:	f080 859c 	bcs.w	80042c2 <main+0x100a>
			if (startUpCounter == 0)
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	b292      	uxth	r2, r2
 800378e:	b912      	cbnz	r2, 8003796 <main+0x4de>
				motorStop = SET;
 8003790:	4a9a      	ldr	r2, [pc, #616]	; (80039fc <main+0x744>)
 8003792:	2101      	movs	r1, #1
 8003794:	7011      	strb	r1, [r2, #0]
			if (startUpCounter == 1)
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b01      	cmp	r3, #1
				motorStop = RESET;
 800379c:	bf02      	ittt	eq
 800379e:	4b97      	ldreq	r3, [pc, #604]	; (80039fc <main+0x744>)
 80037a0:	2200      	moveq	r2, #0
 80037a2:	701a      	strbeq	r2, [r3, #0]
			startUpCounter++;
 80037a4:	4a94      	ldr	r2, [pc, #592]	; (80039f8 <main+0x740>)
 80037a6:	8813      	ldrh	r3, [r2, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
		Read_Futaba();
 80037ae:	f7ff fadf 	bl	8002d70 <Read_Futaba>
		if (readyToCalcEuler == SET)
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <main+0x73c>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f040 8551 	bne.w	800425e <main+0xfa6>
			HAL_IWDG_Refresh(&hiwdg);
 80037bc:	4890      	ldr	r0, [pc, #576]	; (8003a00 <main+0x748>)
			raxdCal = raxd - calibValRax;
 80037be:	4c91      	ldr	r4, [pc, #580]	; (8003a04 <main+0x74c>)
			raydCal = rayd - calibValRay;
 80037c0:	f8df b290 	ldr.w	fp, [pc, #656]	; 8003a54 <main+0x79c>
			razdCal = razd - calibValRaz;
 80037c4:	f8df a290 	ldr.w	sl, [pc, #656]	; 8003a58 <main+0x7a0>
			HAL_IWDG_Refresh(&hiwdg);
 80037c8:	f003 f90a 	bl	80069e0 <HAL_IWDG_Refresh>
			raxdCal = raxd - calibValRax;
 80037cc:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <main+0x750>)
 80037ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d2:	4b8e      	ldr	r3, [pc, #568]	; (8003a0c <main+0x754>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc fcfa 	bl	80001d0 <__aeabi_dsub>
 80037dc:	e9c4 0100 	strd	r0, r1, [r4]
			raydCal = rayd - calibValRay;
 80037e0:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <main+0x758>)
 80037e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037e6:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <main+0x75c>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f7fc fcf0 	bl	80001d0 <__aeabi_dsub>
 80037f0:	e9cb 0100 	strd	r0, r1, [fp]
			razdCal = razd - calibValRaz;
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <main+0x760>)
 80037f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <main+0x764>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fce6 	bl	80001d0 <__aeabi_dsub>
 8003804:	e9ca 0100 	strd	r0, r1, [sl]
			rgxdCal = rgxd - calibValRgx;
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <main+0x768>)
 800380a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <main+0x76c>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fcdc 	bl	80001d0 <__aeabi_dsub>
 8003818:	4b83      	ldr	r3, [pc, #524]	; (8003a28 <main+0x770>)
 800381a:	e9c3 0100 	strd	r0, r1, [r3]
			rgydCal = rgyd - calibValRgy;
 800381e:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <main+0x774>)
 8003820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003824:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <main+0x778>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fc fcd1 	bl	80001d0 <__aeabi_dsub>
 800382e:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <main+0x77c>)
 8003830:	e9c3 0100 	strd	r0, r1, [r3]
			rgzdCal = rgzd - calibValRgz;
 8003834:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <main+0x780>)
 8003836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383a:	4b80      	ldr	r3, [pc, #512]	; (8003a3c <main+0x784>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc fcc6 	bl	80001d0 <__aeabi_dsub>
 8003844:	4b7e      	ldr	r3, [pc, #504]	; (8003a40 <main+0x788>)
 8003846:	e9c3 0100 	strd	r0, r1, [r3]
			aRoll = atan2(raydCal, sqrt(raxdCal * raxdCal + razdCal * razdCal)) * 180 / M_PI;
 800384a:	ed9b 8b00 	vldr	d8, [fp]
 800384e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003852:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003856:	f7fc fe6f 	bl	8000538 <__aeabi_dmul>
 800385a:	e9da 6700 	ldrd	r6, r7, [sl]
 800385e:	e9da 8900 	ldrd	r8, r9, [sl]
 8003862:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8003866:	4642      	mov	r2, r8
 8003868:	464b      	mov	r3, r9
 800386a:	4630      	mov	r0, r6
 800386c:	4639      	mov	r1, r7
 800386e:	f7fc fe63 	bl	8000538 <__aeabi_dmul>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800387a:	f7fc fcab 	bl	80001d4 <__adddf3>
 800387e:	ec41 0b10 	vmov	d0, r0, r1
 8003882:	f004 fbc7 	bl	8008014 <sqrt>
 8003886:	eeb0 1a40 	vmov.f32	s2, s0
 800388a:	eef0 1a60 	vmov.f32	s3, s1
 800388e:	eeb0 0a48 	vmov.f32	s0, s16
 8003892:	eef0 0a68 	vmov.f32	s1, s17
 8003896:	f004 fa43 	bl	8007d20 <atan2>
 800389a:	2200      	movs	r2, #0
 800389c:	ec51 0b10 	vmov	r0, r1, d0
 80038a0:	4b68      	ldr	r3, [pc, #416]	; (8003a44 <main+0x78c>)
 80038a2:	f7fc fe49 	bl	8000538 <__aeabi_dmul>
 80038a6:	a34e      	add	r3, pc, #312	; (adr r3, 80039e0 <main+0x728>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc ff6e 	bl	800078c <__aeabi_ddiv>
 80038b0:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <main+0x790>)
 80038b2:	e9c3 0100 	strd	r0, r1, [r3]
			aPitch = -atan2(-raxdCal, sqrt(raydCal * raydCal + razdCal * razdCal)) * 180 / M_PI;
 80038b6:	e9d4 4500 	ldrd	r4, r5, [r4]
 80038ba:	e9db 0100 	ldrd	r0, r1, [fp]
 80038be:	e9db 2300 	ldrd	r2, r3, [fp]
 80038c2:	f7fc fe39 	bl	8000538 <__aeabi_dmul>
 80038c6:	e9da 6700 	ldrd	r6, r7, [sl]
 80038ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80038ce:	468b      	mov	fp, r1
 80038d0:	4682      	mov	sl, r0
 80038d2:	4642      	mov	r2, r8
 80038d4:	464b      	mov	r3, r9
 80038d6:	4630      	mov	r0, r6
 80038d8:	4639      	mov	r1, r7
 80038da:	f7fc fe2d 	bl	8000538 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4650      	mov	r0, sl
 80038e4:	4659      	mov	r1, fp
 80038e6:	f7fc fc75 	bl	80001d4 <__adddf3>
 80038ea:	ec41 0b10 	vmov	d0, r0, r1
 80038ee:	f004 fb91 	bl	8008014 <sqrt>
 80038f2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80038f6:	9406      	str	r4, [sp, #24]
 80038f8:	9307      	str	r3, [sp, #28]
 80038fa:	eeb0 1a40 	vmov.f32	s2, s0
 80038fe:	eef0 1a60 	vmov.f32	s3, s1
 8003902:	ed9d 0b06 	vldr	d0, [sp, #24]
 8003906:	f004 fa0b 	bl	8007d20 <atan2>
 800390a:	ec53 2b10 	vmov	r2, r3, d0
 800390e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003912:	ed8d 0a08 	vstr	s0, [sp, #32]
 8003916:	9309      	str	r3, [sp, #36]	; 0x24
 8003918:	2200      	movs	r2, #0
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <main+0x78c>)
 800391c:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8003a5c <main+0x7a4>
			roll = alpha * (rgydCal * deltaT + roll) + (1 - alpha) * aRoll;
 8003920:	4d33      	ldr	r5, [pc, #204]	; (80039f0 <main+0x738>)
 8003922:	4c32      	ldr	r4, [pc, #200]	; (80039ec <main+0x734>)
 8003924:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003a60 <main+0x7a8>
			aPitch = -atan2(-raxdCal, sqrt(raydCal * raydCal + razdCal * razdCal)) * 180 / M_PI;
 8003928:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800392c:	f7fc fe04 	bl	8000538 <__aeabi_dmul>
 8003930:	a32b      	add	r3, pc, #172	; (adr r3, 80039e0 <main+0x728>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc ff29 	bl	800078c <__aeabi_ddiv>
 800393a:	e9cb 0100 	strd	r0, r1, [fp]
			roll = alpha * (rgydCal * deltaT + roll) + (1 - alpha) * aRoll;
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <main+0x77c>)
 8003940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003944:	ed95 7b00 	vldr	d7, [r5]
 8003948:	e9da 8900 	ldrd	r8, r9, [sl]
 800394c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003950:	e9d4 6700 	ldrd	r6, r7, [r4]
 8003954:	ed94 7b00 	vldr	d7, [r4]
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <main+0x790>)
 800395a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800395e:	ed93 7b00 	vldr	d7, [r3]
 8003962:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003966:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800396a:	f7fc fde5 	bl	8000538 <__aeabi_dmul>
 800396e:	4642      	mov	r2, r8
 8003970:	464b      	mov	r3, r9
 8003972:	f7fc fc2f 	bl	80001d4 <__adddf3>
 8003976:	4632      	mov	r2, r6
 8003978:	463b      	mov	r3, r7
 800397a:	f7fc fddd 	bl	8000538 <__aeabi_dmul>
 800397e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003982:	4606      	mov	r6, r0
 8003984:	460f      	mov	r7, r1
 8003986:	2000      	movs	r0, #0
 8003988:	4930      	ldr	r1, [pc, #192]	; (8003a4c <main+0x794>)
 800398a:	f7fc fc21 	bl	80001d0 <__aeabi_dsub>
 800398e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003992:	f7fc fdd1 	bl	8000538 <__aeabi_dmul>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4630      	mov	r0, r6
 800399c:	4639      	mov	r1, r7
 800399e:	f7fc fc19 	bl	80001d4 <__adddf3>
 80039a2:	e9ca 0100 	strd	r0, r1, [sl]
			pitch = alpha * (rgxdCal * deltaT + pitch) + (1 - alpha) * aPitch;
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <main+0x770>)
 80039a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80039b0:	4d27      	ldr	r5, [pc, #156]	; (8003a50 <main+0x798>)
 80039b2:	e9d5 8900 	ldrd	r8, r9, [r5]
 80039b6:	e9d4 6700 	ldrd	r6, r7, [r4]
 80039ba:	ed94 7b00 	vldr	d7, [r4]
 80039be:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80039c2:	ed9b 7b00 	vldr	d7, [fp]
 80039c6:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 80039ca:	e04b      	b.n	8003a64 <main+0x7ac>
 80039cc:	f3af 8000 	nop.w
 80039d0:	f5c28f5c 	.word	0xf5c28f5c
 80039d4:	3fef5c28 	.word	0x3fef5c28
 80039d8:	9999999a 	.word	0x9999999a
 80039dc:	3fb99999 	.word	0x3fb99999
 80039e0:	54442d18 	.word	0x54442d18
 80039e4:	400921fb 	.word	0x400921fb
 80039e8:	20004818 	.word	0x20004818
 80039ec:	2000c9a0 	.word	0x2000c9a0
 80039f0:	200088a0 	.word	0x200088a0
 80039f4:	200086f8 	.word	0x200086f8
 80039f8:	20000092 	.word	0x20000092
 80039fc:	200088b2 	.word	0x200088b2
 8003a00:	20004254 	.word	0x20004254
 8003a04:	200041a0 	.word	0x200041a0
 8003a08:	20008750 	.word	0x20008750
 8003a0c:	20008758 	.word	0x20008758
 8003a10:	20008718 	.word	0x20008718
 8003a14:	200088f8 	.word	0x200088f8
 8003a18:	20008898 	.word	0x20008898
 8003a1c:	20008708 	.word	0x20008708
 8003a20:	20008950 	.word	0x20008950
 8003a24:	2000ca30 	.word	0x2000ca30
 8003a28:	2000c820 	.word	0x2000c820
 8003a2c:	200086f0 	.word	0x200086f0
 8003a30:	20004278 	.word	0x20004278
 8003a34:	200046b8 	.word	0x200046b8
 8003a38:	2000c900 	.word	0x2000c900
 8003a3c:	20004660 	.word	0x20004660
 8003a40:	200041e8 	.word	0x200041e8
 8003a44:	40668000 	.word	0x40668000
 8003a48:	200041d0 	.word	0x200041d0
 8003a4c:	3ff00000 	.word	0x3ff00000
 8003a50:	2000c838 	.word	0x2000c838
 8003a54:	200047f0 	.word	0x200047f0
 8003a58:	20008748 	.word	0x20008748
 8003a5c:	20004840 	.word	0x20004840
 8003a60:	2000c8a8 	.word	0x2000c8a8
 8003a64:	f7fc fd68 	bl	8000538 <__aeabi_dmul>
 8003a68:	4642      	mov	r2, r8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	f7fc fbb2 	bl	80001d4 <__adddf3>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fc fd60 	bl	8000538 <__aeabi_dmul>
 8003a78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	2000      	movs	r0, #0
 8003a82:	49bf      	ldr	r1, [pc, #764]	; (8003d80 <main+0xac8>)
			yawSample = atan2(rcyNorm * cos(aRoll / 180 * M_PI) - rczNorm * sin(aRoll / 180 * M_PI),
 8003a84:	4cbf      	ldr	r4, [pc, #764]	; (8003d84 <main+0xacc>)
			pitch = alpha * (rgxdCal * deltaT + pitch) + (1 - alpha) * aPitch;
 8003a86:	f7fc fba3 	bl	80001d0 <__aeabi_dsub>
 8003a8a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003a8e:	f7fc fd53 	bl	8000538 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4630      	mov	r0, r6
 8003a98:	4639      	mov	r1, r7
 8003a9a:	f7fc fb9b 	bl	80001d4 <__adddf3>
 8003a9e:	e9c5 0100 	strd	r0, r1, [r5]
			yawSample = atan2(rcyNorm * cos(aRoll / 180 * M_PI) - rczNorm * sin(aRoll / 180 * M_PI),
 8003aa2:	49b9      	ldr	r1, [pc, #740]	; (8003d88 <main+0xad0>)
 8003aa4:	4bb9      	ldr	r3, [pc, #740]	; (8003d8c <main+0xad4>)
 8003aa6:	4eba      	ldr	r6, [pc, #744]	; (8003d90 <main+0xad8>)
 8003aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f7fc fe6d 	bl	800078c <__aeabi_ddiv>
 8003ab2:	a3b1      	add	r3, pc, #708	; (adr r3, 8003d78 <main+0xac0>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fd3e 	bl	8000538 <__aeabi_dmul>
 8003abc:	ec41 0b10 	vmov	d0, r0, r1
 8003ac0:	f004 f8a2 	bl	8007c08 <cos>
 8003ac4:	ed94 7b00 	vldr	d7, [r4]
 8003ac8:	eeb0 9a40 	vmov.f32	s18, s0
 8003acc:	eef0 9a60 	vmov.f32	s19, s1
 8003ad0:	49ad      	ldr	r1, [pc, #692]	; (8003d88 <main+0xad0>)
 8003ad2:	4bae      	ldr	r3, [pc, #696]	; (8003d8c <main+0xad4>)
 8003ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003ade:	f7fc fe55 	bl	800078c <__aeabi_ddiv>
 8003ae2:	a3a5      	add	r3, pc, #660	; (adr r3, 8003d78 <main+0xac0>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fd26 	bl	8000538 <__aeabi_dmul>
 8003aec:	ec41 0b10 	vmov	d0, r0, r1
 8003af0:	f004 f8ce 	bl	8007c90 <sin>
 8003af4:	ed96 7b00 	vldr	d7, [r6]
 8003af8:	eeb0 8a40 	vmov.f32	s16, s0
 8003afc:	eef0 8a60 	vmov.f32	s17, s1
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003b00:	4ba4      	ldr	r3, [pc, #656]	; (8003d94 <main+0xadc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b08:	e9db 0100 	ldrd	r0, r1, [fp]
 8003b0c:	4b9f      	ldr	r3, [pc, #636]	; (8003d8c <main+0xad4>)
			yawSample = atan2(rcyNorm * cos(aRoll / 180 * M_PI) - rczNorm * sin(aRoll / 180 * M_PI),
 8003b0e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003b12:	f7fc fe3b 	bl	800078c <__aeabi_ddiv>
 8003b16:	a398      	add	r3, pc, #608	; (adr r3, 8003d78 <main+0xac0>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fd0c 	bl	8000538 <__aeabi_dmul>
 8003b20:	ec41 0b10 	vmov	d0, r0, r1
 8003b24:	f004 f870 	bl	8007c08 <cos>
							+ rcyNorm * sin(aPitch / 180 * M_PI) * sin(aRoll / 180 * M_PI - rczNorm * sin(aPitch / 180 * M_PI) * cos(aRoll / 180 * M_PI)));
 8003b28:	e9db 0100 	ldrd	r0, r1, [fp]
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003b2c:	eeb0 ba40 	vmov.f32	s22, s0
 8003b30:	eef0 ba60 	vmov.f32	s23, s1
							+ rcyNorm * sin(aPitch / 180 * M_PI) * sin(aRoll / 180 * M_PI - rczNorm * sin(aPitch / 180 * M_PI) * cos(aRoll / 180 * M_PI)));
 8003b34:	2200      	movs	r2, #0
 8003b36:	4b95      	ldr	r3, [pc, #596]	; (8003d8c <main+0xad4>)
 8003b38:	f7fc fe28 	bl	800078c <__aeabi_ddiv>
 8003b3c:	a38e      	add	r3, pc, #568	; (adr r3, 8003d78 <main+0xac0>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fcf9 	bl	8000538 <__aeabi_dmul>
 8003b46:	ec41 0b10 	vmov	d0, r0, r1
 8003b4a:	f004 f8a1 	bl	8007c90 <sin>
 8003b4e:	ed94 7b00 	vldr	d7, [r4]
 8003b52:	eeb0 aa40 	vmov.f32	s20, s0
 8003b56:	eef0 aa60 	vmov.f32	s21, s1
 8003b5a:	4b8b      	ldr	r3, [pc, #556]	; (8003d88 <main+0xad0>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b62:	e9db 0100 	ldrd	r0, r1, [fp]
 8003b66:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <main+0xad4>)
 8003b68:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003b6c:	f7fc fe0e 	bl	800078c <__aeabi_ddiv>
 8003b70:	a381      	add	r3, pc, #516	; (adr r3, 8003d78 <main+0xac0>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f7fc fcdf 	bl	8000538 <__aeabi_dmul>
 8003b7a:	ec41 0b10 	vmov	d0, r0, r1
 8003b7e:	f004 f887 	bl	8007c90 <sin>
 8003b82:	4981      	ldr	r1, [pc, #516]	; (8003d88 <main+0xad0>)
 8003b84:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <main+0xad4>)
 8003b86:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b90:	ec5b ab10 	vmov	sl, fp, d0
 8003b94:	f7fc fdfa 	bl	800078c <__aeabi_ddiv>
 8003b98:	a377      	add	r3, pc, #476	; (adr r3, 8003d78 <main+0xac0>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f7fc fccb 	bl	8000538 <__aeabi_dmul>
 8003ba2:	ec41 0b10 	vmov	d0, r0, r1
 8003ba6:	f004 f82f 	bl	8007c08 <cos>
 8003baa:	2200      	movs	r2, #0
 8003bac:	4b77      	ldr	r3, [pc, #476]	; (8003d8c <main+0xad4>)
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	ed8d 0b1a 	vstr	d0, [sp, #104]	; 0x68
 8003bb6:	f7fc fde9 	bl	800078c <__aeabi_ddiv>
 8003bba:	a36f      	add	r3, pc, #444	; (adr r3, 8003d78 <main+0xac0>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f7fc fcba 	bl	8000538 <__aeabi_dmul>
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	463b      	mov	r3, r7
 8003bcc:	4650      	mov	r0, sl
 8003bce:	4659      	mov	r1, fp
 8003bd0:	f7fc fcb2 	bl	8000538 <__aeabi_dmul>
 8003bd4:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
 8003bd8:	ec53 2b10 	vmov	r2, r3, d0
 8003bdc:	f7fc fcac 	bl	8000538 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc faf2 	bl	80001d0 <__aeabi_dsub>
 8003bec:	ec41 0b10 	vmov	d0, r0, r1
 8003bf0:	f004 f84e 	bl	8007c90 <sin>
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003bf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bfa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003bfe:	ec53 2b1b 	vmov	r2, r3, d11
 8003c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
							+ rcyNorm * sin(aPitch / 180 * M_PI) * sin(aRoll / 180 * M_PI - rczNorm * sin(aPitch / 180 * M_PI) * cos(aRoll / 180 * M_PI)));
 8003c06:	ed8d 0b1a 	vstr	d0, [sp, #104]	; 0x68
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003c0a:	f7fc fc95 	bl	8000538 <__aeabi_dmul>
							+ rcyNorm * sin(aPitch / 180 * M_PI) * sin(aRoll / 180 * M_PI - rczNorm * sin(aPitch / 180 * M_PI) * cos(aRoll / 180 * M_PI)));
 8003c0e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
					-rcxNorm * cos(aPitch / 180 * M_PI)
 8003c12:	4604      	mov	r4, r0
 8003c14:	460d      	mov	r5, r1
							+ rcyNorm * sin(aPitch / 180 * M_PI) * sin(aRoll / 180 * M_PI - rczNorm * sin(aPitch / 180 * M_PI) * cos(aRoll / 180 * M_PI)));
 8003c16:	ec51 0b1a 	vmov	r0, r1, d10
 8003c1a:	f7fc fc8d 	bl	8000538 <__aeabi_dmul>
 8003c1e:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
 8003c22:	ec53 2b10 	vmov	r2, r3, d0
 8003c26:	f7fc fc87 	bl	8000538 <__aeabi_dmul>
			yawSample = atan2(rcyNorm * cos(aRoll / 180 * M_PI) - rczNorm * sin(aRoll / 180 * M_PI),
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7fc facf 	bl	80001d4 <__adddf3>
 8003c36:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003c3a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003c3e:	ec51 0b19 	vmov	r0, r1, d9
 8003c42:	f7fc fc79 	bl	8000538 <__aeabi_dmul>
 8003c46:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	ec51 0b18 	vmov	r0, r1, d8
 8003c52:	f7fc fc71 	bl	8000538 <__aeabi_dmul>
 8003c56:	460b      	mov	r3, r1
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fc fab7 	bl	80001d0 <__aeabi_dsub>
 8003c62:	ed9d 1b18 	vldr	d1, [sp, #96]	; 0x60
 8003c66:	ec41 0b10 	vmov	d0, r0, r1
 8003c6a:	f004 f859 	bl	8007d20 <atan2>
 8003c6e:	4d4a      	ldr	r5, [pc, #296]	; (8003d98 <main+0xae0>)
			if (yawAverageCounter < 50)
 8003c70:	4c4a      	ldr	r4, [pc, #296]	; (8003d9c <main+0xae4>)
 8003c72:	4e4b      	ldr	r6, [pc, #300]	; (8003da0 <main+0xae8>)
			yawSample = atan2(rcyNorm * cos(aRoll / 180 * M_PI) - rczNorm * sin(aRoll / 180 * M_PI),
 8003c74:	ed85 0b00 	vstr	d0, [r5]
			if (yawAverageCounter < 50)
 8003c78:	7823      	ldrb	r3, [r4, #0]
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	2b31      	cmp	r3, #49	; 0x31
 8003c7e:	f300 839d 	bgt.w	80043bc <main+0x1104>
				yawSummX += cos(yawSample);
 8003c82:	ed95 0b00 	vldr	d0, [r5]
 8003c86:	f003 ffbf 	bl	8007c08 <cos>
 8003c8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c8e:	ec51 0b10 	vmov	r0, r1, d0
 8003c92:	f7fc fa9f 	bl	80001d4 <__adddf3>
 8003c96:	e9c6 0100 	strd	r0, r1, [r6]
				yawSummY += sin(yawSample);
 8003c9a:	ed95 0b00 	vldr	d0, [r5]
 8003c9e:	f003 fff7 	bl	8007c90 <sin>
 8003ca2:	4d40      	ldr	r5, [pc, #256]	; (8003da4 <main+0xaec>)
 8003ca4:	ec51 0b10 	vmov	r0, r1, d0
 8003ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cac:	f7fc fa92 	bl	80001d4 <__adddf3>
 8003cb0:	e9c5 0100 	strd	r0, r1, [r5]
				yawAverageCounter++;
 8003cb4:	7823      	ldrb	r3, [r4, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	7023      	strb	r3, [r4, #0]
			yaw = alpha * (rgzdCal * deltaT + yaw) + (1 - alpha) * aYaw;
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <main+0xaf0>)
 8003cbe:	f8df e104 	ldr.w	lr, [pc, #260]	; 8003dc4 <main+0xb0c>
 8003cc2:	f8df a104 	ldr.w	sl, [pc, #260]	; 8003dc8 <main+0xb10>
 8003cc6:	4c39      	ldr	r4, [pc, #228]	; (8003dac <main+0xaf4>)
 8003cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <main+0xaf8>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cd6:	e9d4 6700 	ldrd	r6, r7, [r4]
 8003cda:	e9d4 4500 	ldrd	r4, r5, [r4]
 8003cde:	ed9e 7b00 	vldr	d7, [lr]
 8003ce2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003ce6:	f7fc fc27 	bl	8000538 <__aeabi_dmul>
 8003cea:	4642      	mov	r2, r8
 8003cec:	464b      	mov	r3, r9
 8003cee:	f7fc fa71 	bl	80001d4 <__adddf3>
 8003cf2:	4632      	mov	r2, r6
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	f7fc fc1f 	bl	8000538 <__aeabi_dmul>
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	460f      	mov	r7, r1
 8003d00:	462b      	mov	r3, r5
 8003d02:	2000      	movs	r0, #0
 8003d04:	491e      	ldr	r1, [pc, #120]	; (8003d80 <main+0xac8>)
 8003d06:	f7fc fa63 	bl	80001d0 <__aeabi_dsub>
 8003d0a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003d0e:	f7fc fc13 	bl	8000538 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4630      	mov	r0, r6
 8003d18:	4639      	mov	r1, r7
 8003d1a:	f7fc fa5b 	bl	80001d4 <__adddf3>
 8003d1e:	e9ca 0100 	strd	r0, r1, [sl]
			if ((doCalibrationSensoroutput > 0) && (doCalibrationSensoroutput < 2001))
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <main+0xafc>)
 8003d24:	8813      	ldrh	r3, [r2, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	b133      	cbz	r3, 8003d38 <main+0xa80>
 8003d2a:	8813      	ldrh	r3, [r2, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d32:	d801      	bhi.n	8003d38 <main+0xa80>
				calibrateMPU9250AccelerometerAndGyro();
 8003d34:	f7fe fd60 	bl	80027f8 <calibrateMPU9250AccelerometerAndGyro>
			if ((doCalibrationMagnetometer > 0) && (doCalibrationMagnetometer < 2001))
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <main+0xb00>)
 8003d3a:	8813      	ldrh	r3, [r2, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b133      	cbz	r3, 8003d4e <main+0xa96>
 8003d40:	8813      	ldrh	r3, [r2, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d48:	d801      	bhi.n	8003d4e <main+0xa96>
				calibrateMPU9250Magnetometer();
 8003d4a:	f7fe fe3d 	bl	80029c8 <calibrateMPU9250Magnetometer>
			if (outputP[10] > maxOutputLimit)
 8003d4e:	4c1b      	ldr	r4, [pc, #108]	; (8003dbc <main+0xb04>)
 8003d50:	4d1b      	ldr	r5, [pc, #108]	; (8003dc0 <main+0xb08>)
			ComputePIDRoll();
 8003d52:	f7fd fb69 	bl	8001428 <ComputePIDRoll>
			ComputePIDPitch();
 8003d56:	f7fd fc53 	bl	8001600 <ComputePIDPitch>
			ComputePIDYaw();
 8003d5a:	f7fd fd3d 	bl	80017d8 <ComputePIDYaw>
			if (outputP[10] > maxOutputLimit)
 8003d5e:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003d62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d66:	f7fc fe77 	bl	8000a58 <__aeabi_dcmpgt>
 8003d6a:	b378      	cbz	r0, 8003dcc <main+0xb14>
				outputP[10] = maxOutputLimit;
 8003d6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d70:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8003d74:	e02a      	b.n	8003dcc <main+0xb14>
 8003d76:	bf00      	nop
 8003d78:	54442d18 	.word	0x54442d18
 8003d7c:	400921fb 	.word	0x400921fb
 8003d80:	3ff00000 	.word	0x3ff00000
 8003d84:	20004748 	.word	0x20004748
 8003d88:	200041d0 	.word	0x200041d0
 8003d8c:	40668000 	.word	0x40668000
 8003d90:	200047f8 	.word	0x200047f8
 8003d94:	20004198 	.word	0x20004198
 8003d98:	20004838 	.word	0x20004838
 8003d9c:	200041b8 	.word	0x200041b8
 8003da0:	200087d0 	.word	0x200087d0
 8003da4:	20004260 	.word	0x20004260
 8003da8:	200041e8 	.word	0x200041e8
 8003dac:	2000c9a0 	.word	0x2000c9a0
 8003db0:	200088a0 	.word	0x200088a0
 8003db4:	20000000 	.word	0x20000000
 8003db8:	2000008e 	.word	0x2000008e
 8003dbc:	200000d0 	.word	0x200000d0
 8003dc0:	200041c0 	.word	0x200041c0
 8003dc4:	20008778 	.word	0x20008778
 8003dc8:	2000c7f8 	.word	0x2000c7f8
			if (outputP[10] < -maxOutputLimit)
 8003dcc:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	920c      	str	r2, [sp, #48]	; 0x30
 8003dda:	930d      	str	r3, [sp, #52]	; 0x34
 8003ddc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003de0:	f7fc fe1c 	bl	8000a1c <__aeabi_dcmplt>
 8003de4:	b148      	cbz	r0, 8003dfa <main+0xb42>
				outputP[10] = -maxOutputLimit;
 8003de6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	9200      	str	r2, [sp, #0]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	ed9d 7b00 	vldr	d7, [sp]
 8003df6:	ed84 7b14 	vstr	d7, [r4, #80]	; 0x50
			if (outputR[10] > maxOutputLimit)
 8003dfa:	4cad      	ldr	r4, [pc, #692]	; (80040b0 <main+0xdf8>)
 8003dfc:	4dad      	ldr	r5, [pc, #692]	; (80040b4 <main+0xdfc>)
 8003dfe:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e06:	f7fc fe27 	bl	8000a58 <__aeabi_dcmpgt>
 8003e0a:	b118      	cbz	r0, 8003e14 <main+0xb5c>
				outputR[10] = maxOutputLimit;
 8003e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e10:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
			if (outputR[10] < -maxOutputLimit)
 8003e14:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003e18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	920e      	str	r2, [sp, #56]	; 0x38
 8003e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003e28:	f7fc fdf8 	bl	8000a1c <__aeabi_dcmplt>
 8003e2c:	b148      	cbz	r0, 8003e42 <main+0xb8a>
				outputR[10] = -maxOutputLimit;
 8003e2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	9202      	str	r2, [sp, #8]
 8003e38:	9303      	str	r3, [sp, #12]
 8003e3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e3e:	ed84 7b14 	vstr	d7, [r4, #80]	; 0x50
			if (outputY[10] > maxOutputLimit)
 8003e42:	4c9d      	ldr	r4, [pc, #628]	; (80040b8 <main+0xe00>)
 8003e44:	4d9b      	ldr	r5, [pc, #620]	; (80040b4 <main+0xdfc>)
 8003e46:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003e4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e4e:	f7fc fe03 	bl	8000a58 <__aeabi_dcmpgt>
 8003e52:	b118      	cbz	r0, 8003e5c <main+0xba4>
				outputY[10] = maxOutputLimit;
 8003e54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e58:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
			if (outputY[10] < -maxOutputLimit)
 8003e5c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8003e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e68:	9210      	str	r2, [sp, #64]	; 0x40
 8003e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8003e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e70:	f7fc fdd4 	bl	8000a1c <__aeabi_dcmplt>
 8003e74:	b148      	cbz	r0, 8003e8a <main+0xbd2>
				outputY[10] = -maxOutputLimit;
 8003e76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e7e:	9204      	str	r2, [sp, #16]
 8003e80:	9305      	str	r3, [sp, #20]
 8003e82:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003e86:	ed84 7b14 	vstr	d7, [r4, #80]	; 0x50
			rpm_0231 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (-outputR[10] + outputP[10] - outputY[10]))));
 8003e8a:	4d8c      	ldr	r5, [pc, #560]	; (80040bc <main+0xe04>)
 8003e8c:	4c8c      	ldr	r4, [pc, #560]	; (80040c0 <main+0xe08>)
 8003e8e:	4b8d      	ldr	r3, [pc, #564]	; (80040c4 <main+0xe0c>)
 8003e90:	f8df e254 	ldr.w	lr, [pc, #596]	; 80040e8 <main+0xe30>
 8003e94:	4e88      	ldr	r6, [pc, #544]	; (80040b8 <main+0xe00>)
 8003e96:	ed95 7b00 	vldr	d7, [r5]
 8003e9a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003e9e:	ed94 7b00 	vldr	d7, [r4]
 8003ea2:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003ea6:	ed93 7b00 	vldr	d7, [r3]
 8003eaa:	4b87      	ldr	r3, [pc, #540]	; (80040c8 <main+0xe10>)
 8003eac:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003eb0:	4b86      	ldr	r3, [pc, #536]	; (80040cc <main+0xe14>)
 8003eb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003eb6:	4b86      	ldr	r3, [pc, #536]	; (80040d0 <main+0xe18>)
 8003eb8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003ebc:	4b7c      	ldr	r3, [pc, #496]	; (80040b0 <main+0xdf8>)
 8003ebe:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003ec2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003ec6:	e9d6 6714 	ldrd	r6, r7, [r6, #80]	; 0x50
 8003eca:	ed9e 7b00 	vldr	d7, [lr]
 8003ece:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8003ed2:	f7fc f97d 	bl	80001d0 <__aeabi_dsub>
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	463b      	mov	r3, r7
 8003eda:	f7fc f979 	bl	80001d0 <__aeabi_dsub>
 8003ede:	4642      	mov	r2, r8
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	460f      	mov	r7, r1
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	4659      	mov	r1, fp
 8003eea:	f7fc fb25 	bl	8000538 <__aeabi_dmul>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	f7fc fb1f 	bl	8000538 <__aeabi_dmul>
 8003efa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003efe:	4606      	mov	r6, r0
 8003f00:	460f      	mov	r7, r1
 8003f02:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003f06:	f7fc fb17 	bl	8000538 <__aeabi_dmul>
 8003f0a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003f0e:	f7fc fb13 	bl	8000538 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4630      	mov	r0, r6
 8003f18:	4639      	mov	r1, r7
 8003f1a:	f7fc f95b 	bl	80001d4 <__adddf3>
 8003f1e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8003f22:	f7fc fb09 	bl	8000538 <__aeabi_dmul>
 8003f26:	f7fc fddf 	bl	8000ae8 <__aeabi_d2uiz>
 8003f2a:	4b6a      	ldr	r3, [pc, #424]	; (80040d4 <main+0xe1c>)
			myTxMessage.Data[6] = (uint8_t) rpm_0231; 			//low byte
 8003f2c:	4e6a      	ldr	r6, [pc, #424]	; (80040d8 <main+0xe20>)
			myCANTxMessage[0] = myTxMessage;					//what is this??
 8003f2e:	4f6b      	ldr	r7, [pc, #428]	; (80040dc <main+0xe24>)
			rpm_0231 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (-outputR[10] + outputP[10] - outputY[10]))));
 8003f30:	b280      	uxth	r0, r0
 8003f32:	8018      	strh	r0, [r3, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0231; 			//low byte
 8003f34:	881a      	ldrh	r2, [r3, #0]
			myTxMessage.Data[7] = (uint8_t)(rpm_0231 >> 8); 	//high byte
 8003f36:	881b      	ldrh	r3, [r3, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0231; 			//low byte
 8003f38:	76b2      	strb	r2, [r6, #26]
			myTxMessage.Data[7] = (uint8_t)(rpm_0231 >> 8); 	//high byte
 8003f3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003f3e:	76f3      	strb	r3, [r6, #27]
			myTxMessage.StdId = 0x231;
 8003f40:	f240 2331 	movw	r3, #561	; 0x231
 8003f44:	6033      	str	r3, [r6, #0]
			myCANTxMessage[0] = myTxMessage;					//what is this??
 8003f46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003f4a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003f4e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8003f52:	4e63      	ldr	r6, [pc, #396]	; (80040e0 <main+0xe28>)
 8003f54:	4630      	mov	r0, r6
 8003f56:	f001 f94b 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d1fa      	bne.n	8003f54 <main+0xc9c>
			rpm_0234 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (outputR[10] + outputP[10] + outputY[10]))));
 8003f5e:	ed95 7b00 	vldr	d7, [r5]
 8003f62:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003f66:	ed94 7b00 	vldr	d7, [r4]
 8003f6a:	4b56      	ldr	r3, [pc, #344]	; (80040c4 <main+0xe0c>)
 8003f6c:	4c52      	ldr	r4, [pc, #328]	; (80040b8 <main+0xe00>)
 8003f6e:	f8df e178 	ldr.w	lr, [pc, #376]	; 80040e8 <main+0xe30>
 8003f72:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8003f76:	ed93 7b00 	vldr	d7, [r3]
 8003f7a:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <main+0xe10>)
 8003f7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f80:	4b52      	ldr	r3, [pc, #328]	; (80040cc <main+0xe14>)
 8003f82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <main+0xdf8>)
 8003f88:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <main+0xe18>)
 8003f8e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003f92:	e9d4 4514 	ldrd	r4, r5, [r4, #80]	; 0x50
 8003f96:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003f9a:	e9de ab00 	ldrd	sl, fp, [lr]
 8003f9e:	f7fc f919 	bl	80001d4 <__adddf3>
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	f7fc f915 	bl	80001d4 <__adddf3>
 8003faa:	4642      	mov	r2, r8
 8003fac:	4604      	mov	r4, r0
 8003fae:	460d      	mov	r5, r1
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	f7fc fabf 	bl	8000538 <__aeabi_dmul>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7fc fab9 	bl	8000538 <__aeabi_dmul>
 8003fc6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460d      	mov	r5, r1
 8003fce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003fd2:	f7fc fab1 	bl	8000538 <__aeabi_dmul>
 8003fd6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8003fda:	f7fc faad 	bl	8000538 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc f8f5 	bl	80001d4 <__adddf3>
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	f7fc faa3 	bl	8000538 <__aeabi_dmul>
 8003ff2:	f7fc fd79 	bl	8000ae8 <__aeabi_d2uiz>
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <main+0xe2c>)
			myTxMessage.Data[6] = (uint8_t) rpm_0234; 			//low byte
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <main+0xe20>)
			rpm_0234 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (outputR[10] + outputP[10] + outputY[10]))));
 8003ffa:	b280      	uxth	r0, r0
 8003ffc:	8010      	strh	r0, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0234; 			//low byte
 8003ffe:	8811      	ldrh	r1, [r2, #0]
			myTxMessage.Data[7] = (uint8_t)(rpm_0234 >> 8);  	//high byte
 8004000:	8812      	ldrh	r2, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0234; 			//low byte
 8004002:	7699      	strb	r1, [r3, #26]
			myTxMessage.Data[7] = (uint8_t)(rpm_0234 >> 8);  	//high byte
 8004004:	f3c2 2207 	ubfx	r2, r2, #8, #8
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 8004008:	4935      	ldr	r1, [pc, #212]	; (80040e0 <main+0xe28>)
			myTxMessage.Data[7] = (uint8_t)(rpm_0234 >> 8);  	//high byte
 800400a:	76da      	strb	r2, [r3, #27]
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 800400c:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8004010:	2a02      	cmp	r2, #2
 8004012:	d0fb      	beq.n	800400c <main+0xd54>
			myTxMessage.StdId = 0x234;
 8004014:	f44f 720d 	mov.w	r2, #564	; 0x234
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8004018:	4c31      	ldr	r4, [pc, #196]	; (80040e0 <main+0xe28>)
			myTxMessage.StdId = 0x234;
 800401a:	601a      	str	r2, [r3, #0]
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 800401c:	4620      	mov	r0, r4
 800401e:	f001 f8e7 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8004022:	2800      	cmp	r0, #0
 8004024:	d1fa      	bne.n	800401c <main+0xd64>
			rpm_0233 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (-outputR[10] - outputP[10] + outputY[10]))));
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <main+0xe04>)
 8004028:	4c23      	ldr	r4, [pc, #140]	; (80040b8 <main+0xe00>)
 800402a:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80040e8 <main+0xe30>
 800402e:	ed93 7b00 	vldr	d7, [r3]
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <main+0xe08>)
 8004034:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004038:	ed93 7b00 	vldr	d7, [r3]
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <main+0xe0c>)
 800403e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004042:	ed93 7b00 	vldr	d7, [r3]
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <main+0xe10>)
 8004048:	e9d3 6700 	ldrd	r6, r7, [r3]
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <main+0xe14>)
 800404e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <main+0xdf8>)
 8004054:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <main+0xe18>)
 800405a:	9012      	str	r0, [sp, #72]	; 0x48
 800405c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004060:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004064:	e9d4 4514 	ldrd	r4, r5, [r4, #80]	; 0x50
 8004068:	9113      	str	r1, [sp, #76]	; 0x4c
 800406a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800406e:	e9de ab00 	ldrd	sl, fp, [lr]
 8004072:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004076:	f7fc f8ab 	bl	80001d0 <__aeabi_dsub>
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	f7fc f8a9 	bl	80001d4 <__adddf3>
 8004082:	4642      	mov	r2, r8
 8004084:	4604      	mov	r4, r0
 8004086:	460d      	mov	r5, r1
 8004088:	464b      	mov	r3, r9
 800408a:	4630      	mov	r0, r6
 800408c:	4639      	mov	r1, r7
 800408e:	f7fc fa53 	bl	8000538 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc fa4d 	bl	8000538 <__aeabi_dmul>
 800409e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80040a2:	4604      	mov	r4, r0
 80040a4:	460d      	mov	r5, r1
 80040a6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80040aa:	f7fc fa45 	bl	8000538 <__aeabi_dmul>
 80040ae:	e01d      	b.n	80040ec <main+0xe34>
 80040b0:	200001d8 	.word	0x200001d8
 80040b4:	200041c0 	.word	0x200041c0
 80040b8:	20000268 	.word	0x20000268
 80040bc:	20000250 	.word	0x20000250
 80040c0:	20000140 	.word	0x20000140
 80040c4:	20004798 	.word	0x20004798
 80040c8:	200001c0 	.word	0x200001c0
 80040cc:	200001b8 	.word	0x200001b8
 80040d0:	200000d0 	.word	0x200000d0
 80040d4:	2000c80a 	.word	0x2000c80a
 80040d8:	20004818 	.word	0x20004818
 80040dc:	20004284 	.word	0x20004284
 80040e0:	2000c8b0 	.word	0x2000c8b0
 80040e4:	2000c842 	.word	0x2000c842
 80040e8:	20000238 	.word	0x20000238
 80040ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80040f0:	f7fc fa22 	bl	8000538 <__aeabi_dmul>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc f86a 	bl	80001d4 <__adddf3>
 8004100:	4652      	mov	r2, sl
 8004102:	465b      	mov	r3, fp
 8004104:	f7fc fa18 	bl	8000538 <__aeabi_dmul>
 8004108:	f7fc fcee 	bl	8000ae8 <__aeabi_d2uiz>
 800410c:	4a8a      	ldr	r2, [pc, #552]	; (8004338 <main+0x1080>)
			myTxMessage.Data[6] = (uint8_t) rpm_0233; 			//low byte
 800410e:	4b8b      	ldr	r3, [pc, #556]	; (800433c <main+0x1084>)
			rpm_0233 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (-outputR[10] - outputP[10] + outputY[10]))));
 8004110:	b280      	uxth	r0, r0
 8004112:	8010      	strh	r0, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0233; 			//low byte
 8004114:	8811      	ldrh	r1, [r2, #0]
			myTxMessage.Data[7] = (uint8_t)(rpm_0233 >> 8); 	//high byte
 8004116:	8812      	ldrh	r2, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0233; 			//low byte
 8004118:	7699      	strb	r1, [r3, #26]
			myTxMessage.Data[7] = (uint8_t)(rpm_0233 >> 8); 	//high byte
 800411a:	f3c2 2207 	ubfx	r2, r2, #8, #8
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 800411e:	4988      	ldr	r1, [pc, #544]	; (8004340 <main+0x1088>)
			myTxMessage.Data[7] = (uint8_t)(rpm_0233 >> 8); 	//high byte
 8004120:	76da      	strb	r2, [r3, #27]
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 8004122:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8004126:	2a02      	cmp	r2, #2
 8004128:	d0fb      	beq.n	8004122 <main+0xe6a>
			myTxMessage.StdId = 0x233;
 800412a:	f240 2233 	movw	r2, #563	; 0x233
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 800412e:	4c84      	ldr	r4, [pc, #528]	; (8004340 <main+0x1088>)
			myTxMessage.StdId = 0x233;
 8004130:	601a      	str	r2, [r3, #0]
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 8004132:	4620      	mov	r0, r4
 8004134:	f001 f85c 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8004138:	2800      	cmp	r0, #0
 800413a:	d1fa      	bne.n	8004132 <main+0xe7a>
			rpm_0232 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (outputR[10] - outputP[10] - outputY[10]))));
 800413c:	4b81      	ldr	r3, [pc, #516]	; (8004344 <main+0x108c>)
 800413e:	4c82      	ldr	r4, [pc, #520]	; (8004348 <main+0x1090>)
 8004140:	f8df e274 	ldr.w	lr, [pc, #628]	; 80043b8 <main+0x1100>
 8004144:	ed93 7b00 	vldr	d7, [r3]
 8004148:	4b80      	ldr	r3, [pc, #512]	; (800434c <main+0x1094>)
 800414a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800414e:	ed93 7b00 	vldr	d7, [r3]
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <main+0x1098>)
 8004154:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8004158:	ed93 7b00 	vldr	d7, [r3]
 800415c:	4b7d      	ldr	r3, [pc, #500]	; (8004354 <main+0x109c>)
 800415e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004162:	4b7d      	ldr	r3, [pc, #500]	; (8004358 <main+0x10a0>)
 8004164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004168:	4b7c      	ldr	r3, [pc, #496]	; (800435c <main+0x10a4>)
 800416a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800416e:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <main+0x10a8>)
 8004170:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004174:	e9d4 4514 	ldrd	r4, r5, [r4, #80]	; 0x50
 8004178:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800417c:	e9de ab00 	ldrd	sl, fp, [lr]
 8004180:	f7fc f826 	bl	80001d0 <__aeabi_dsub>
 8004184:	4622      	mov	r2, r4
 8004186:	462b      	mov	r3, r5
 8004188:	f7fc f822 	bl	80001d0 <__aeabi_dsub>
 800418c:	4642      	mov	r2, r8
 800418e:	4604      	mov	r4, r0
 8004190:	460d      	mov	r5, r1
 8004192:	464b      	mov	r3, r9
 8004194:	4630      	mov	r0, r6
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc f9ce 	bl	8000538 <__aeabi_dmul>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fc f9c8 	bl	8000538 <__aeabi_dmul>
 80041a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80041ac:	4604      	mov	r4, r0
 80041ae:	460d      	mov	r5, r1
 80041b0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80041b4:	f7fc f9c0 	bl	8000538 <__aeabi_dmul>
 80041b8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80041bc:	f7fc f9bc 	bl	8000538 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc f804 	bl	80001d4 <__adddf3>
 80041cc:	4652      	mov	r2, sl
 80041ce:	465b      	mov	r3, fp
 80041d0:	f7fc f9b2 	bl	8000538 <__aeabi_dmul>
 80041d4:	f7fc fc88 	bl	8000ae8 <__aeabi_d2uiz>
 80041d8:	4a62      	ldr	r2, [pc, #392]	; (8004364 <main+0x10ac>)
			myTxMessage.Data[6] = (uint8_t) rpm_0232; 			//low byte
 80041da:	4b58      	ldr	r3, [pc, #352]	; (800433c <main+0x1084>)
			rpm_0232 = (uint16_t)(ktot * ((k1 * krpm * setRPM + k2 * ko * (outputR[10] - outputP[10] - outputY[10]))));
 80041dc:	b280      	uxth	r0, r0
 80041de:	8010      	strh	r0, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0232; 			//low byte
 80041e0:	8811      	ldrh	r1, [r2, #0]
			myTxMessage.Data[7] = (uint8_t)(rpm_0232 >> 8); 	//high byte
 80041e2:	8812      	ldrh	r2, [r2, #0]
			myTxMessage.Data[6] = (uint8_t) rpm_0232; 			//low byte
 80041e4:	7699      	strb	r1, [r3, #26]
			myTxMessage.Data[7] = (uint8_t)(rpm_0232 >> 8); 	//high byte
 80041e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 80041ea:	4955      	ldr	r1, [pc, #340]	; (8004340 <main+0x1088>)
			myTxMessage.Data[7] = (uint8_t)(rpm_0232 >> 8); 	//high byte
 80041ec:	76da      	strb	r2, [r3, #27]
			while (hcan1.State == HAL_CAN_STATE_BUSY);
 80041ee:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80041f2:	2a02      	cmp	r2, #2
 80041f4:	d0fb      	beq.n	80041ee <main+0xf36>
			myTxMessage.StdId = 0x232;
 80041f6:	f240 2232 	movw	r2, #562	; 0x232
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 80041fa:	4c51      	ldr	r4, [pc, #324]	; (8004340 <main+0x1088>)
			myTxMessage.StdId = 0x232;
 80041fc:	601a      	str	r2, [r3, #0]
			while (HAL_CAN_Transmit_IT(&hcan1) != HAL_OK);
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 fff6 	bl	80051f0 <HAL_CAN_Transmit_IT>
 8004204:	2800      	cmp	r0, #0
 8004206:	d1fa      	bne.n	80041fe <main+0xf46>
			if (averageVoltageCounter < 10)
 8004208:	4a57      	ldr	r2, [pc, #348]	; (8004368 <main+0x10b0>)
 800420a:	8813      	ldrh	r3, [r2, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b09      	cmp	r3, #9
 8004210:	f200 811c 	bhi.w	800444c <main+0x1194>
				HAL_ADC_Start(&hadc1);
 8004214:	4855      	ldr	r0, [pc, #340]	; (800436c <main+0x10b4>)
 8004216:	f000 fd57 	bl	8004cc8 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 800421a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800421e:	4853      	ldr	r0, [pc, #332]	; (800436c <main+0x10b4>)
 8004220:	f000 fdd0 	bl	8004dc4 <HAL_ADC_PollForConversion>
 8004224:	b930      	cbnz	r0, 8004234 <main+0xf7c>
					averageNewADCRawData += HAL_ADC_GetValue(&hadc1);
 8004226:	4851      	ldr	r0, [pc, #324]	; (800436c <main+0x10b4>)
 8004228:	f000 fe1c 	bl	8004e64 <HAL_ADC_GetValue>
 800422c:	4a50      	ldr	r2, [pc, #320]	; (8004370 <main+0x10b8>)
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	4418      	add	r0, r3
 8004232:	6010      	str	r0, [r2, #0]
				averageVoltageCounter++;
 8004234:	4a4c      	ldr	r2, [pc, #304]	; (8004368 <main+0x10b0>)
 8004236:	8813      	ldrh	r3, [r2, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
			if (gpsDataReady == SET)
 800423e:	4b4d      	ldr	r3, [pc, #308]	; (8004374 <main+0x10bc>)
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	2a01      	cmp	r2, #1
 8004244:	f000 8110 	beq.w	8004468 <main+0x11b0>
			if (readyToDoTransmit == SET)
 8004248:	4c4b      	ldr	r4, [pc, #300]	; (8004378 <main+0x10c0>)
 800424a:	7823      	ldrb	r3, [r4, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d103      	bne.n	8004258 <main+0xfa0>
				doTransmit();
 8004250:	f7fe f870 	bl	8002334 <doTransmit>
				readyToDoTransmit = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	7023      	strb	r3, [r4, #0]
			readyToCalcEuler = RESET;
 8004258:	4b48      	ldr	r3, [pc, #288]	; (800437c <main+0x10c4>)
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
		if (motorStart == SET)
 800425e:	4b48      	ldr	r3, [pc, #288]	; (8004380 <main+0x10c8>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d109      	bne.n	800427c <main+0xfc4>
			motorGotStarted = SET;
 8004268:	4a46      	ldr	r2, [pc, #280]	; (8004384 <main+0x10cc>)
 800426a:	7013      	strb	r3, [r2, #0]
			startUpYawReading = yaw;
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <main+0x10d0>)
 800426e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004272:	4b46      	ldr	r3, [pc, #280]	; (800438c <main+0x10d4>)
 8004274:	e9c3 0100 	strd	r0, r1, [r3]
			CAN_Motor_Start();
 8004278:	f7fe fd06 	bl	8002c88 <CAN_Motor_Start>
		if (motorStop == SET)
 800427c:	4b44      	ldr	r3, [pc, #272]	; (8004390 <main+0x10d8>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d104      	bne.n	800428e <main+0xfd6>
			motorGotStarted = RESET;
 8004284:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <main+0x10cc>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
			CAN_Motor_Stop();
 800428a:	f7fe fc93 	bl	8002bb4 <CAN_Motor_Stop>
		if (dataReadyfromBMP280 == SET)
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <main+0x10dc>)
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	2a01      	cmp	r2, #1
 8004294:	f47f aa6d 	bne.w	8003772 <main+0x4ba>
			dataReadyfromBMP280 = RESET;
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
			temperature = calcDoubleBMP280Temperature();
 800429c:	f7fc fcf6 	bl	8000c8c <calcDoubleBMP280Temperature>
 80042a0:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <main+0x10e0>)
 80042a2:	ed83 0b00 	vstr	d0, [r3]
			pressure = calcDoubleBMP280Pressure();
 80042a6:	f7fc fd73 	bl	8000d90 <calcDoubleBMP280Pressure>
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <main+0x10e4>)
 80042ac:	ed83 0b00 	vstr	d0, [r3]
			altitude = calcDoubleBMP280Altitude(1013.25);
 80042b0:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8004330 <main+0x1078>
 80042b4:	f7fc fe80 	bl	8000fb8 <calcDoubleBMP280Altitude>
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <main+0x10e8>)
 80042ba:	ed83 0b00 	vstr	d0, [r3]
 80042be:	f7ff ba58 	b.w	8003772 <main+0x4ba>
		else if (readyToCalcEuler && startUpCounter == STARTUPCOUNTERSIZE)
 80042c2:	780b      	ldrb	r3, [r1, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f43f aa72 	beq.w	80037ae <main+0x4f6>
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <main+0x10ec>)
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80042d4:	f47f aa6b 	bne.w	80037ae <main+0x4f6>
	huart5.Instance = UART5;
 80042d8:	4c33      	ldr	r4, [pc, #204]	; (80043a8 <main+0x10f0>)
	huart5.Init.BaudRate = 57600;
 80042da:	4834      	ldr	r0, [pc, #208]	; (80043ac <main+0x10f4>)
 80042dc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80042e0:	e884 0009 	stmia.w	r4, {r0, r3}
	huart5.Init.Mode = UART_MODE_RX;
 80042e4:	2204      	movs	r2, #4
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042e6:	2300      	movs	r3, #0
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80042e8:	4620      	mov	r0, r4
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042ea:	60a3      	str	r3, [r4, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80042ec:	60e3      	str	r3, [r4, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80042ee:	6123      	str	r3, [r4, #16]
	huart5.Init.Mode = UART_MODE_RX;
 80042f0:	6162      	str	r2, [r4, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042f2:	61a3      	str	r3, [r4, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f4:	61e3      	str	r3, [r4, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80042f6:	f003 fa45 	bl	8007784 <HAL_UART_Init>
 80042fa:	b9b0      	cbnz	r0, 800432a <main+0x1072>
			while (HAL_UART_Receive_DMA(&huart5, GPS_BUF, RX_BUFFER_SIZE) != HAL_OK);
 80042fc:	4d2c      	ldr	r5, [pc, #176]	; (80043b0 <main+0x10f8>)
 80042fe:	2250      	movs	r2, #80	; 0x50
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f003 faca 	bl	800789c <HAL_UART_Receive_DMA>
 8004308:	2800      	cmp	r0, #0
 800430a:	d1f8      	bne.n	80042fe <main+0x1046>
			startUpCounter = STARTUPCOUNTERSIZE + 1;
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <main+0x10ec>)
			setYaw = startUpYawReading = yaw;
 800430e:	491f      	ldr	r1, [pc, #124]	; (800438c <main+0x10d4>)
			startUpCounter = STARTUPCOUNTERSIZE + 1;
 8004310:	f240 3221 	movw	r2, #801	; 0x321
 8004314:	801a      	strh	r2, [r3, #0]
			setYaw = startUpYawReading = yaw;
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <main+0x10d0>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	e9c1 2300 	strd	r2, r3, [r1]
 8004320:	4924      	ldr	r1, [pc, #144]	; (80043b4 <main+0x10fc>)
 8004322:	e9c1 2300 	strd	r2, r3, [r1]
 8004326:	f7ff ba42 	b.w	80037ae <main+0x4f6>
 800432a:	e7fe      	b.n	800432a <main+0x1072>
 800432c:	f3af 8000 	nop.w
 8004330:	00000000 	.word	0x00000000
 8004334:	408faa00 	.word	0x408faa00
 8004338:	200086fa 	.word	0x200086fa
 800433c:	20004818 	.word	0x20004818
 8004340:	2000c8b0 	.word	0x2000c8b0
 8004344:	20000250 	.word	0x20000250
 8004348:	20000268 	.word	0x20000268
 800434c:	20000140 	.word	0x20000140
 8004350:	20004798 	.word	0x20004798
 8004354:	200001c0 	.word	0x200001c0
 8004358:	200001b8 	.word	0x200001b8
 800435c:	200001d8 	.word	0x200001d8
 8004360:	200000d0 	.word	0x200000d0
 8004364:	200041fa 	.word	0x200041fa
 8004368:	2000008c 	.word	0x2000008c
 800436c:	200047a0 	.word	0x200047a0
 8004370:	2000c944 	.word	0x2000c944
 8004374:	2000c828 	.word	0x2000c828
 8004378:	20000090 	.word	0x20000090
 800437c:	200086f8 	.word	0x200086f8
 8004380:	20008948 	.word	0x20008948
 8004384:	200046ac 	.word	0x200046ac
 8004388:	2000c7f8 	.word	0x2000c7f8
 800438c:	2000c938 	.word	0x2000c938
 8004390:	200088b2 	.word	0x200088b2
 8004394:	2000009c 	.word	0x2000009c
 8004398:	20004640 	.word	0x20004640
 800439c:	20004740 	.word	0x20004740
 80043a0:	200087c0 	.word	0x200087c0
 80043a4:	20000092 	.word	0x20000092
 80043a8:	20004750 	.word	0x20004750
 80043ac:	40005000 	.word	0x40005000
 80043b0:	200046c1 	.word	0x200046c1
 80043b4:	200002f0 	.word	0x200002f0
 80043b8:	20000238 	.word	0x20000238
				yawAverageCounter = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	7023      	strb	r3, [r4, #0]
				aYaw = atan2(yawSummY / 50, yawSummX / 50);
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <main+0x11d8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <main+0x11dc>)
 80043ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80043ce:	f7fc f9dd 	bl	800078c <__aeabi_ddiv>
 80043d2:	2200      	movs	r2, #0
 80043d4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80043d8:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <main+0x11dc>)
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fc f9d5 	bl	800078c <__aeabi_ddiv>
 80043e2:	ed9d 1b14 	vldr	d1, [sp, #80]	; 0x50
 80043e6:	ec41 0b10 	vmov	d0, r0, r1
 80043ea:	f003 fc99 	bl	8007d20 <atan2>
 80043ee:	4c2a      	ldr	r4, [pc, #168]	; (8004498 <main+0x11e0>)
				aYaw = aYaw * 180 / M_PI;
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <main+0x11e4>)
				aYaw = atan2(yawSummY / 50, yawSummX / 50);
 80043f2:	ed84 0b00 	vstr	d0, [r4]
				aYaw = aYaw * 180 / M_PI;
 80043f6:	2200      	movs	r2, #0
 80043f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80043fc:	f7fc f89c 	bl	8000538 <__aeabi_dmul>
 8004400:	a31f      	add	r3, pc, #124	; (adr r3, 8004480 <main+0x11c8>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fc f9c1 	bl	800078c <__aeabi_ddiv>
 800440a:	e9c4 0100 	strd	r0, r1, [r4]
				if (aYaw < 0)
 800440e:	2200      	movs	r2, #0
 8004410:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004414:	2300      	movs	r3, #0
 8004416:	f7fc fb01 	bl	8000a1c <__aeabi_dcmplt>
 800441a:	b138      	cbz	r0, 800442c <main+0x1174>
					aYaw += 360; 	// Ensure yaw stays between 0 and 360
 800441c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004420:	2200      	movs	r2, #0
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <main+0x11e8>)
 8004424:	f7fb fed6 	bl	80001d4 <__adddf3>
 8004428:	e9c4 0100 	strd	r0, r1, [r4]
				aYaw += 2.26; 		//declination of Zurich is about +2.26 deg
 800442c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004430:	a315      	add	r3, pc, #84	; (adr r3, 8004488 <main+0x11d0>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fb fecd 	bl	80001d4 <__adddf3>
				yawSummX = yawSummY = 0;
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <main+0x11d8>)
				aYaw += 2.26; 		//declination of Zurich is about +2.26 deg
 800443c:	e9c4 0100 	strd	r0, r1, [r4]
				yawSummX = yawSummY = 0;
 8004440:	ed83 cb00 	vstr	d12, [r3]
 8004444:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <main+0x11ec>)
 8004446:	ed83 cb00 	vstr	d12, [r3]
 800444a:	e437      	b.n	8003cbc <main+0xa04>
				averageADCRawData = (uint16_t)(averageNewADCRawData / 10);
 800444c:	4916      	ldr	r1, [pc, #88]	; (80044a8 <main+0x11f0>)
 800444e:	240a      	movs	r4, #10
 8004450:	680b      	ldr	r3, [r1, #0]
 8004452:	fbb3 f3f4 	udiv	r3, r3, r4
 8004456:	4c15      	ldr	r4, [pc, #84]	; (80044ac <main+0x11f4>)
 8004458:	b29b      	uxth	r3, r3
 800445a:	8023      	strh	r3, [r4, #0]
				averageNewADCRawData = 0;
 800445c:	6008      	str	r0, [r1, #0]
				averageVoltageCounter = 0;
 800445e:	8010      	strh	r0, [r2, #0]
				HAL_ADC_Stop(&hadc1);							//why this?
 8004460:	4813      	ldr	r0, [pc, #76]	; (80044b0 <main+0x11f8>)
 8004462:	f000 fc91 	bl	8004d88 <HAL_ADC_Stop>
 8004466:	e6ea      	b.n	800423e <main+0xf86>
				gpsDataReady = RESET;
 8004468:	2200      	movs	r2, #0
				while (HAL_UART_Receive_DMA(&huart5, GPS_BUF, RX_BUFFER_SIZE) != HAL_OK);
 800446a:	4d12      	ldr	r5, [pc, #72]	; (80044b4 <main+0x11fc>)
 800446c:	4c12      	ldr	r4, [pc, #72]	; (80044b8 <main+0x1200>)
				gpsDataReady = RESET;
 800446e:	701a      	strb	r2, [r3, #0]
				while (HAL_UART_Receive_DMA(&huart5, GPS_BUF, RX_BUFFER_SIZE) != HAL_OK);
 8004470:	2250      	movs	r2, #80	; 0x50
 8004472:	4629      	mov	r1, r5
 8004474:	4620      	mov	r0, r4
 8004476:	f003 fa11 	bl	800789c <HAL_UART_Receive_DMA>
 800447a:	2800      	cmp	r0, #0
 800447c:	d1f8      	bne.n	8004470 <main+0x11b8>
 800447e:	e6e3      	b.n	8004248 <main+0xf90>
 8004480:	54442d18 	.word	0x54442d18
 8004484:	400921fb 	.word	0x400921fb
 8004488:	e147ae14 	.word	0xe147ae14
 800448c:	4002147a 	.word	0x4002147a
 8004490:	20004260 	.word	0x20004260
 8004494:	40490000 	.word	0x40490000
 8004498:	20008778 	.word	0x20008778
 800449c:	40668000 	.word	0x40668000
 80044a0:	40768000 	.word	0x40768000
 80044a4:	200087d0 	.word	0x200087d0
 80044a8:	2000c944 	.word	0x2000c944
 80044ac:	2000c908 	.word	0x2000c908
 80044b0:	200047a0 	.word	0x200047a0
 80044b4:	200046c1 	.word	0x200046c1
 80044b8:	20004750 	.word	0x20004750

080044bc <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
 80044bc:	e7fe      	b.n	80044bc <_Error_Handler>

080044be <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044be:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c0:	2003      	movs	r0, #3
 80044c2:	f000 ff0d 	bl	80052e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	4611      	mov	r1, r2
 80044ca:	f06f 000b 	mvn.w	r0, #11
 80044ce:	f000 ff19 	bl	8005304 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	4611      	mov	r1, r2
 80044d6:	f06f 000a 	mvn.w	r0, #10
 80044da:	f000 ff13 	bl	8005304 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	4611      	mov	r1, r2
 80044e2:	f06f 0009 	mvn.w	r0, #9
 80044e6:	f000 ff0d 	bl	8005304 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	4611      	mov	r1, r2
 80044ee:	f06f 0004 	mvn.w	r0, #4
 80044f2:	f000 ff07 	bl	8005304 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	4611      	mov	r1, r2
 80044fa:	f06f 0003 	mvn.w	r0, #3
 80044fe:	f000 ff01 	bl	8005304 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	4611      	mov	r1, r2
 8004506:	f06f 0001 	mvn.w	r0, #1
 800450a:	f000 fefb 	bl	8005304 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	4611      	mov	r1, r2
 8004512:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800451a:	f000 bef3 	b.w	8005304 <HAL_NVIC_SetPriority>
	...

08004520 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004522:	6802      	ldr	r2, [r0, #0]
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_ADC_MspInit+0x3c>)
 8004526:	429a      	cmp	r2, r3
 8004528:	d115      	bne.n	8004556 <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800452a:	2100      	movs	r1, #0
 800452c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004530:	9100      	str	r1, [sp, #0]
 8004532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004534:	480a      	ldr	r0, [pc, #40]	; (8004560 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004548:	2301      	movs	r3, #1
 800454a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800454e:	2303      	movs	r3, #3
 8004550:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004552:	f001 f8e1 	bl	8005718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004556:	b007      	add	sp, #28
 8004558:	f85d fb04 	ldr.w	pc, [sp], #4
 800455c:	40012000 	.word	0x40012000
 8004560:	40020000 	.word	0x40020000

08004564 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8004566:	6802      	ldr	r2, [r0, #0]
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_CAN_MspInit+0x48>)
 800456a:	429a      	cmp	r2, r3
 800456c:	d11a      	bne.n	80045a4 <HAL_CAN_MspInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800456e:	2100      	movs	r1, #0
 8004570:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004574:	9100      	str	r1, [sp, #0]
 8004576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <HAL_CAN_MspInit+0x4c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800457a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	9103      	str	r1, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800458c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004590:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800459c:	2309      	movs	r3, #9
 800459e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a0:	f001 f8ba 	bl	8005718 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80045a4:	b007      	add	sp, #28
 80045a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80045aa:	bf00      	nop
 80045ac:	40006400 	.word	0x40006400
 80045b0:	40020000 	.word	0x40020000

080045b4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045b4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80045b6:	6802      	ldr	r2, [r0, #0]
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_I2C_MspInit+0x8c>)
 80045ba:	429a      	cmp	r2, r3
{
 80045bc:	b087      	sub	sp, #28
 80045be:	4605      	mov	r5, r0
  if(hi2c->Instance==I2C1)
 80045c0:	d13c      	bne.n	800463c <HAL_I2C_MspInit+0x88>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045c2:	23c0      	movs	r3, #192	; 0xc0
 80045c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045c6:	2312      	movs	r3, #18
 80045c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ce:	2303      	movs	r3, #3
 80045d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045d2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	eb0d 0103 	add.w	r1, sp, r3
 80045d8:	481a      	ldr	r0, [pc, #104]	; (8004644 <HAL_I2C_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045dc:	f001 f89c 	bl	8005718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045e0:	2300      	movs	r3, #0
 80045e2:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_I2C_MspInit+0x94>)
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80045e8:	4c18      	ldr	r4, [pc, #96]	; (800464c <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045ea:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80045ee:	6411      	str	r1, [r2, #64]	; 0x40
 80045f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80045f2:	4917      	ldr	r1, [pc, #92]	; (8004650 <HAL_I2C_MspInit+0x9c>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f4:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045fa:	9200      	str	r2, [sp, #0]
 80045fc:	9a00      	ldr	r2, [sp, #0]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045fe:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004604:	e884 0006 	stmia.w	r4, {r1, r2}
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004608:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800460a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800460e:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004610:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004612:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004614:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004616:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004618:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800461a:	f000 fef1 	bl	8005400 <HAL_DMA_Init>
 800461e:	b118      	cbz	r0, 8004628 <HAL_I2C_MspInit+0x74>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004620:	21e4      	movs	r1, #228	; 0xe4
 8004622:	480c      	ldr	r0, [pc, #48]	; (8004654 <HAL_I2C_MspInit+0xa0>)
 8004624:	f7ff ff4a 	bl	80044bc <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004628:	2200      	movs	r2, #0
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800462a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800462c:	201f      	movs	r0, #31
 800462e:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004630:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004632:	f000 fe67 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004636:	201f      	movs	r0, #31
 8004638:	f000 fe98 	bl	800536c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800463c:	b007      	add	sp, #28
 800463e:	bd30      	pop	{r4, r5, pc}
 8004640:	40005400 	.word	0x40005400
 8004644:	40020400 	.word	0x40020400
 8004648:	40023800 	.word	0x40023800
 800464c:	200087d8 	.word	0x200087d8
 8004650:	40026088 	.word	0x40026088
 8004654:	0800a2b0 	.word	0x0800a2b0

08004658 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8004658:	6802      	ldr	r2, [r0, #0]
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_TIM_PWM_MspInit+0x28>)
 800465c:	429a      	cmp	r2, r3
{
 800465e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8004660:	d10b      	bne.n	800467a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_TIM_PWM_MspInit+0x2c>)
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	f042 0202 	orr.w	r2, r2, #2
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800467a:	b002      	add	sp, #8
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40000400 	.word	0x40000400
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004688:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <HAL_TIM_Base_MspInit+0x58>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d115      	bne.n	80046be <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_TIM_Base_MspInit+0x5c>)
 8004694:	2200      	movs	r2, #0
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800469a:	f041 0110 	orr.w	r1, r1, #16
 800469e:	6419      	str	r1, [r3, #64]	; 0x40
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80046a8:	2036      	movs	r0, #54	; 0x36
 80046aa:	2107      	movs	r1, #7
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ac:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80046ae:	f000 fe29 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046b2:	2036      	movs	r0, #54	; 0x36
 80046b4:	f000 fe5a 	bl	800536c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80046b8:	b003      	add	sp, #12
 80046ba:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_TIM_Base_MspInit+0x60>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d1f9      	bne.n	80046b8 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_TIM_Base_MspInit+0x5c>)
 80046ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046cc:	f042 0220 	orr.w	r2, r2, #32
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	9b01      	ldr	r3, [sp, #4]
}
 80046dc:	e7ec      	b.n	80046b8 <HAL_TIM_Base_MspInit+0x30>
 80046de:	bf00      	nop
 80046e0:	40001000 	.word	0x40001000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40001400 	.word	0x40001400

080046ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_TIM_MspPostInit+0x28>)
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d10b      	bne.n	800470e <HAL_TIM_MspPostInit+0x22>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046f6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004700:	4805      	ldr	r0, [pc, #20]	; (8004718 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004702:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004706:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004708:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800470a:	f001 f805 	bl	8005718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800470e:	b007      	add	sp, #28
 8004710:	f85d fb04 	ldr.w	pc, [sp], #4
 8004714:	40000400 	.word	0x40000400
 8004718:	40020400 	.word	0x40020400

0800471c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8004720:	6803      	ldr	r3, [r0, #0]
 8004722:	4a54      	ldr	r2, [pc, #336]	; (8004874 <HAL_UART_MspInit+0x158>)
 8004724:	4293      	cmp	r3, r2
{
 8004726:	b088      	sub	sp, #32
 8004728:	4606      	mov	r6, r0
  if(huart->Instance==UART4)
 800472a:	d138      	bne.n	800479e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800472c:	2500      	movs	r5, #0
 800472e:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_UART_MspInit+0x15c>)
 8004730:	9500      	str	r5, [sp, #0]
 8004732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004734:	4851      	ldr	r0, [pc, #324]	; (800487c <HAL_UART_MspInit+0x160>)

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004736:	4c52      	ldr	r4, [pc, #328]	; (8004880 <HAL_UART_MspInit+0x164>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8004738:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800474c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004752:	2301      	movs	r3, #1
 8004754:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004756:	2303      	movs	r3, #3
 8004758:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800475c:	2308      	movs	r3, #8
 800475e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004760:	f000 ffda 	bl	8005718 <HAL_GPIO_Init>
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004764:	4847      	ldr	r0, [pc, #284]	; (8004884 <HAL_UART_MspInit+0x168>)
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004766:	60e5      	str	r5, [r4, #12]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004768:	2340      	movs	r3, #64	; 0x40
 800476a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800476e:	e884 000b 	stmia.w	r4, {r0, r1, r3}
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004772:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004776:	4620      	mov	r0, r4
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004778:	6123      	str	r3, [r4, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477a:	6165      	str	r5, [r4, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800477c:	61a5      	str	r5, [r4, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800477e:	61e5      	str	r5, [r4, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004780:	6225      	str	r5, [r4, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004782:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004784:	f000 fe3c 	bl	8005400 <HAL_DMA_Init>
 8004788:	b120      	cbz	r0, 8004794 <HAL_UART_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 800478a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800478e:	483e      	ldr	r0, [pc, #248]	; (8004888 <HAL_UART_MspInit+0x16c>)
 8004790:	f7ff fe94 	bl	80044bc <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004794:	6334      	str	r4, [r6, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004796:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004798:	b008      	add	sp, #32
 800479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==UART5)
 800479e:	4a3b      	ldr	r2, [pc, #236]	; (800488c <HAL_UART_MspInit+0x170>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d141      	bne.n	8004828 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80047a4:	2500      	movs	r5, #0
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <HAL_UART_MspInit+0x15c>)
 80047a8:	9501      	str	r5, [sp, #4]
 80047aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ac:	4833      	ldr	r0, [pc, #204]	; (800487c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80047ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2402      	movs	r4, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 80047be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047c6:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047ca:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047d0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047d2:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047d6:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d8:	f000 ff9e 	bl	8005718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047dc:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047de:	482c      	ldr	r0, [pc, #176]	; (8004890 <HAL_UART_MspInit+0x174>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047e0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047e2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047e6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047e8:	f8cd 8014 	str.w	r8, [sp, #20]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80047ec:	4c29      	ldr	r4, [pc, #164]	; (8004894 <HAL_UART_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047ee:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f0:	f000 ff92 	bl	8005718 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80047f4:	4a28      	ldr	r2, [pc, #160]	; (8004898 <HAL_UART_MspInit+0x17c>)
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047f6:	60a5      	str	r5, [r4, #8]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80047f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047fc:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004800:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004802:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004806:	60e5      	str	r5, [r4, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004808:	6123      	str	r3, [r4, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800480a:	6165      	str	r5, [r4, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800480c:	61a5      	str	r5, [r4, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800480e:	61e5      	str	r5, [r4, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004810:	6225      	str	r5, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004812:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004814:	f000 fdf4 	bl	8005400 <HAL_DMA_Init>
 8004818:	b120      	cbz	r0, 8004824 <HAL_UART_MspInit+0x108>
      _Error_Handler(__FILE__, __LINE__);
 800481a:	f240 11e1 	movw	r1, #481	; 0x1e1
 800481e:	481a      	ldr	r0, [pc, #104]	; (8004888 <HAL_UART_MspInit+0x16c>)
 8004820:	f7ff fe4c 	bl	80044bc <_Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004824:	6374      	str	r4, [r6, #52]	; 0x34
 8004826:	e7b6      	b.n	8004796 <HAL_UART_MspInit+0x7a>
  else if(huart->Instance==USART6)
 8004828:	4a1c      	ldr	r2, [pc, #112]	; (800489c <HAL_UART_MspInit+0x180>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d1b4      	bne.n	8004798 <HAL_UART_MspInit+0x7c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800482e:	2400      	movs	r4, #0
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_UART_MspInit+0x15c>)
 8004832:	9402      	str	r4, [sp, #8]
 8004834:	6c59      	ldr	r1, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004836:	4811      	ldr	r0, [pc, #68]	; (800487c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8004838:	f041 0120 	orr.w	r1, r1, #32
 800483c:	6459      	str	r1, [r3, #68]	; 0x44
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004850:	2301      	movs	r3, #1
 8004852:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004854:	2303      	movs	r3, #3
 8004856:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004858:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800485a:	2308      	movs	r3, #8
 800485c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485e:	f000 ff5b 	bl	8005718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004862:	4622      	mov	r2, r4
 8004864:	4621      	mov	r1, r4
 8004866:	2047      	movs	r0, #71	; 0x47
 8004868:	f000 fd4c 	bl	8005304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800486c:	2047      	movs	r0, #71	; 0x47
 800486e:	f000 fd7d 	bl	800536c <HAL_NVIC_EnableIRQ>
}
 8004872:	e791      	b.n	8004798 <HAL_UART_MspInit+0x7c>
 8004874:	40004c00 	.word	0x40004c00
 8004878:	40023800 	.word	0x40023800
 800487c:	40020800 	.word	0x40020800
 8004880:	2000c9a8 	.word	0x2000c9a8
 8004884:	40026070 	.word	0x40026070
 8004888:	0800a2b0 	.word	0x0800a2b0
 800488c:	40005000 	.word	0x40005000
 8004890:	40020c00 	.word	0x40020c00
 8004894:	2000c844 	.word	0x2000c844
 8004898:	40026010 	.word	0x40026010
 800489c:	40011400 	.word	0x40011400

080048a0 <NMI_Handler>:
 80048a0:	4770      	bx	lr

080048a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80048a2:	e7fe      	b.n	80048a2 <HardFault_Handler>

080048a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80048a4:	e7fe      	b.n	80048a4 <MemManage_Handler>

080048a6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80048a6:	e7fe      	b.n	80048a6 <BusFault_Handler>

080048a8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80048a8:	e7fe      	b.n	80048a8 <UsageFault_Handler>

080048aa <SVC_Handler>:
 80048aa:	4770      	bx	lr

080048ac <DebugMon_Handler>:
 80048ac:	4770      	bx	lr

080048ae <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80048ae:	4770      	bx	lr

080048b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80048b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048b2:	f000 f941 	bl	8004b38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80048ba:	f000 bd86 	b.w	80053ca <HAL_SYSTICK_IRQHandler>
	...

080048c0 <EXTI1_IRQHandler>:
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if (GPIO_InitStruct.Mode == GPIO_MODE_IT_RISING)
 80048c0:	4912      	ldr	r1, [pc, #72]	; (800490c <EXTI1_IRQHandler+0x4c>)
 80048c2:	4813      	ldr	r0, [pc, #76]	; (8004910 <EXTI1_IRQHandler+0x50>)
 80048c4:	684a      	ldr	r2, [r1, #4]
	{
		__HAL_TIM_SetCounter(&htim7,0);
 80048c6:	6800      	ldr	r0, [r0, #0]
{
 80048c8:	b508      	push	{r3, lr}
	if (GPIO_InitStruct.Mode == GPIO_MODE_IT_RISING)
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <EXTI1_IRQHandler+0x54>)
 80048cc:	429a      	cmp	r2, r3
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <EXTI1_IRQHandler+0x58>)
 80048d0:	d115      	bne.n	80048fe <EXTI1_IRQHandler+0x3e>
		__HAL_TIM_SetCounter(&htim7,0);
 80048d2:	2300      	movs	r3, #0
 80048d4:	6243      	str	r3, [r0, #36]	; 0x24
		exti1_count = exti2_count = exti3_count = exti4_count = 0;
 80048d6:	4811      	ldr	r0, [pc, #68]	; (800491c <EXTI1_IRQHandler+0x5c>)
 80048d8:	8013      	strh	r3, [r2, #0]
 80048da:	8003      	strh	r3, [r0, #0]
 80048dc:	4810      	ldr	r0, [pc, #64]	; (8004920 <EXTI1_IRQHandler+0x60>)
		GPIO_InitStruct.Pin = GPIO_PIN_1;
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048de:	4a11      	ldr	r2, [pc, #68]	; (8004924 <EXTI1_IRQHandler+0x64>)
		exti1_count = exti2_count = exti3_count = exti4_count = 0;
 80048e0:	8003      	strh	r3, [r0, #0]
 80048e2:	4811      	ldr	r0, [pc, #68]	; (8004928 <EXTI1_IRQHandler+0x68>)
 80048e4:	8003      	strh	r3, [r0, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048e6:	2002      	movs	r0, #2
 80048e8:	e881 0005 	stmia.w	r1, {r0, r2}
	{
		exti1_count = __HAL_TIM_GetCounter(&htim7);
		GPIO_InitStruct.Pin = GPIO_PIN_1;
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	480f      	ldr	r0, [pc, #60]	; (800492c <EXTI1_IRQHandler+0x6c>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	608b      	str	r3, [r1, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f0:	f000 ff12 	bl	8005718 <HAL_GPIO_Init>
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048f4:	2002      	movs	r0, #2
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80048f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048fa:	f000 bff3 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
		exti1_count = __HAL_TIM_GetCounter(&htim7);
 80048fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004900:	8010      	strh	r0, [r2, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004902:	2202      	movs	r2, #2
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004904:	e881 000c 	stmia.w	r1, {r2, r3}
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	e7ef      	b.n	80048ec <EXTI1_IRQHandler+0x2c>
 800490c:	20008760 	.word	0x20008760
 8004910:	2000c954 	.word	0x2000c954
 8004914:	10110000 	.word	0x10110000
 8004918:	20004280 	.word	0x20004280
 800491c:	20004250 	.word	0x20004250
 8004920:	20004268 	.word	0x20004268
 8004924:	10210000 	.word	0x10210000
 8004928:	2000c940 	.word	0x2000c940
 800492c:	40020000 	.word	0x40020000

08004930 <EXTI2_IRQHandler>:
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	exti2_count = __HAL_TIM_GetCounter(&htim7);
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <EXTI2_IRQHandler+0x10>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <EXTI2_IRQHandler+0x14>)
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004938:	2004      	movs	r0, #4
	exti2_count = __HAL_TIM_GetCounter(&htim7);
 800493a:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800493c:	f000 bfd2 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
 8004940:	2000c954 	.word	0x2000c954
 8004944:	2000c940 	.word	0x2000c940

08004948 <EXTI3_IRQHandler>:
* @brief This function handles EXTI line3 interrupt.
*/
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	exti3_count = __HAL_TIM_GetCounter(&htim7);
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <EXTI3_IRQHandler+0x10>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494e:	4b03      	ldr	r3, [pc, #12]	; (800495c <EXTI3_IRQHandler+0x14>)
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004950:	2008      	movs	r0, #8
	exti3_count = __HAL_TIM_GetCounter(&htim7);
 8004952:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004954:	f000 bfc6 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
 8004958:	2000c954 	.word	0x2000c954
 800495c:	20004268 	.word	0x20004268

08004960 <EXTI4_IRQHandler>:
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	exti4_count = __HAL_TIM_GetCounter(&htim7);
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <EXTI4_IRQHandler+0x10>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004966:	4b03      	ldr	r3, [pc, #12]	; (8004974 <EXTI4_IRQHandler+0x14>)
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004968:	2010      	movs	r0, #16
	exti4_count = __HAL_TIM_GetCounter(&htim7);
 800496a:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800496c:	f000 bfba 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
 8004970:	2000c954 	.word	0x2000c954
 8004974:	20004250 	.word	0x20004250

08004978 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <DMA1_Stream0_IRQHandler+0x8>)
 800497a:	f000 be0f 	b.w	800559c <HAL_DMA_IRQHandler>
 800497e:	bf00      	nop
 8004980:	2000c844 	.word	0x2000c844

08004984 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <DMA1_Stream4_IRQHandler+0x8>)
 8004986:	f000 be09 	b.w	800559c <HAL_DMA_IRQHandler>
 800498a:	bf00      	nop
 800498c:	2000c9a8 	.word	0x2000c9a8

08004990 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <DMA1_Stream5_IRQHandler+0x8>)
 8004992:	f000 be03 	b.w	800559c <HAL_DMA_IRQHandler>
 8004996:	bf00      	nop
 8004998:	200087d8 	.word	0x200087d8

0800499c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <ADC_IRQHandler+0x8>)
 800499e:	f000 ba67 	b.w	8004e70 <HAL_ADC_IRQHandler>
 80049a2:	bf00      	nop
 80049a4:	200047a0 	.word	0x200047a0

080049a8 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80049a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <EXTI9_5_IRQHandler+0x34>)
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	0692      	lsls	r2, r2, #26
 80049b0:	d504      	bpl.n	80049bc <EXTI9_5_IRQHandler+0x14>
	{
		exti5_count = __HAL_TIM_GetCounter(&htim7);
 80049b2:	4a0b      	ldr	r2, [pc, #44]	; (80049e0 <EXTI9_5_IRQHandler+0x38>)
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <EXTI9_5_IRQHandler+0x3c>)
 80049ba:	8011      	strh	r1, [r2, #0]
	}

	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	065b      	lsls	r3, r3, #25
 80049c0:	d504      	bpl.n	80049cc <EXTI9_5_IRQHandler+0x24>
	{
		exti6_count = __HAL_TIM_GetCounter(&htim7);
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <EXTI9_5_IRQHandler+0x38>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c8:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <EXTI9_5_IRQHandler+0x40>)
 80049ca:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80049cc:	2020      	movs	r0, #32
 80049ce:	f000 ff89 	bl	80058e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80049d2:	2040      	movs	r0, #64	; 0x40
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80049d8:	f000 bf84 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
 80049dc:	40013c00 	.word	0x40013c00
 80049e0:	2000c954 	.word	0x2000c954
 80049e4:	2000c80c 	.word	0x2000c80c
 80049e8:	2000c930 	.word	0x2000c930

080049ec <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <I2C1_EV_IRQHandler+0x8>)
 80049ee:	f001 bc4f 	b.w	8006290 <HAL_I2C_EV_IRQHandler>
 80049f2:	bf00      	nop
 80049f4:	200041fc 	.word	0x200041fc

080049f8 <EXTI15_10_IRQHandler>:
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <EXTI15_10_IRQHandler+0x48>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	041b      	lsls	r3, r3, #16
{
 80049fe:	b507      	push	{r0, r1, r2, lr}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 8004a00:	d517      	bpl.n	8004a32 <EXTI15_10_IRQHandler+0x3a>
	{
		if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8004a02:	4810      	ldr	r0, [pc, #64]	; (8004a44 <EXTI15_10_IRQHandler+0x4c>)
 8004a04:	f001 ffc8 	bl	8006998 <HAL_I2C_GetState>
 8004a08:	2820      	cmp	r0, #32
 8004a0a:	d112      	bne.n	8004a32 <EXTI15_10_IRQHandler+0x3a>
		{
			dataReadyfromMPU9250 = SET;
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <EXTI15_10_IRQHandler+0x50>)
			dataReadyfromBMP280 = RESET;
			dataReadyfromMPU9250Counter++;
			HAL_I2C_Mem_Read_IT(&hi2c1, MPU9250_ADDRESS, 0x3B, I2C_MEMADD_SIZE_8BIT, readMPU9250Buffer, 21);
 8004a0e:	480d      	ldr	r0, [pc, #52]	; (8004a44 <EXTI15_10_IRQHandler+0x4c>)
			dataReadyfromMPU9250 = SET;
 8004a10:	2301      	movs	r3, #1
 8004a12:	7013      	strb	r3, [r2, #0]
			dataReadyfromBMP280 = RESET;
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <EXTI15_10_IRQHandler+0x54>)
 8004a16:	2100      	movs	r1, #0
 8004a18:	7011      	strb	r1, [r2, #0]
			dataReadyfromMPU9250Counter++;
 8004a1a:	490d      	ldr	r1, [pc, #52]	; (8004a50 <EXTI15_10_IRQHandler+0x58>)
 8004a1c:	780a      	ldrb	r2, [r1, #0]
 8004a1e:	441a      	add	r2, r3
 8004a20:	700a      	strb	r2, [r1, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, MPU9250_ADDRESS, 0x3B, I2C_MEMADD_SIZE_8BIT, readMPU9250Buffer, 21);
 8004a22:	2215      	movs	r2, #21
 8004a24:	9201      	str	r2, [sp, #4]
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <EXTI15_10_IRQHandler+0x5c>)
 8004a28:	9200      	str	r2, [sp, #0]
 8004a2a:	21d0      	movs	r1, #208	; 0xd0
 8004a2c:	223b      	movs	r2, #59	; 0x3b
 8004a2e:	f001 fb31 	bl	8006094 <HAL_I2C_Mem_Read_IT>
		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a36:	b003      	add	sp, #12
 8004a38:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a3c:	f000 bf52 	b.w	80058e4 <HAL_GPIO_EXTI_IRQHandler>
 8004a40:	40013c00 	.word	0x40013c00
 8004a44:	200041fc 	.word	0x200041fc
 8004a48:	20008720 	.word	0x20008720
 8004a4c:	2000009c 	.word	0x2000009c
 8004a50:	20004648 	.word	0x20004648
 8004a54:	20008958 	.word	0x20008958

08004a58 <UART4_IRQHandler>:
  /* USER CODE BEGIN UART4_IRQn 0 */
//	if (__HAL_UART_GET_IT_SOURCE(&huart4, UART_IT_ERR)) {
//		HAL_UART_Receive_IT(&huart4, receiveBuffer, UARTRECEIVEDBUFFERSIZE);
//	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <UART4_IRQHandler+0x8>)
 8004a5a:	f003 b807 	b.w	8007a6c <HAL_UART_IRQHandler>
 8004a5e:	bf00      	nop
 8004a60:	20008908 	.word	0x20008908

08004a64 <UART5_IRQHandler>:
*/
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <UART5_IRQHandler+0x8>)
 8004a66:	f003 b801 	b.w	8007a6c <HAL_UART_IRQHandler>
 8004a6a:	bf00      	nop
 8004a6c:	20004750 	.word	0x20004750

08004a70 <TIM6_DAC_IRQHandler>:
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	readyToDoTransmit = SET;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <TIM6_DAC_IRQHandler+0xc>)
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a72:	4803      	ldr	r0, [pc, #12]	; (8004a80 <TIM6_DAC_IRQHandler+0x10>)
	readyToDoTransmit = SET;
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim6);
 8004a78:	f002 bb13 	b.w	80070a2 <HAL_TIM_IRQHandler>
 8004a7c:	20000090 	.word	0x20000090
 8004a80:	20008780 	.word	0x20008780

08004a84 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <USART6_IRQHandler+0x8>)
 8004a86:	f002 bff1 	b.w	8007a6c <HAL_UART_IRQHandler>
 8004a8a:	bf00      	nop
 8004a8c:	200088b4 	.word	0x200088b4

08004a90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a90:	490f      	ldr	r1, [pc, #60]	; (8004ad0 <SystemInit+0x40>)
 8004a92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <SystemInit+0x44>)
 8004aa0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004aa2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004aaa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <SystemInit+0x48>)
 8004aba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ac4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aca:	608b      	str	r3, [r1, #8]
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000ed00 	.word	0xe000ed00
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	24003010 	.word	0x24003010

08004adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004adc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_InitTick+0x24>)
{
 8004ae0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae8:	fbb0 f0f3 	udiv	r0, r0, r3
 8004aec:	f000 fc4a 	bl	8005384 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af0:	2200      	movs	r2, #0
 8004af2:	4621      	mov	r1, r4
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f000 fc04 	bl	8005304 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004afc:	2000      	movs	r0, #0
 8004afe:	bd10      	pop	{r4, pc}
 8004b00:	20000004 	.word	0x20000004

08004b04 <HAL_Init>:
{
 8004b04:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_Init+0x30>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b20:	2003      	movs	r0, #3
 8004b22:	f000 fbdd 	bl	80052e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7ff ffd8 	bl	8004adc <HAL_InitTick>
  HAL_MspInit();
 8004b2c:	f7ff fcc7 	bl	80044be <HAL_MspInit>
}
 8004b30:	2000      	movs	r0, #0
 8004b32:	bd08      	pop	{r3, pc}
 8004b34:	40023c00 	.word	0x40023c00

08004b38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004b38:	4a02      	ldr	r2, [pc, #8]	; (8004b44 <HAL_IncTick+0xc>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000ca38 	.word	0x2000ca38

08004b48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b48:	4b01      	ldr	r3, [pc, #4]	; (8004b50 <HAL_GetTick+0x8>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	2000ca38 	.word	0x2000ca38

08004b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8004b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b56:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff fff6 	bl	8004b48 <HAL_GetTick>
  uint32_t wait = Delay;
 8004b5c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b5e:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004b60:	4605      	mov	r5, r0
  {
     wait++;
 8004b62:	bf18      	it	ne
 8004b64:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b66:	f7ff ffef 	bl	8004b48 <HAL_GetTick>
 8004b6a:	1b40      	subs	r0, r0, r5
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d3fa      	bcc.n	8004b66 <HAL_Delay+0x12>
  {
  }
}
 8004b70:	b003      	add	sp, #12
 8004b72:	bd30      	pop	{r4, r5, pc}

08004b74 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b74:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b76:	4604      	mov	r4, r0
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	f000 809f 	beq.w	8004cbc <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b80:	b923      	cbnz	r3, 8004b8c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b82:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b88:	f7ff fcca 	bl	8004520 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b8e:	06db      	lsls	r3, r3, #27
 8004b90:	f100 8092 	bmi.w	8004cb8 <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b9a:	f023 0302 	bic.w	r3, r3, #2
 8004b9e:	f043 0302 	orr.w	r3, r3, #2
 8004ba2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ba4:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <HAL_ADC_Init+0x14c>)
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	6861      	ldr	r1, [r4, #4]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bb6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bb8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bca:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bcc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bce:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bd2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bda:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bdc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bea:	4936      	ldr	r1, [pc, #216]	; (8004cc4 <HAL_ADC_Init+0x150>)
 8004bec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004bee:	428a      	cmp	r2, r1
 8004bf0:	d056      	beq.n	8004ca0 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004bf8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c00:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c0e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c10:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004c12:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c14:	f022 0202 	bic.w	r2, r2, #2
 8004c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c22:	6a22      	ldr	r2, [r4, #32]
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	d043      	beq.n	8004cb0 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c36:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004c3c:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c40:	fab2 f182 	clz	r1, r2
 8004c44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c46:	6858      	ldr	r0, [r3, #4]
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	408a      	lsls	r2, r1
 8004c4c:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c52:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	3901      	subs	r1, #1
 8004c5e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c64:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004c66:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004c74:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c76:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c78:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c80:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004c82:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c84:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004c88:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004c8a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8004c9e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cae:	e7ae      	b.n	8004c0e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb6:	e7ca      	b.n	8004c4e <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7ed      	b.n	8004c98 <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8004cbc:	2001      	movs	r0, #1
}
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	40012300 	.word	0x40012300
 8004cc4:	0f000001 	.word	0x0f000001

08004cc8 <HAL_ADC_Start>:
{
 8004cc8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004cce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d04e      	beq.n	8004d74 <HAL_ADC_Start+0xac>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	07d1      	lsls	r1, r2, #31
 8004ce2:	d505      	bpl.n	8004cf0 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	07d2      	lsls	r2, r2, #31
 8004ce8:	d414      	bmi.n	8004d14 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8004cea:	2000      	movs	r0, #0
}
 8004cec:	b002      	add	sp, #8
 8004cee:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8004cf0:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cf2:	4921      	ldr	r1, [pc, #132]	; (8004d78 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_ADC_Start+0xb4>)
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8004d02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8004d06:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8004d08:	9a01      	ldr	r2, [sp, #4]
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d0ea      	beq.n	8004ce4 <HAL_ADC_Start+0x1c>
      counter--;
 8004d0e:	9a01      	ldr	r2, [sp, #4]
 8004d10:	3a01      	subs	r2, #1
 8004d12:	e7f8      	b.n	8004d06 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8004d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d22:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d28:	bf41      	itttt	mi
 8004d2a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8004d2c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8004d30:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8004d34:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d3c:	bf1c      	itt	ne
 8004d3e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8004d40:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004d44:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8004d46:	2200      	movs	r2, #0
 8004d48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d50:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <HAL_ADC_Start+0xb8>)
 8004d54:	6852      	ldr	r2, [r2, #4]
 8004d56:	06d2      	lsls	r2, r2, #27
 8004d58:	d108      	bne.n	8004d6c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d5a:	6898      	ldr	r0, [r3, #8]
 8004d5c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004d60:	d1c3      	bne.n	8004cea <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	e7bf      	b.n	8004cec <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d6c:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <HAL_ADC_Start+0xbc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d1bb      	bne.n	8004cea <HAL_ADC_Start+0x22>
 8004d72:	e7f2      	b.n	8004d5a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8004d74:	2002      	movs	r0, #2
 8004d76:	e7b9      	b.n	8004cec <HAL_ADC_Start+0x24>
 8004d78:	000f4240 	.word	0x000f4240
 8004d7c:	20000004 	.word	0x20000004
 8004d80:	40012300 	.word	0x40012300
 8004d84:	40012000 	.word	0x40012000

08004d88 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004d88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d017      	beq.n	8004dc0 <HAL_ADC_Stop+0x38>
 8004d90:	2301      	movs	r3, #1
 8004d92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8004d96:	6803      	ldr	r3, [r0, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	07db      	lsls	r3, r3, #31
 8004da4:	d407      	bmi.n	8004db6 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8004da6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004db6:	2300      	movs	r3, #0
 8004db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8004dc0:	2002      	movs	r0, #2
}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004dc4:	6803      	ldr	r3, [r0, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
{
 8004dc8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004dca:	0556      	lsls	r6, r2, #21
{
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004dd0:	d50b      	bpl.n	8004dea <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004dd2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004dd4:	05d8      	lsls	r0, r3, #23
 8004dd6:	d508      	bpl.n	8004dea <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dda:	f043 0320 	orr.w	r3, r3, #32
 8004dde:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8004de0:	2300      	movs	r3, #0
 8004de2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004de6:	2001      	movs	r0, #1
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8004dea:	f7ff fead 	bl	8004b48 <HAL_GetTick>
 8004dee:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	0792      	lsls	r2, r2, #30
 8004df6:	d50c      	bpl.n	8004e12 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004df8:	f06f 0212 	mvn.w	r2, #18
 8004dfc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e04:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004e0c:	d013      	beq.n	8004e36 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8004e0e:	2000      	movs	r0, #0
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004e12:	1c69      	adds	r1, r5, #1
 8004e14:	d0ed      	beq.n	8004df2 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004e16:	b945      	cbnz	r5, 8004e2a <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8004e20:	2300      	movs	r3, #0
 8004e22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004e26:	2003      	movs	r0, #3
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004e2a:	f7ff fe8d 	bl	8004b48 <HAL_GetTick>
 8004e2e:	1b80      	subs	r0, r0, r6
 8004e30:	4285      	cmp	r5, r0
 8004e32:	d2dd      	bcs.n	8004df0 <HAL_ADC_PollForConversion+0x2c>
 8004e34:	e7f0      	b.n	8004e18 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e36:	69a2      	ldr	r2, [r4, #24]
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d1e8      	bne.n	8004e0e <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e3e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004e42:	d002      	beq.n	8004e4a <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e44:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e46:	055b      	lsls	r3, r3, #21
 8004e48:	d4e1      	bmi.n	8004e0e <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e50:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e52:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e54:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8004e58:	d1d9      	bne.n	8004e0e <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004e62:	bd70      	pop	{r4, r5, r6, pc}

08004e64 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004e64:	6803      	ldr	r3, [r0, #0]
 8004e66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8004e68:	4770      	bx	lr

08004e6a <HAL_ADC_ConvCpltCallback>:
 8004e6a:	4770      	bx	lr

08004e6c <HAL_ADC_LevelOutOfWindowCallback>:
 8004e6c:	4770      	bx	lr

08004e6e <HAL_ADC_ErrorCallback>:
{
 8004e6e:	4770      	bx	lr

08004e70 <HAL_ADC_IRQHandler>:
{
 8004e70:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004e72:	6803      	ldr	r3, [r0, #0]
 8004e74:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004e76:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004e78:	078d      	lsls	r5, r1, #30
{
 8004e7a:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8004e7c:	d52b      	bpl.n	8004ed6 <HAL_ADC_IRQHandler+0x66>
 8004e7e:	0690      	lsls	r0, r2, #26
 8004e80:	d529      	bpl.n	8004ed6 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e84:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e86:	bf5e      	ittt	pl
 8004e88:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8004e8a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8004e8e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004e96:	d117      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x58>
 8004e98:	69a2      	ldr	r2, [r4, #24]
 8004e9a:	b9aa      	cbnz	r2, 8004ec8 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e9e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004ea2:	d002      	beq.n	8004eaa <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ea4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ea6:	0552      	lsls	r2, r2, #21
 8004ea8:	d40e      	bmi.n	8004ec8 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	f022 0220 	bic.w	r2, r2, #32
 8004eb0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb8:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ebc:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ebe:	bf5e      	ittt	pl
 8004ec0:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8004ec2:	f043 0301 	orrpl.w	r3, r3, #1
 8004ec6:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffce 	bl	8004e6a <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f06f 0212 	mvn.w	r2, #18
 8004ed4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004eda:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004edc:	074d      	lsls	r5, r1, #29
 8004ede:	d532      	bpl.n	8004f46 <HAL_ADC_IRQHandler+0xd6>
 8004ee0:	0610      	lsls	r0, r2, #24
 8004ee2:	d530      	bpl.n	8004f46 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ee4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ee6:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ee8:	bf5e      	ittt	pl
 8004eea:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8004eec:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8004ef0:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004ef8:	d11e      	bne.n	8004f38 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004efc:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004f00:	d002      	beq.n	8004f08 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004f02:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004f04:	0552      	lsls	r2, r2, #21
 8004f06:	d417      	bmi.n	8004f38 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f08:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004f0a:	0555      	lsls	r5, r2, #21
 8004f0c:	d414      	bmi.n	8004f38 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004f0e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f10:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004f14:	d110      	bne.n	8004f38 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004f16:	69a2      	ldr	r2, [r4, #24]
 8004f18:	b972      	cbnz	r2, 8004f38 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f20:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f28:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f2c:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f2e:	bf5e      	ittt	pl
 8004f30:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8004f32:	f043 0301 	orrpl.w	r3, r3, #1
 8004f36:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f8c3 	bl	80050c4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f06f 020c 	mvn.w	r2, #12
 8004f44:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004f4a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004f4c:	07c9      	lsls	r1, r1, #31
 8004f4e:	d50f      	bpl.n	8004f70 <HAL_ADC_IRQHandler+0x100>
 8004f50:	0655      	lsls	r5, r2, #25
 8004f52:	d50d      	bpl.n	8004f70 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	07d8      	lsls	r0, r3, #31
 8004f58:	d50a      	bpl.n	8004f70 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f60:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff ff82 	bl	8004e6c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	f06f 0201 	mvn.w	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004f74:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004f76:	0689      	lsls	r1, r1, #26
 8004f78:	d50d      	bpl.n	8004f96 <HAL_ADC_IRQHandler+0x126>
 8004f7a:	0152      	lsls	r2, r2, #5
 8004f7c:	d50b      	bpl.n	8004f96 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f80:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f84:	f042 0202 	orr.w	r2, r2, #2
 8004f88:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8004f8a:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f8c:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8004f8e:	f7ff ff6e 	bl	8004e6e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	601d      	str	r5, [r3, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}

08004f98 <HAL_ADC_ConfigChannel>:
{
 8004f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004f9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	f000 8083 	beq.w	80050ae <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fa8:	680d      	ldr	r5, [r1, #0]
 8004faa:	6804      	ldr	r4, [r0, #0]
 8004fac:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8004fae:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fb0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004fb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8004fb6:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fb8:	d92a      	bls.n	8005010 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fba:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004fbe:	68e7      	ldr	r7, [r4, #12]
 8004fc0:	3b1e      	subs	r3, #30
 8004fc2:	f04f 0e07 	mov.w	lr, #7
 8004fc6:	fa0e fe03 	lsl.w	lr, lr, r3
 8004fca:	ea27 070e 	bic.w	r7, r7, lr
 8004fce:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fd0:	68e7      	ldr	r7, [r4, #12]
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	433b      	orrs	r3, r7
 8004fd8:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8004fda:	684a      	ldr	r2, [r1, #4]
 8004fdc:	2a06      	cmp	r2, #6
 8004fde:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8004fe2:	d825      	bhi.n	8005030 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fe4:	4413      	add	r3, r2
 8004fe6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004fe8:	1f59      	subs	r1, r3, #5
 8004fea:	231f      	movs	r3, #31
 8004fec:	408b      	lsls	r3, r1
 8004fee:	ea27 0303 	bic.w	r3, r7, r3
 8004ff2:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ff4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ff6:	fa06 f101 	lsl.w	r1, r6, r1
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_ADC_ConfigChannel+0x11c>)
 8005000:	429c      	cmp	r4, r3
 8005002:	d034      	beq.n	800506e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8005004:	2300      	movs	r3, #0
 8005006:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800500a:	4618      	mov	r0, r3
}
 800500c:	b003      	add	sp, #12
 800500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005010:	6927      	ldr	r7, [r4, #16]
 8005012:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005016:	f04f 0e07 	mov.w	lr, #7
 800501a:	fa0e fe03 	lsl.w	lr, lr, r3
 800501e:	ea27 070e 	bic.w	r7, r7, lr
 8005022:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005024:	6927      	ldr	r7, [r4, #16]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	433b      	orrs	r3, r7
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	e7d4      	b.n	8004fda <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8005030:	2a0c      	cmp	r2, #12
 8005032:	d80e      	bhi.n	8005052 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005034:	4413      	add	r3, r2
 8005036:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005038:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800503c:	231f      	movs	r3, #31
 800503e:	4093      	lsls	r3, r2
 8005040:	ea21 0303 	bic.w	r3, r1, r3
 8005044:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005048:	fa06 f202 	lsl.w	r2, r6, r2
 800504c:	431a      	orrs	r2, r3
 800504e:	6322      	str	r2, [r4, #48]	; 0x30
 8005050:	e7d5      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005052:	4413      	add	r3, r2
 8005054:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005056:	3b41      	subs	r3, #65	; 0x41
 8005058:	221f      	movs	r2, #31
 800505a:	409a      	lsls	r2, r3
 800505c:	ea21 0202 	bic.w	r2, r1, r2
 8005060:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005064:	fa06 f103 	lsl.w	r1, r6, r3
 8005068:	4311      	orrs	r1, r2
 800506a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800506c:	e7c7      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800506e:	2d12      	cmp	r5, #18
 8005070:	d104      	bne.n	800507c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005072:	4a11      	ldr	r2, [pc, #68]	; (80050b8 <HAL_ADC_ConfigChannel+0x120>)
 8005074:	6853      	ldr	r3, [r2, #4]
 8005076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800507a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800507c:	f1a5 0310 	sub.w	r3, r5, #16
 8005080:	2b01      	cmp	r3, #1
 8005082:	d8bf      	bhi.n	8005004 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005084:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_ADC_ConfigChannel+0x120>)
 8005086:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005088:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800508a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800508e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005090:	d1b8      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_ADC_ConfigChannel+0x124>)
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <HAL_ADC_ConfigChannel+0x128>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fbb3 f2f2 	udiv	r2, r3, r2
 800509c:	230a      	movs	r3, #10
 800509e:	4353      	muls	r3, r2
        counter--;
 80050a0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ad      	beq.n	8005004 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	e7f8      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80050ae:	2002      	movs	r0, #2
 80050b0:	e7ac      	b.n	800500c <HAL_ADC_ConfigChannel+0x74>
 80050b2:	bf00      	nop
 80050b4:	40012000 	.word	0x40012000
 80050b8:	40012300 	.word	0x40012300
 80050bc:	20000004 	.word	0x20000004
 80050c0:	000f4240 	.word	0x000f4240

080050c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80050c4:	4770      	bx	lr

080050c6 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80050c6:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 80050c8:	4604      	mov	r4, r0
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d072      	beq.n	80051b4 <HAL_CAN_Init+0xee>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 80050ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050d6:	b91b      	cbnz	r3, 80050e0 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 80050d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 80050dc:	f7ff fa42 	bl	8004564 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 80050e0:	2302      	movs	r3, #2
 80050e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	f022 0202 	bic.w	r2, r2, #2
 80050ee:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80050f8:	f7ff fd26 	bl	8004b48 <HAL_GetTick>
 80050fc:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	685d      	ldr	r5, [r3, #4]
 8005102:	f015 0501 	ands.w	r5, r5, #1
 8005106:	d057      	beq.n	80051b8 <HAL_CAN_Init+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	07d1      	lsls	r1, r2, #31
 800510c:	d54f      	bpl.n	80051ae <HAL_CAN_Init+0xe8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 800510e:	69a2      	ldr	r2, [r4, #24]
 8005110:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	bf0c      	ite	eq
 8005116:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800511a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800511e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8005120:	69e2      	ldr	r2, [r4, #28]
 8005122:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	bf0c      	ite	eq
 8005128:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800512c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8005130:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8005132:	6a22      	ldr	r2, [r4, #32]
 8005134:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	bf0c      	ite	eq
 800513a:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 800513e:	f022 0220 	bicne.w	r2, r2, #32
 8005142:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8005144:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005146:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	bf0c      	ite	eq
 800514c:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8005150:	f022 0210 	bicne.w	r2, r2, #16
 8005154:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8005156:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005158:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	bf0c      	ite	eq
 800515e:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8005162:	f022 0208 	bicne.w	r2, r2, #8
 8005166:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8005168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800516a:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	bf0c      	ite	eq
 8005170:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8005174:	f022 0204 	bicne.w	r2, r2, #4
 8005178:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800517a:	68e1      	ldr	r1, [r4, #12]
 800517c:	68a2      	ldr	r2, [r4, #8]
 800517e:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 8005184:	6961      	ldr	r1, [r4, #20]
 8005186:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS2) | \
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 800518c:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800518e:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005198:	f7ff fcd6 	bl	8004b48 <HAL_GetTick>
 800519c:	4605      	mov	r5, r0

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	07d2      	lsls	r2, r2, #31
 80051a4:	d413      	bmi.n	80051ce <HAL_CAN_Init+0x108>
       return HAL_TIMEOUT;
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80051a6:	6858      	ldr	r0, [r3, #4]
 80051a8:	f010 0001 	ands.w	r0, r0, #1
 80051ac:	d01b      	beq.n	80051e6 <HAL_CAN_Init+0x120>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 80051ae:	2304      	movs	r3, #4
 80051b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 80051b4:	2001      	movs	r0, #1
  }
}
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80051b8:	f7ff fcc6 	bl	8004b48 <HAL_GetTick>
 80051bc:	1b80      	subs	r0, r0, r6
 80051be:	280a      	cmp	r0, #10
 80051c0:	d99d      	bls.n	80050fe <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80051c2:	2003      	movs	r0, #3
 80051c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 80051c8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80051ce:	f7ff fcbb 	bl	8004b48 <HAL_GetTick>
 80051d2:	1b40      	subs	r0, r0, r5
 80051d4:	280a      	cmp	r0, #10
 80051d6:	d9e2      	bls.n	800519e <HAL_CAN_Init+0xd8>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 80051d8:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 80051da:	2300      	movs	r3, #0
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 80051dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       __HAL_UNLOCK(hcan);
 80051e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 80051e4:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 80051e6:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80051e8:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 80051ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80051ee:	bd70      	pop	{r4, r5, r6, pc}

080051f0 <HAL_CAN_Transmit_IT>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80051f0:	6802      	ldr	r2, [r0, #0]
 80051f2:	6893      	ldr	r3, [r2, #8]
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80051f6:	015e      	lsls	r6, r3, #5
 80051f8:	d405      	bmi.n	8005206 <HAL_CAN_Transmit_IT+0x16>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80051fa:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80051fc:	011d      	lsls	r5, r3, #4
 80051fe:	d402      	bmi.n	8005206 <HAL_CAN_Transmit_IT+0x16>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8005200:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8005202:	00dc      	lsls	r4, r3, #3
 8005204:	d565      	bpl.n	80052d2 <HAL_CAN_Transmit_IT+0xe2>
  {
    /* Process Locked */
    __HAL_LOCK(hcan);
 8005206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800520a:	2b01      	cmp	r3, #1
 800520c:	d066      	beq.n	80052dc <HAL_CAN_Transmit_IT+0xec>
 800520e:	2301      	movs	r3, #1
 8005210:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Select one empty transmit mailbox */
    if((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8005214:	6893      	ldr	r3, [r2, #8]
 8005216:	015b      	lsls	r3, r3, #5
 8005218:	d44e      	bmi.n	80052b8 <HAL_CAN_Transmit_IT+0xc8>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 800521a:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 800521c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005220:	bf14      	ite	ne
 8005222:	2101      	movne	r1, #1
 8005224:	2102      	moveq	r1, #2
 8005226:	0109      	lsls	r1, r1, #4
 8005228:	1853      	adds	r3, r2, r1
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800522a:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 800522e:	f004 0401 	and.w	r4, r4, #1
 8005232:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 8005236:	6b04      	ldr	r4, [r0, #48]	; 0x30
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8005238:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 800523c:	68a5      	ldr	r5, [r4, #8]
 800523e:	68e7      	ldr	r7, [r4, #12]
 8005240:	2d00      	cmp	r5, #0
 8005242:	d13b      	bne.n	80052bc <HAL_CAN_Transmit_IT+0xcc>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	ea47 5545 	orr.w	r5, r7, r5, lsl #21
                                                hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 800524a:	4335      	orrs	r5, r6
 800524c:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                hcan->pTxMsg->IDE | \
                                                hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8005250:	6925      	ldr	r5, [r4, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8005252:	f8d3 6184 	ldr.w	r6, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8005256:	f005 050f 	and.w	r5, r5, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800525a:	f026 060f 	bic.w	r6, r6, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800525e:	6125      	str	r5, [r4, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8005260:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8005264:	f8d3 6184 	ldr.w	r6, [r3, #388]	; 0x184
 8005268:	4335      	orrs	r5, r6
 800526a:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184

    /* Set up the data field */
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) |
 800526e:	4411      	add	r1, r2
                                           ((uint32_t)hcan->pTxMsg->Data[2U] << 16U) |
                                           ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 8005270:	6965      	ldr	r5, [r4, #20]
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) |
 8005272:	f8c1 5188 	str.w	r5, [r1, #392]	; 0x188
                                           ((uint32_t)hcan->pTxMsg->Data[0U]));
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) |
                                           ((uint32_t)hcan->pTxMsg->Data[6U] << 16U) |
                                           ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8005276:	69a4      	ldr	r4, [r4, #24]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) |
 8005278:	f8c1 418c 	str.w	r4, [r1, #396]	; 0x18c
                                           ((uint32_t)hcan->pTxMsg->Data[4U]));

    /* Change CAN state */
    switch(hcan->State)
 800527c:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
 8005280:	b2c9      	uxtb	r1, r1
 8005282:	2932      	cmp	r1, #50	; 0x32
 8005284:	d01f      	beq.n	80052c6 <HAL_CAN_Transmit_IT+0xd6>
 8005286:	2962      	cmp	r1, #98	; 0x62
 8005288:	d01f      	beq.n	80052ca <HAL_CAN_Transmit_IT+0xda>
 800528a:	2922      	cmp	r1, #34	; 0x22
 800528c:	d11f      	bne.n	80052ce <HAL_CAN_Transmit_IT+0xde>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800528e:	2142      	movs	r1, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8005290:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
          break;
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005294:	2100      	movs	r1, #0
 8005296:	6401      	str	r1, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hcan);
 8005298:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d

    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 800529c:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80052a0:	f040 0001 	orr.w	r0, r0, #1
 80052a4:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180

    /* Enable Error warning, Error passive, Bus-off,
       Last error and Error Interrupts */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80052a8:	6953      	ldr	r3, [r2, #20]
 80052aa:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6153      	str	r3, [r2, #20]

    /* Return function status */
    return HAL_ERROR;
  }
  
  return HAL_OK;
 80052b4:	4608      	mov	r0, r1
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      transmitmailbox = CAN_TXMAILBOX_0;
 80052b8:	2100      	movs	r1, #0
 80052ba:	e7b4      	b.n	8005226 <HAL_CAN_Transmit_IT+0x36>
                                                hcan->pTxMsg->IDE | \
 80052bc:	433d      	orrs	r5, r7
 80052be:	6867      	ldr	r7, [r4, #4]
 80052c0:	ea45 05c7 	orr.w	r5, r5, r7, lsl #3
 80052c4:	e7c1      	b.n	800524a <HAL_CAN_Transmit_IT+0x5a>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80052c6:	2152      	movs	r1, #82	; 0x52
 80052c8:	e7e2      	b.n	8005290 <HAL_CAN_Transmit_IT+0xa0>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80052ca:	2172      	movs	r1, #114	; 0x72
 80052cc:	e7e0      	b.n	8005290 <HAL_CAN_Transmit_IT+0xa0>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80052ce:	2112      	movs	r1, #18
 80052d0:	e7de      	b.n	8005290 <HAL_CAN_Transmit_IT+0xa0>
    hcan->State = HAL_CAN_STATE_ERROR; 
 80052d2:	2304      	movs	r3, #4
 80052d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80052d8:	2001      	movs	r0, #1
 80052da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hcan);
 80052dc:	2002      	movs	r0, #2
}
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e0:	4a07      	ldr	r2, [pc, #28]	; (8005300 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80052e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80052f0:	0200      	lsls	r0, r0, #8
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80052fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80052fc:	60d3      	str	r3, [r2, #12]
 80052fe:	4770      	bx	lr
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005304:	4b17      	ldr	r3, [pc, #92]	; (8005364 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005306:	b530      	push	{r4, r5, lr}
 8005308:	68dc      	ldr	r4, [r3, #12]
 800530a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800530e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005312:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	2b04      	cmp	r3, #4
 8005316:	bf28      	it	cs
 8005318:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800531c:	f04f 0501 	mov.w	r5, #1
 8005320:	fa05 f303 	lsl.w	r3, r5, r3
 8005324:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005328:	bf8c      	ite	hi
 800532a:	3c03      	subhi	r4, #3
 800532c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532e:	4019      	ands	r1, r3
 8005330:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005332:	fa05 f404 	lsl.w	r4, r5, r4
 8005336:	3c01      	subs	r4, #1
 8005338:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800533a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	ea42 0201 	orr.w	r2, r2, r1
 8005340:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	bfaf      	iteee	ge
 8005346:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534a:	f000 000f 	andlt.w	r0, r0, #15
 800534e:	4b06      	ldrlt	r3, [pc, #24]	; (8005368 <HAL_NVIC_SetPriority+0x64>)
 8005350:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005352:	bfa5      	ittet	ge
 8005354:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8005358:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8005360:	bd30      	pop	{r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00
 8005368:	e000ed14 	.word	0xe000ed14

0800536c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800536c:	0942      	lsrs	r2, r0, #5
 800536e:	2301      	movs	r3, #1
 8005370:	f000 001f 	and.w	r0, r0, #31
 8005374:	fa03 f000 	lsl.w	r0, r3, r0
 8005378:	4b01      	ldr	r3, [pc, #4]	; (8005380 <HAL_NVIC_EnableIRQ+0x14>)
 800537a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800537e:	4770      	bx	lr
 8005380:	e000e100 	.word	0xe000e100

08005384 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005384:	3801      	subs	r0, #1
 8005386:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800538a:	d20a      	bcs.n	80053a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538e:	4a07      	ldr	r2, [pc, #28]	; (80053ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005390:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005392:	21f0      	movs	r1, #240	; 0xf0
 8005394:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005398:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800539c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80053a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	e000e010 	.word	0xe000e010
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80053b2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80053b4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80053b6:	bf0c      	ite	eq
 80053b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80053bc:	f022 0204 	bicne.w	r2, r2, #4
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	4770      	bx	lr
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80053c8:	4770      	bx	lr

080053ca <HAL_SYSTICK_IRQHandler>:
{
 80053ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80053cc:	f7ff fffc 	bl	80053c8 <HAL_SYSTICK_Callback>
 80053d0:	bd08      	pop	{r3, pc}
	...

080053d4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053d4:	6803      	ldr	r3, [r0, #0]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053dc:	f023 0303 	bic.w	r3, r3, #3
 80053e0:	2118      	movs	r1, #24
 80053e2:	3a10      	subs	r2, #16
 80053e4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053e8:	4904      	ldr	r1, [pc, #16]	; (80053fc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80053ea:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053ec:	bf88      	it	hi
 80053ee:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053f0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053f2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053f4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80053f6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	0800a2e9 	.word	0x0800a2e9

08005400 <HAL_DMA_Init>:
{
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005404:	f7ff fba0 	bl	8004b48 <HAL_GetTick>
 8005408:	4605      	mov	r5, r0
  if(hdma == NULL)
 800540a:	2c00      	cmp	r4, #0
 800540c:	d071      	beq.n	80054f2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800540e:	2300      	movs	r3, #0
 8005410:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005414:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800541c:	6813      	ldr	r3, [r2, #0]
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	07d8      	lsls	r0, r3, #31
 800542a:	d43c      	bmi.n	80054a6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800542c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800542e:	4d32      	ldr	r5, [pc, #200]	; (80054f8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005430:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005434:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	4313      	orrs	r3, r2
 800543a:	68e2      	ldr	r2, [r4, #12]
 800543c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800543e:	6922      	ldr	r2, [r4, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	6962      	ldr	r2, [r4, #20]
 8005444:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005446:	69e2      	ldr	r2, [r4, #28]
 8005448:	4303      	orrs	r3, r0
 800544a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800544c:	6a22      	ldr	r2, [r4, #32]
 800544e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005452:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005454:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005458:	bf01      	itttt	eq
 800545a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800545c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800545e:	4335      	orreq	r5, r6
 8005460:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8005462:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005464:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005466:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005468:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800546c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005470:	d10b      	bne.n	800548a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8005472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005474:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005476:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005478:	b13d      	cbz	r5, 800548a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800547a:	b9f8      	cbnz	r0, 80054bc <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800547c:	2a01      	cmp	r2, #1
 800547e:	d02d      	beq.n	80054dc <HAL_DMA_Init+0xdc>
 8005480:	d301      	bcc.n	8005486 <HAL_DMA_Init+0x86>
 8005482:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005484:	d101      	bne.n	800548a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005486:	01ea      	lsls	r2, r5, #7
 8005488:	d42b      	bmi.n	80054e2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800548a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff ffa1 	bl	80053d4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005494:	233f      	movs	r3, #63	; 0x3f
 8005496:	4093      	lsls	r3, r2
 8005498:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800549c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80054a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054a6:	f7ff fb4f 	bl	8004b48 <HAL_GetTick>
 80054aa:	1b40      	subs	r0, r0, r5
 80054ac:	2805      	cmp	r0, #5
 80054ae:	d9b9      	bls.n	8005424 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054b0:	2320      	movs	r3, #32
 80054b2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054b4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80054b6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054bc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80054c0:	d113      	bne.n	80054ea <HAL_DMA_Init+0xea>
    switch (tmp)
 80054c2:	2a03      	cmp	r2, #3
 80054c4:	d8e1      	bhi.n	800548a <HAL_DMA_Init+0x8a>
 80054c6:	a001      	add	r0, pc, #4	; (adr r0, 80054cc <HAL_DMA_Init+0xcc>)
 80054c8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80054cc:	080054e3 	.word	0x080054e3
 80054d0:	08005487 	.word	0x08005487
 80054d4:	080054e3 	.word	0x080054e3
 80054d8:	080054dd 	.word	0x080054dd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054dc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80054e0:	d1d3      	bne.n	800548a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054e2:	2340      	movs	r3, #64	; 0x40
 80054e4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80054e6:	2001      	movs	r0, #1
 80054e8:	e7e5      	b.n	80054b6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80054ea:	2a02      	cmp	r2, #2
 80054ec:	d9f9      	bls.n	80054e2 <HAL_DMA_Init+0xe2>
 80054ee:	2a03      	cmp	r2, #3
 80054f0:	e7c8      	b.n	8005484 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80054f2:	2001      	movs	r0, #1
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
 80054f6:	bf00      	nop
 80054f8:	f010803f 	.word	0xf010803f

080054fc <HAL_DMA_Start_IT>:
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80054fe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005502:	2c01      	cmp	r4, #1
 8005504:	d036      	beq.n	8005574 <HAL_DMA_Start_IT+0x78>
 8005506:	2401      	movs	r4, #1
 8005508:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800550c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005510:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8005512:	2c01      	cmp	r4, #1
 8005514:	f04f 0500 	mov.w	r5, #0
 8005518:	f04f 0402 	mov.w	r4, #2
 800551c:	d128      	bne.n	8005570 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800551e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005522:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005524:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800552c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800552e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005530:	6883      	ldr	r3, [r0, #8]
 8005532:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8005534:	bf0e      	itee	eq
 8005536:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005538:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800553a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800553c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800553e:	bf08      	it	eq
 8005540:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005542:	233f      	movs	r3, #63	; 0x3f
 8005544:	4093      	lsls	r3, r2
 8005546:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f043 0316 	orr.w	r3, r3, #22
 800554e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005556:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005558:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800555a:	b11b      	cbz	r3, 8005564 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	f043 0308 	orr.w	r3, r3, #8
 8005562:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2000      	movs	r0, #0
 800556e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8005570:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8005574:	2002      	movs	r0, #2
}
 8005576:	bd70      	pop	{r4, r5, r6, pc}

08005578 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005578:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800557c:	2b02      	cmp	r3, #2
 800557e:	d003      	beq.n	8005588 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005584:	2001      	movs	r0, #1
 8005586:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005588:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800558a:	2305      	movs	r3, #5
 800558c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005598:	2000      	movs	r0, #0
}
 800559a:	4770      	bx	lr

0800559c <HAL_DMA_IRQHandler>:
{
 800559c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055a2:	4b5a      	ldr	r3, [pc, #360]	; (800570c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80055a6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80055aa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ac:	2208      	movs	r2, #8
 80055ae:	409a      	lsls	r2, r3
 80055b0:	4216      	tst	r6, r2
{
 80055b2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055b4:	d00c      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055b6:	6801      	ldr	r1, [r0, #0]
 80055b8:	6808      	ldr	r0, [r1, #0]
 80055ba:	0740      	lsls	r0, r0, #29
 80055bc:	d508      	bpl.n	80055d0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055be:	6808      	ldr	r0, [r1, #0]
 80055c0:	f020 0004 	bic.w	r0, r0, #4
 80055c4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055c6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d0:	4a4f      	ldr	r2, [pc, #316]	; (8005710 <HAL_DMA_IRQHandler+0x174>)
 80055d2:	409a      	lsls	r2, r3
 80055d4:	4216      	tst	r6, r2
 80055d6:	d008      	beq.n	80055ea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	6949      	ldr	r1, [r1, #20]
 80055dc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055de:	bf41      	itttt	mi
 80055e0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055e2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80055e4:	f042 0202 	orrmi.w	r2, r2, #2
 80055e8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ea:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <HAL_DMA_IRQHandler+0x178>)
 80055ec:	409a      	lsls	r2, r3
 80055ee:	4216      	tst	r6, r2
 80055f0:	d008      	beq.n	8005604 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055f2:	6821      	ldr	r1, [r4, #0]
 80055f4:	6809      	ldr	r1, [r1, #0]
 80055f6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055f8:	bf41      	itttt	mi
 80055fa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055fc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80055fe:	f042 0204 	orrmi.w	r2, r2, #4
 8005602:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005604:	2210      	movs	r2, #16
 8005606:	409a      	lsls	r2, r3
 8005608:	4216      	tst	r6, r2
 800560a:	d010      	beq.n	800562e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	0709      	lsls	r1, r1, #28
 8005612:	d50c      	bpl.n	800562e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005614:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	0350      	lsls	r0, r2, #13
 800561a:	d535      	bpl.n	8005688 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0319      	lsls	r1, r3, #12
 8005620:	d401      	bmi.n	8005626 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8005622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005624:	e000      	b.n	8005628 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8005628:	b10b      	cbz	r3, 800562e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800562a:	4620      	mov	r0, r4
 800562c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800562e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005630:	2220      	movs	r2, #32
 8005632:	408a      	lsls	r2, r1
 8005634:	4216      	tst	r6, r2
 8005636:	d038      	beq.n	80056aa <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	06c6      	lsls	r6, r0, #27
 800563e:	d534      	bpl.n	80056aa <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005640:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005642:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005646:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005648:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800564a:	d125      	bne.n	8005698 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800564c:	f022 0216 	bic.w	r2, r2, #22
 8005650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005652:	695a      	ldr	r2, [r3, #20]
 8005654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005658:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800565a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800565c:	b90a      	cbnz	r2, 8005662 <HAL_DMA_IRQHandler+0xc6>
 800565e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005660:	b11a      	cbz	r2, 800566a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	f022 0208 	bic.w	r2, r2, #8
 8005668:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800566a:	233f      	movs	r3, #63	; 0x3f
 800566c:	408b      	lsls	r3, r1
 800566e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8005670:	2300      	movs	r3, #0
 8005672:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005676:	2301      	movs	r3, #1
 8005678:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800567c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800567e:	b10b      	cbz	r3, 8005684 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8005680:	4620      	mov	r0, r4
 8005682:	4798      	blx	r3
}
 8005684:	b003      	add	sp, #12
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800568c:	bf5e      	ittt	pl
 800568e:	681a      	ldrpl	r2, [r3, #0]
 8005690:	f022 0208 	bicpl.w	r2, r2, #8
 8005694:	601a      	strpl	r2, [r3, #0]
 8005696:	e7c4      	b.n	8005622 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005698:	0350      	lsls	r0, r2, #13
 800569a:	d528      	bpl.n	80056ee <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0319      	lsls	r1, r3, #12
 80056a0:	d432      	bmi.n	8005708 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80056a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80056a4:	b10b      	cbz	r3, 80056aa <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80056a6:	4620      	mov	r0, r4
 80056a8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0e9      	beq.n	8005684 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056b2:	07da      	lsls	r2, r3, #31
 80056b4:	d519      	bpl.n	80056ea <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80056b6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80056b8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80056ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80056ca:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80056ce:	9b01      	ldr	r3, [sp, #4]
 80056d0:	3301      	adds	r3, #1
 80056d2:	429f      	cmp	r7, r3
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	d302      	bcc.n	80056de <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056d8:	6813      	ldr	r3, [r2, #0]
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d4f7      	bmi.n	80056ce <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80056de:	2300      	movs	r3, #0
 80056e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80056ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80056ec:	e7c7      	b.n	800567e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80056f4:	d108      	bne.n	8005708 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f6:	6819      	ldr	r1, [r3, #0]
 80056f8:	f021 0110 	bic.w	r1, r1, #16
 80056fc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80056fe:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8005700:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800570a:	e7cb      	b.n	80056a4 <HAL_DMA_IRQHandler+0x108>
 800570c:	20000004 	.word	0x20000004
 8005710:	00800001 	.word	0x00800001
 8005714:	00800004 	.word	0x00800004

08005718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005720:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80058d0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005724:	4a68      	ldr	r2, [pc, #416]	; (80058c8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005726:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80058d4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800572a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800572e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005732:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8005734:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005738:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800573c:	45b6      	cmp	lr, r6
 800573e:	f040 80ae 	bne.w	800589e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005742:	684c      	ldr	r4, [r1, #4]
 8005744:	f024 0710 	bic.w	r7, r4, #16
 8005748:	2f02      	cmp	r7, #2
 800574a:	d116      	bne.n	800577a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800574c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8005750:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005754:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005758:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800575c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005760:	f04f 0c0f 	mov.w	ip, #15
 8005764:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005768:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800576c:	690d      	ldr	r5, [r1, #16]
 800576e:	fa05 f50b 	lsl.w	r5, r5, fp
 8005772:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8005776:	f8ca 5020 	str.w	r5, [sl, #32]
 800577a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8005780:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005784:	fa05 f50a 	lsl.w	r5, r5, sl
 8005788:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800578a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800578e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005792:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005796:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005798:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800579e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a2:	d811      	bhi.n	80057c8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80057a4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057a6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057aa:	68cf      	ldr	r7, [r1, #12]
 80057ac:	fa07 fc0a 	lsl.w	ip, r7, sl
 80057b0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80057b4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80057b6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057bc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80057c0:	409f      	lsls	r7, r3
 80057c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80057c6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80057c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057cc:	688f      	ldr	r7, [r1, #8]
 80057ce:	fa07 f70a 	lsl.w	r7, r7, sl
 80057d2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80057d4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057d6:	00e5      	lsls	r5, r4, #3
 80057d8:	d561      	bpl.n	800589e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057da:	f04f 0b00 	mov.w	fp, #0
 80057de:	f8cd b00c 	str.w	fp, [sp, #12]
 80057e2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057e6:	4d39      	ldr	r5, [pc, #228]	; (80058cc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80057ec:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80057f0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80057f4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80057f8:	9703      	str	r7, [sp, #12]
 80057fa:	9f03      	ldr	r7, [sp, #12]
 80057fc:	f023 0703 	bic.w	r7, r3, #3
 8005800:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005804:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005808:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800580c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005810:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005814:	f04f 0e0f 	mov.w	lr, #15
 8005818:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800581c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800581e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005822:	d043      	beq.n	80058ac <HAL_GPIO_Init+0x194>
 8005824:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005828:	42a8      	cmp	r0, r5
 800582a:	d041      	beq.n	80058b0 <HAL_GPIO_Init+0x198>
 800582c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005830:	42a8      	cmp	r0, r5
 8005832:	d03f      	beq.n	80058b4 <HAL_GPIO_Init+0x19c>
 8005834:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005838:	42a8      	cmp	r0, r5
 800583a:	d03d      	beq.n	80058b8 <HAL_GPIO_Init+0x1a0>
 800583c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005840:	42a8      	cmp	r0, r5
 8005842:	d03b      	beq.n	80058bc <HAL_GPIO_Init+0x1a4>
 8005844:	4548      	cmp	r0, r9
 8005846:	d03b      	beq.n	80058c0 <HAL_GPIO_Init+0x1a8>
 8005848:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800584c:	42a8      	cmp	r0, r5
 800584e:	d039      	beq.n	80058c4 <HAL_GPIO_Init+0x1ac>
 8005850:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005854:	42a8      	cmp	r0, r5
 8005856:	bf14      	ite	ne
 8005858:	2508      	movne	r5, #8
 800585a:	2507      	moveq	r5, #7
 800585c:	fa05 f50c 	lsl.w	r5, r5, ip
 8005860:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005864:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8005866:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005868:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800586a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800586e:	bf0c      	ite	eq
 8005870:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8005872:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8005874:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8005876:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005878:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800587c:	bf0c      	ite	eq
 800587e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8005880:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8005882:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005884:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005886:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800588a:	bf0c      	ite	eq
 800588c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800588e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8005890:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8005892:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005894:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005896:	bf54      	ite	pl
 8005898:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800589a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800589c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800589e:	3301      	adds	r3, #1
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	f47f af44 	bne.w	800572e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80058a6:	b005      	add	sp, #20
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ac:	465d      	mov	r5, fp
 80058ae:	e7d5      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058b0:	2501      	movs	r5, #1
 80058b2:	e7d3      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058b4:	2502      	movs	r5, #2
 80058b6:	e7d1      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058b8:	2503      	movs	r5, #3
 80058ba:	e7cf      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058bc:	2504      	movs	r5, #4
 80058be:	e7cd      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058c0:	2505      	movs	r5, #5
 80058c2:	e7cb      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058c4:	2506      	movs	r5, #6
 80058c6:	e7c9      	b.n	800585c <HAL_GPIO_Init+0x144>
 80058c8:	40013c00 	.word	0x40013c00
 80058cc:	40020000 	.word	0x40020000
 80058d0:	40023800 	.word	0x40023800
 80058d4:	40021400 	.word	0x40021400

080058d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d8:	b10a      	cbz	r2, 80058de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058da:	6181      	str	r1, [r0, #24]
 80058dc:	4770      	bx	lr
 80058de:	0409      	lsls	r1, r1, #16
 80058e0:	e7fb      	b.n	80058da <HAL_GPIO_WritePin+0x2>

080058e2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058e2:	4770      	bx	lr

080058e4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80058e4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80058e8:	6959      	ldr	r1, [r3, #20]
 80058ea:	4201      	tst	r1, r0
 80058ec:	d002      	beq.n	80058f4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058ee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058f0:	f7ff fff7 	bl	80058e2 <HAL_GPIO_EXTI_Callback>
 80058f4:	bd08      	pop	{r3, pc}
 80058f6:	bf00      	nop
 80058f8:	40013c00 	.word	0x40013c00

080058fc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fc:	6802      	ldr	r2, [r0, #0]
 80058fe:	6953      	ldr	r3, [r2, #20]
 8005900:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005904:	d00d      	beq.n	8005922 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005906:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800590a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800590c:	2304      	movs	r3, #4
 800590e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8005910:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005916:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800591a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800591e:	2001      	movs	r0, #1
 8005920:	4770      	bx	lr
  }
  return HAL_OK;
 8005922:	4618      	mov	r0, r3
}
 8005924:	4770      	bx	lr

08005926 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	4617      	mov	r7, r2
 800592e:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005930:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8005934:	b28e      	uxth	r6, r1
 8005936:	6825      	ldr	r5, [r4, #0]
 8005938:	f1b8 0f01 	cmp.w	r8, #1
 800593c:	bf0c      	ite	eq
 800593e:	696b      	ldreq	r3, [r5, #20]
 8005940:	69ab      	ldrne	r3, [r5, #24]
 8005942:	ea36 0303 	bics.w	r3, r6, r3
 8005946:	bf14      	ite	ne
 8005948:	2001      	movne	r0, #1
 800594a:	2000      	moveq	r0, #0
 800594c:	b908      	cbnz	r0, 8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005952:	696b      	ldr	r3, [r5, #20]
 8005954:	055a      	lsls	r2, r3, #21
 8005956:	d512      	bpl.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800595e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005960:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005964:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005966:	2304      	movs	r3, #4
 8005968:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800596a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800596c:	2300      	movs	r3, #0
 800596e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8005970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8005974:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8005978:	2001      	movs	r0, #1
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800597e:	1c7b      	adds	r3, r7, #1
 8005980:	d0d9      	beq.n	8005936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005982:	b94f      	cbnz	r7, 8005998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005984:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8005986:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005988:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800598a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800598e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8005992:	2003      	movs	r0, #3
 8005994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005998:	f7ff f8d6 	bl	8004b48 <HAL_GetTick>
 800599c:	eba0 0009 	sub.w	r0, r0, r9
 80059a0:	4287      	cmp	r7, r0
 80059a2:	d2c8      	bcs.n	8005936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80059a4:	e7ee      	b.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080059a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80059a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059aa:	9e08      	ldr	r6, [sp, #32]
 80059ac:	4604      	mov	r4, r0
 80059ae:	4690      	mov	r8, r2
 80059b0:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80059b2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80059b6:	b28d      	uxth	r5, r1
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	f1b9 0f01 	cmp.w	r9, #1
 80059be:	bf0c      	ite	eq
 80059c0:	695b      	ldreq	r3, [r3, #20]
 80059c2:	699b      	ldrne	r3, [r3, #24]
 80059c4:	ea35 0303 	bics.w	r3, r5, r3
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	4543      	cmp	r3, r8
 80059d0:	d002      	beq.n	80059d8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80059d2:	2000      	movs	r0, #0
}
 80059d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80059d8:	1c7b      	adds	r3, r7, #1
 80059da:	d0ed      	beq.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80059dc:	b95f      	cbnz	r7, 80059f6 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059de:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80059e0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80059e2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80059e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80059e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80059ec:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80059f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80059f6:	f7ff f8a7 	bl	8004b48 <HAL_GetTick>
 80059fa:	1b80      	subs	r0, r0, r6
 80059fc:	4287      	cmp	r7, r0
 80059fe:	d2db      	bcs.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x12>
 8005a00:	e7ed      	b.n	80059de <I2C_WaitOnFlagUntilTimeout+0x38>

08005a02 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	4604      	mov	r4, r0
 8005a06:	460d      	mov	r5, r1
 8005a08:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	d501      	bpl.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8005a12:	2000      	movs	r0, #0
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7ff ff70 	bl	80058fc <I2C_IsAcknowledgeFailed>
 8005a1c:	b9a8      	cbnz	r0, 8005a4a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8005a1e:	1c6a      	adds	r2, r5, #1
 8005a20:	d0f3      	beq.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005a22:	b965      	cbnz	r5, 8005a3e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8005a2c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8005a32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8005a36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8005a3a:	2003      	movs	r0, #3
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005a3e:	f7ff f883 	bl	8004b48 <HAL_GetTick>
 8005a42:	1b80      	subs	r0, r0, r6
 8005a44:	4285      	cmp	r5, r0
 8005a46:	d2e0      	bcs.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8005a48:	e7ec      	b.n	8005a24 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8005a4a:	2001      	movs	r0, #1
}
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a50 <I2C_RequestMemoryRead>:
{
 8005a50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005a54:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005a56:	6803      	ldr	r3, [r0, #0]
{
 8005a58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005a5a:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
{
 8005a6c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6e:	9500      	str	r5, [sp, #0]
 8005a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a72:	2200      	movs	r2, #0
 8005a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8005a78:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7a:	f7ff ff94 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	b980      	cbnz	r0, 8005aa2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a80:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a82:	492f      	ldr	r1, [pc, #188]	; (8005b40 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a84:	b2ff      	uxtb	r7, r7
 8005a86:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8005a8a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a92:	f7ff ff48 	bl	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a96:	b140      	cbz	r0, 8005aaa <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d101      	bne.n	8005aa2 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	e000      	b.n	8005aa4 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8005aa2:	2003      	movs	r0, #3
}
 8005aa4:	b004      	add	sp, #16
 8005aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	9003      	str	r0, [sp, #12]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	9203      	str	r2, [sp, #12]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aba:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff ffa0 	bl	8005a02 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac2:	b140      	cbz	r0, 8005ad6 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d1eb      	bne.n	8005aa2 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	6813      	ldr	r3, [r2, #0]
 8005ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e7e3      	b.n	8005a9e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad6:	f1b8 0f01 	cmp.w	r8, #1
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	d124      	bne.n	8005b28 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ade:	b2f6      	uxtb	r6, r6
 8005ae0:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7ff ff8b 	bl	8005a02 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aec:	4602      	mov	r2, r0
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d1e8      	bne.n	8005ac4 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005af2:	6821      	ldr	r1, [r4, #0]
 8005af4:	680b      	ldr	r3, [r1, #0]
 8005af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afa:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afc:	4620      	mov	r0, r4
 8005afe:	9500      	str	r5, [sp, #0]
 8005b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b06:	f7ff ff4e 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1c9      	bne.n	8005aa2 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b0e:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b12:	490b      	ldr	r1, [pc, #44]	; (8005b40 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b14:	f047 0701 	orr.w	r7, r7, #1
 8005b18:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	f7ff ff02 	bl	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d1b8      	bne.n	8005a98 <I2C_RequestMemoryRead+0x48>
 8005b26:	e7bd      	b.n	8005aa4 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b28:	0a32      	lsrs	r2, r6, #8
 8005b2a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff ff66 	bl	8005a02 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d1c4      	bne.n	8005ac4 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	e7cf      	b.n	8005ade <I2C_RequestMemoryRead+0x8e>
 8005b3e:	bf00      	nop
 8005b40:	00010002 	.word	0x00010002

08005b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6943      	ldr	r3, [r0, #20]
 8005b50:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005b54:	d001      	beq.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005b56:	2000      	movs	r0, #0
}
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b5a:	6942      	ldr	r2, [r0, #20]
 8005b5c:	06d2      	lsls	r2, r2, #27
 8005b5e:	d50b      	bpl.n	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b60:	f06f 0210 	mvn.w	r2, #16
 8005b64:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8005b66:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b68:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005b6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b6e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005b70:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8005b72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005b78:	b95d      	cbnz	r5, 8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7c:	f043 0320 	orr.w	r3, r3, #32
 8005b80:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8005b82:	2320      	movs	r3, #32
 8005b84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005b8e:	2003      	movs	r0, #3
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005b92:	f7fe ffd9 	bl	8004b48 <HAL_GetTick>
 8005b96:	1b80      	subs	r0, r0, r6
 8005b98:	4285      	cmp	r5, r0
 8005b9a:	d2d7      	bcs.n	8005b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8005b9c:	e7ed      	b.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08005b9e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8005b9e:	b570      	push	{r4, r5, r6, lr}
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	075b      	lsls	r3, r3, #29
 8005bac:	d501      	bpl.n	8005bb2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005bae:	2000      	movs	r0, #0
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff fea2 	bl	80058fc <I2C_IsAcknowledgeFailed>
 8005bb8:	b9a8      	cbnz	r0, 8005be6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8005bba:	1c6a      	adds	r2, r5, #1
 8005bbc:	d0f3      	beq.n	8005ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005bbe:	b965      	cbnz	r5, 8005bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bc2:	f043 0320 	orr.w	r3, r3, #32
 8005bc6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8005bc8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8005bce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8005bd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8005bd6:	2003      	movs	r0, #3
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005bda:	f7fe ffb5 	bl	8004b48 <HAL_GetTick>
 8005bde:	1b80      	subs	r0, r0, r6
 8005be0:	4285      	cmp	r5, r0
 8005be2:	d2e0      	bcs.n	8005ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8005be4:	e7ec      	b.n	8005bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8005be6:	2001      	movs	r0, #1
}
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bec <HAL_I2C_Init>:
{
 8005bec:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8005bee:	4604      	mov	r4, r0
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d062      	beq.n	8005cba <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8005bf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005bf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bfc:	b91b      	cbnz	r3, 8005c06 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005bfe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005c02:	f7fe fcd7 	bl	80045b4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8005c06:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c08:	4e2d      	ldr	r6, [pc, #180]	; (8005cc0 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005c0a:	4d2e      	ldr	r5, [pc, #184]	; (8005cc4 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c0c:	2324      	movs	r3, #36	; 0x24
 8005c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f001 f971 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c1e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8005c20:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005c22:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c26:	42b3      	cmp	r3, r6
 8005c28:	bf84      	itt	hi
 8005c2a:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8005c2e:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8005c30:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c32:	bf91      	iteee	ls
 8005c34:	1c69      	addls	r1, r5, #1
 8005c36:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8005c3a:	fbb1 f1f5 	udivhi	r1, r1, r5
 8005c3e:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c40:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c42:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c44:	d821      	bhi.n	8005c8a <HAL_I2C_Init+0x9e>
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c4c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	bf98      	it	ls
 8005c54:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c56:	6a21      	ldr	r1, [r4, #32]
 8005c58:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c5a:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8005c60:	68e1      	ldr	r1, [r4, #12]
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8005c68:	69a1      	ldr	r1, [r4, #24]
 8005c6a:	6963      	ldr	r3, [r4, #20]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c78:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c7c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c82:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c8a:	68a1      	ldr	r1, [r4, #8]
 8005c8c:	b949      	cbnz	r1, 8005ca2 <HAL_I2C_Init+0xb6>
 8005c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c96:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005c9a:	b163      	cbz	r3, 8005cb6 <HAL_I2C_Init+0xca>
 8005c9c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005ca0:	e7d9      	b.n	8005c56 <HAL_I2C_Init+0x6a>
 8005ca2:	2119      	movs	r1, #25
 8005ca4:	434b      	muls	r3, r1
 8005ca6:	fbb0 f0f3 	udiv	r0, r0, r3
 8005caa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005cae:	b113      	cbz	r3, 8005cb6 <HAL_I2C_Init+0xca>
 8005cb0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8005cb4:	e7cf      	b.n	8005c56 <HAL_I2C_Init+0x6a>
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	e7cd      	b.n	8005c56 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8005cba:	2001      	movs	r0, #1
}
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	bf00      	nop
 8005cc0:	000186a0 	.word	0x000186a0
 8005cc4:	000f4240 	.word	0x000f4240

08005cc8 <HAL_I2C_Master_Transmit>:
{
 8005cc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005ccc:	4604      	mov	r4, r0
 8005cce:	461f      	mov	r7, r3
 8005cd0:	460d      	mov	r5, r1
 8005cd2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8005cd4:	f7fe ff38 	bl	8004b48 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005cd8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005cdc:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8005cde:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005ce0:	d004      	beq.n	8005cec <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8005ce2:	2502      	movs	r5, #2
}
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	b004      	add	sp, #16
 8005ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cec:	9000      	str	r0, [sp, #0]
 8005cee:	2319      	movs	r3, #25
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	495d      	ldr	r1, [pc, #372]	; (8005e68 <HAL_I2C_Master_Transmit+0x1a0>)
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f7ff fe56 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d1f1      	bne.n	8005ce2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8005cfe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d0ed      	beq.n	8005ce2 <HAL_I2C_Master_Transmit+0x1a>
 8005d06:	2301      	movs	r3, #1
 8005d08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005d12:	bf5e      	ittt	pl
 8005d14:	681a      	ldrpl	r2, [r3, #0]
 8005d16:	f042 0201 	orrpl.w	r2, r2, #1
 8005d1a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d22:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d24:	2221      	movs	r2, #33	; 0x21
 8005d26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d30:	2200      	movs	r2, #0
 8005d32:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d34:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8005d38:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d3a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005d3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005d3e:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005d42:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d46:	2a04      	cmp	r2, #4
 8005d48:	d004      	beq.n	8005d54 <HAL_I2C_Master_Transmit+0x8c>
 8005d4a:	2a01      	cmp	r2, #1
 8005d4c:	d002      	beq.n	8005d54 <HAL_I2C_Master_Transmit+0x8c>
 8005d4e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005d52:	d104      	bne.n	8005d5e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e002      	b.n	8005d64 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d60:	2a12      	cmp	r2, #18
 8005d62:	d0f7      	beq.n	8005d54 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d64:	9600      	str	r6, [sp, #0]
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff fe19 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	bb28      	cbnz	r0, 8005dc2 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d7e:	d112      	bne.n	8005da6 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d80:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005d84:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d86:	4633      	mov	r3, r6
 8005d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8a:	4938      	ldr	r1, [pc, #224]	; (8005e6c <HAL_I2C_Master_Transmit+0x1a4>)
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f7ff fdca 	bl	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d92:	4605      	mov	r5, r0
 8005d94:	b9a0      	cbnz	r0, 8005dc0 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	9003      	str	r0, [sp, #12]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	9203      	str	r2, [sp, #12]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	9303      	str	r3, [sp, #12]
 8005da2:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8005da4:	e050      	b.n	8005e48 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005da6:	11eb      	asrs	r3, r5, #7
 8005da8:	f003 0306 	and.w	r3, r3, #6
 8005dac:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005db0:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005db2:	492f      	ldr	r1, [pc, #188]	; (8005e70 <HAL_I2C_Master_Transmit+0x1a8>)
 8005db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db6:	4633      	mov	r3, r6
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff fdb4 	bl	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dbe:	b148      	cbz	r0, 8005dd4 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	d107      	bne.n	8005ddc <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8005dcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005dd0:	2501      	movs	r5, #1
 8005dd2:	e787      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	b2ed      	uxtb	r5, r5
 8005dd8:	611d      	str	r5, [r3, #16]
 8005dda:	e7d4      	b.n	8005d86 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8005ddc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8005de0:	2503      	movs	r5, #3
 8005de2:	e77f      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de4:	4632      	mov	r2, r6
 8005de6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005de8:	4620      	mov	r0, r4
 8005dea:	f7ff fe0a 	bl	8005a02 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dee:	b140      	cbz	r0, 8005e02 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d1f4      	bne.n	8005de0 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e7e6      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e04:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8005e06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005e08:	1c4b      	adds	r3, r1, #1
 8005e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e0c:	780b      	ldrb	r3, [r1, #0]
 8005e0e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8005e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e18:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8005e1a:	1e53      	subs	r3, r2, #1
 8005e1c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e1e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8005e20:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e22:	d50a      	bpl.n	8005e3a <HAL_I2C_Master_Transmit+0x172>
 8005e24:	b14b      	cbz	r3, 8005e3a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8005e26:	1c8b      	adds	r3, r1, #2
 8005e28:	6263      	str	r3, [r4, #36]	; 0x24
 8005e2a:	784b      	ldrb	r3, [r1, #1]
 8005e2c:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8005e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005e34:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8005e36:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005e38:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7ff fead 	bl	8005b9e <I2C_WaitOnBTFFlagUntilTimeout>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1d3      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8005e48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1ca      	bne.n	8005de4 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005e4e:	6821      	ldr	r1, [r4, #0]
 8005e50:	680a      	ldr	r2, [r1, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e56:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005e5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005e66:	e73d      	b.n	8005ce4 <HAL_I2C_Master_Transmit+0x1c>
 8005e68:	00100002 	.word	0x00100002
 8005e6c:	00010002 	.word	0x00010002
 8005e70:	00010008 	.word	0x00010008

08005e74 <HAL_I2C_Mem_Read>:
{
 8005e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	4604      	mov	r4, r0
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	460d      	mov	r5, r1
 8005e80:	4691      	mov	r9, r2
 8005e82:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8005e84:	f7fe fe60 	bl	8004b48 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005e8c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8005e8e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005e90:	d004      	beq.n	8005e9c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8005e92:	2502      	movs	r5, #2
}
 8005e94:	4628      	mov	r0, r5
 8005e96:	b006      	add	sp, #24
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e9c:	9000      	str	r0, [sp, #0]
 8005e9e:	2319      	movs	r3, #25
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4979      	ldr	r1, [pc, #484]	; (8006088 <HAL_I2C_Mem_Read+0x214>)
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff fd7e 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d1f1      	bne.n	8005e92 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8005eae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d0ed      	beq.n	8005e92 <HAL_I2C_Mem_Read+0x1e>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005ec2:	bf5e      	ittt	pl
 8005ec4:	681a      	ldrpl	r2, [r3, #0]
 8005ec6:	f042 0201 	orrpl.w	r2, r2, #1
 8005eca:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ed2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ed4:	2322      	movs	r3, #34	; 0x22
 8005ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8005ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ee2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee4:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8005ee8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005ef0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ef2:	4b66      	ldr	r3, [pc, #408]	; (800608c <HAL_I2C_Mem_Read+0x218>)
 8005ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005ef6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ef8:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005efa:	4629      	mov	r1, r5
 8005efc:	9601      	str	r6, [sp, #4]
 8005efe:	9700      	str	r7, [sp, #0]
 8005f00:	4653      	mov	r3, sl
 8005f02:	464a      	mov	r2, r9
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff fda3 	bl	8005a50 <I2C_RequestMemoryRead>
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	b130      	cbz	r0, 8005f1c <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f10:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d13a      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8005f18:	2501      	movs	r5, #1
 8005f1a:	e7bb      	b.n	8005e94 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8005f1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	b992      	cbnz	r2, 8005f48 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f22:	9002      	str	r0, [sp, #8]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	9202      	str	r2, [sp, #8]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	9202      	str	r2, [sp, #8]
 8005f2c:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f34:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f36:	2320      	movs	r3, #32
 8005f38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005f42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005f46:	e7a5      	b.n	8005e94 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8005f48:	2a01      	cmp	r2, #1
 8005f4a:	d122      	bne.n	8005f92 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f52:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f54:	9003      	str	r0, [sp, #12]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	9203      	str	r2, [sp, #12]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	9203      	str	r2, [sp, #12]
 8005f5e:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f66:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f68:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8006090 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8005f6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0e1      	beq.n	8005f36 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d86b      	bhi.n	800604e <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d123      	bne.n	8005fc2 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7ff fde0 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d039      	beq.n	8005ffc <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8005f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d1c4      	bne.n	8005f18 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8005f8e:	2503      	movs	r5, #3
 8005f90:	e780      	b.n	8005e94 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8005f92:	2a02      	cmp	r2, #2
 8005f94:	d10e      	bne.n	8005fb4 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9c:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fa4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa6:	9004      	str	r0, [sp, #16]
 8005fa8:	695a      	ldr	r2, [r3, #20]
 8005faa:	9204      	str	r2, [sp, #16]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	e7d9      	b.n	8005f68 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb4:	9005      	str	r0, [sp, #20]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	9205      	str	r2, [sp, #20]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	e7d2      	b.n	8005f68 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8005fc2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc4:	9600      	str	r6, [sp, #0]
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8005fd0:	d122      	bne.n	8006018 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd2:	f7ff fce8 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe2:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005fe4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	1c51      	adds	r1, r2, #1
 8005fea:	6261      	str	r1, [r4, #36]	; 0x24
 8005fec:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8005fee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8005ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	6262      	str	r2, [r4, #36]	; 0x24
 8006002:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006004:	6912      	ldr	r2, [r2, #16]
 8006006:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006008:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800600a:	3b01      	subs	r3, #1
 800600c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800600e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006010:	3b01      	subs	r3, #1
 8006012:	b29b      	uxth	r3, r3
 8006014:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006016:	e7a9      	b.n	8005f6c <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006018:	f7ff fcc5 	bl	80059a6 <I2C_WaitOnFlagUntilTimeout>
 800601c:	4602      	mov	r2, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d1b5      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800602a:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800602c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	1c48      	adds	r0, r1, #1
 8006032:	6260      	str	r0, [r4, #36]	; 0x24
 8006034:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8006036:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006038:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800603a:	3b01      	subs	r3, #1
 800603c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800603e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006040:	3b01      	subs	r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006046:	4641      	mov	r1, r8
 8006048:	463b      	mov	r3, r7
 800604a:	4620      	mov	r0, r4
 800604c:	e7c1      	b.n	8005fd2 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604e:	4632      	mov	r2, r6
 8006050:	4639      	mov	r1, r7
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff fd76 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006058:	2800      	cmp	r0, #0
 800605a:	d195      	bne.n	8005f88 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800605c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	6262      	str	r2, [r4, #36]	; 0x24
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	6912      	ldr	r2, [r2, #16]
 8006066:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8006068:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800606a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800606c:	3b01      	subs	r3, #1
 800606e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006070:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006072:	3b01      	subs	r3, #1
 8006074:	b29b      	uxth	r3, r3
 8006076:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006078:	6953      	ldr	r3, [r2, #20]
 800607a:	075b      	lsls	r3, r3, #29
 800607c:	f57f af76 	bpl.w	8005f6c <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	6261      	str	r1, [r4, #36]	; 0x24
 8006086:	e7bd      	b.n	8006004 <HAL_I2C_Mem_Read+0x190>
 8006088:	00100002 	.word	0x00100002
 800608c:	ffff0000 	.word	0xffff0000
 8006090:	00010004 	.word	0x00010004

08006094 <HAL_I2C_Mem_Read_IT>:
{
 8006094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8006096:	2400      	movs	r4, #0
 8006098:	9401      	str	r4, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 800609a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
{
 800609e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
  if(hi2c->State == HAL_I2C_STATE_READY)
 80060a2:	2c20      	cmp	r4, #32
 80060a4:	d002      	beq.n	80060ac <HAL_I2C_Mem_Read_IT+0x18>
    return HAL_BUSY;
 80060a6:	2002      	movs	r0, #2
}
 80060a8:	b003      	add	sp, #12
 80060aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 80060ac:	4c27      	ldr	r4, [pc, #156]	; (800614c <HAL_I2C_Mem_Read_IT+0xb8>)
 80060ae:	f246 16a8 	movw	r6, #25000	; 0x61a8
 80060b2:	6824      	ldr	r4, [r4, #0]
 80060b4:	fbb4 f6f6 	udiv	r6, r4, r6
 80060b8:	2419      	movs	r4, #25
 80060ba:	4374      	muls	r4, r6
 80060bc:	9401      	str	r4, [sp, #4]
      if(count-- == 0U)
 80060be:	9c01      	ldr	r4, [sp, #4]
 80060c0:	1e66      	subs	r6, r4, #1
 80060c2:	9601      	str	r6, [sp, #4]
 80060c4:	b93c      	cbnz	r4, 80060d6 <HAL_I2C_Mem_Read_IT+0x42>
        hi2c->State= HAL_I2C_STATE_READY;
 80060c6:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80060c8:	6304      	str	r4, [r0, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80060ca:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80060ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        return HAL_TIMEOUT; 
 80060d2:	2003      	movs	r0, #3
 80060d4:	e7e8      	b.n	80060a8 <HAL_I2C_Mem_Read_IT+0x14>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80060d6:	6804      	ldr	r4, [r0, #0]
 80060d8:	69a6      	ldr	r6, [r4, #24]
 80060da:	07b7      	lsls	r7, r6, #30
 80060dc:	d4ef      	bmi.n	80060be <HAL_I2C_Mem_Read_IT+0x2a>
    __HAL_LOCK(hi2c);
 80060de:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
 80060e2:	2e01      	cmp	r6, #1
 80060e4:	d0df      	beq.n	80060a6 <HAL_I2C_Mem_Read_IT+0x12>
 80060e6:	2601      	movs	r6, #1
 80060e8:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ec:	6826      	ldr	r6, [r4, #0]
    hi2c->pBuffPtr = pData;
 80060ee:	9f08      	ldr	r7, [sp, #32]
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f0:	07f6      	lsls	r6, r6, #31
      __HAL_I2C_ENABLE(hi2c);
 80060f2:	bf5e      	ittt	pl
 80060f4:	6826      	ldrpl	r6, [r4, #0]
 80060f6:	f046 0601 	orrpl.w	r6, r6, #1
 80060fa:	6026      	strpl	r6, [r4, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060fc:	6826      	ldr	r6, [r4, #0]
 80060fe:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 8006102:	6026      	str	r6, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8006104:	2622      	movs	r6, #34	; 0x22
 8006106:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 800610a:	2640      	movs	r6, #64	; 0x40
 800610c:	f880 603e 	strb.w	r6, [r0, #62]	; 0x3e
    hi2c->pBuffPtr = pData;
 8006110:	6247      	str	r7, [r0, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006112:	2600      	movs	r6, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006114:	4f0e      	ldr	r7, [pc, #56]	; (8006150 <HAL_I2C_Mem_Read_IT+0xbc>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006116:	6406      	str	r6, [r0, #64]	; 0x40
    hi2c->XferCount = Size;
 8006118:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800611a:	62c7      	str	r7, [r0, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 800611c:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 800611e:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 8006120:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8006122:	6506      	str	r6, [r0, #80]	; 0x50
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006124:	6823      	ldr	r3, [r4, #0]
    hi2c->XferSize = Size;
 8006126:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800612c:	6023      	str	r3, [r4, #0]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006134:	6023      	str	r3, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006136:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    if(hi2c->XferSize > 0U)
 800613a:	b12d      	cbz	r5, 8006148 <HAL_I2C_Mem_Read_IT+0xb4>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006142:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 8006144:	4630      	mov	r0, r6
 8006146:	e7af      	b.n	80060a8 <HAL_I2C_Mem_Read_IT+0x14>
 8006148:	4628      	mov	r0, r5
 800614a:	e7ad      	b.n	80060a8 <HAL_I2C_Mem_Read_IT+0x14>
 800614c:	20000004 	.word	0x20000004
 8006150:	ffff0000 	.word	0xffff0000

08006154 <HAL_I2C_MasterTxCpltCallback>:
 8006154:	4770      	bx	lr

08006156 <HAL_I2C_MasterRxCpltCallback>:
 8006156:	4770      	bx	lr

08006158 <HAL_I2C_SlaveTxCpltCallback>:
 8006158:	4770      	bx	lr

0800615a <HAL_I2C_SlaveRxCpltCallback>:
 800615a:	4770      	bx	lr

0800615c <HAL_I2C_AddrCallback>:
{
 800615c:	4770      	bx	lr

0800615e <HAL_I2C_ListenCpltCallback>:
 800615e:	4770      	bx	lr

08006160 <HAL_I2C_MemTxCpltCallback>:
 8006160:	4770      	bx	lr

08006162 <HAL_I2C_ErrorCallback>:
 8006162:	4770      	bx	lr

08006164 <HAL_I2C_AbortCpltCallback>:
{
 8006164:	4770      	bx	lr
	...

08006168 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8006168:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800616c:	3b29      	subs	r3, #41	; 0x29
 800616e:	2b01      	cmp	r3, #1
{
 8006170:	b510      	push	{r4, lr}
 8006172:	6803      	ldr	r3, [r0, #0]
 8006174:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006176:	d839      	bhi.n	80061ec <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006178:	2200      	movs	r2, #0
 800617a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800617c:	2228      	movs	r2, #40	; 0x28
 800617e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006188:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8006190:	d054      	beq.n	800623c <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006192:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006194:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800619a:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800619c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	4b39      	ldr	r3, [pc, #228]	; (8006288 <I2C_ITError+0x120>)
 80061a4:	d031      	beq.n	800620a <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061a6:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061a8:	f7ff f9e6 	bl	8005578 <HAL_DMA_Abort_IT>
 80061ac:	b150      	cbz	r0, 80061c4 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 80061ae:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	2320      	movs	r3, #32
 80061bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80061c2:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80061c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80061c8:	2b28      	cmp	r3, #40	; 0x28
 80061ca:	d10e      	bne.n	80061ea <I2C_ITError+0x82>
 80061cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061ce:	075b      	lsls	r3, r3, #29
 80061d0:	d50b      	bpl.n	80061ea <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061d2:	4b2e      	ldr	r3, [pc, #184]	; (800628c <I2C_ITError+0x124>)
 80061d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80061d6:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d8:	2300      	movs	r3, #0
 80061da:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80061dc:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80061de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80061e6:	f7ff ffba 	bl	800615e <HAL_I2C_ListenCpltCallback>
 80061ea:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80061ec:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80061f0:	2a60      	cmp	r2, #96	; 0x60
 80061f2:	d005      	beq.n	8006200 <I2C_ITError+0x98>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 80061f8:	bf5c      	itt	pl
 80061fa:	2220      	movpl	r2, #32
 80061fc:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8006200:	2200      	movs	r2, #0
 8006202:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006204:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8006208:	e7bb      	b.n	8006182 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800620a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800620c:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800620e:	f7ff f9b3 	bl	8005578 <HAL_DMA_Abort_IT>
 8006212:	2800      	cmp	r0, #0
 8006214:	d0d6      	beq.n	80061c4 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	6953      	ldr	r3, [r2, #20]
 800621a:	0658      	lsls	r0, r3, #25
 800621c:	d504      	bpl.n	8006228 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800621e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006220:	6912      	ldr	r2, [r2, #16]
 8006222:	1c59      	adds	r1, r3, #1
 8006224:	6261      	str	r1, [r4, #36]	; 0x24
 8006226:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8006228:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800622a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800622c:	6813      	ldr	r3, [r2, #0]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8006234:	2320      	movs	r3, #32
 8006236:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800623a:	e7c1      	b.n	80061c0 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800623c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006240:	2960      	cmp	r1, #96	; 0x60
 8006242:	d114      	bne.n	800626e <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8006244:	2120      	movs	r1, #32
 8006246:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624a:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	0651      	lsls	r1, r2, #25
 8006250:	d504      	bpl.n	800625c <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	1c51      	adds	r1, r2, #1
 8006258:	6261      	str	r1, [r4, #36]	; 0x24
 800625a:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006266:	4620      	mov	r0, r4
 8006268:	f7ff ff7c 	bl	8006164 <HAL_I2C_AbortCpltCallback>
 800626c:	e7aa      	b.n	80061c4 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	0652      	lsls	r2, r2, #25
 8006272:	d504      	bpl.n	800627e <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	1c51      	adds	r1, r2, #1
 800627a:	6261      	str	r1, [r4, #36]	; 0x24
 800627c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff ff6f 	bl	8006162 <HAL_I2C_ErrorCallback>
 8006284:	e79e      	b.n	80061c4 <I2C_ITError+0x5c>
 8006286:	bf00      	nop
 8006288:	0800694d 	.word	0x0800694d
 800628c:	ffff0000 	.word	0xffff0000

08006290 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006290:	6803      	ldr	r3, [r0, #0]
{
 8006292:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006294:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006296:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8006298:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 800629a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800629e:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062a0:	2c10      	cmp	r4, #16
{
 80062a2:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062a4:	d002      	beq.n	80062ac <HAL_I2C_EV_IRQHandler+0x1c>
 80062a6:	2c40      	cmp	r4, #64	; 0x40
 80062a8:	f040 824a 	bne.w	8006740 <HAL_I2C_EV_IRQHandler+0x4b0>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80062ac:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 80062b0:	d066      	beq.n	8006380 <HAL_I2C_EV_IRQHandler+0xf0>
 80062b2:	0597      	lsls	r7, r2, #22
 80062b4:	d564      	bpl.n	8006380 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80062b6:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80062ba:	2c40      	cmp	r4, #64	; 0x40
 80062bc:	d143      	bne.n	8006346 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 80062be:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	d13b      	bne.n	800633c <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062c4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062c6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062ca:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80062cc:	4e97      	ldr	r6, [pc, #604]	; (800652c <HAL_I2C_EV_IRQHandler+0x29c>)
 80062ce:	4c98      	ldr	r4, [pc, #608]	; (8006530 <HAL_I2C_EV_IRQHandler+0x2a0>)
 80062d0:	402e      	ands	r6, r5
 80062d2:	400c      	ands	r4, r1
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	f000 819a 	beq.w	800660e <HAL_I2C_EV_IRQHandler+0x37e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80062da:	4d96      	ldr	r5, [pc, #600]	; (8006534 <HAL_I2C_EV_IRQHandler+0x2a4>)
 80062dc:	400d      	ands	r5, r1
 80062de:	2d00      	cmp	r5, #0
 80062e0:	f000 8161 	beq.w	80065a6 <HAL_I2C_EV_IRQHandler+0x316>
 80062e4:	0555      	lsls	r5, r2, #21
 80062e6:	f140 815e 	bpl.w	80065a6 <HAL_I2C_EV_IRQHandler+0x316>
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	f040 815b 	bne.w	80065a6 <HAL_I2C_EV_IRQHandler+0x316>
  uint32_t CurrentState       = hi2c->State;
 80062f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062f4:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 80062f6:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 80062fc:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 80062fe:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006300:	2d00      	cmp	r5, #0
 8006302:	f040 8105 	bne.w	8006510 <HAL_I2C_EV_IRQHandler+0x280>
 8006306:	2a21      	cmp	r2, #33	; 0x21
 8006308:	f040 8104 	bne.w	8006514 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800630c:	2c04      	cmp	r4, #4
 800630e:	f000 8167 	beq.w	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
 8006312:	2c08      	cmp	r4, #8
 8006314:	f000 8164 	beq.w	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
 8006318:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800631c:	f000 8160 	beq.w	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006326:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006328:	2311      	movs	r3, #17
 800632a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800632c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006330:	2320      	movs	r3, #32
 8006332:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006336:	f7ff ff0d 	bl	8006154 <HAL_I2C_MasterTxCpltCallback>
 800633a:	e110      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800633c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800633e:	f044 0401 	orr.w	r4, r4, #1
 8006342:	b2e4      	uxtb	r4, r4
 8006344:	e7c1      	b.n	80062ca <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006346:	6904      	ldr	r4, [r0, #16]
 8006348:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800634c:	d105      	bne.n	800635a <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800634e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8006352:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006354:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8006356:	d1f2      	bne.n	800633e <HAL_I2C_EV_IRQHandler+0xae>
 8006358:	e7b5      	b.n	80062c6 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 800635a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800635c:	b934      	cbnz	r4, 800636c <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800635e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006360:	11e4      	asrs	r4, r4, #7
 8006362:	f004 0406 	and.w	r4, r4, #6
 8006366:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 800636a:	e7ae      	b.n	80062ca <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 800636c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800636e:	2c01      	cmp	r4, #1
 8006370:	d1ac      	bne.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006372:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006374:	11e4      	asrs	r4, r4, #7
 8006376:	f004 0406 	and.w	r4, r4, #6
 800637a:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 800637e:	e7a4      	b.n	80062ca <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006380:	4c6d      	ldr	r4, [pc, #436]	; (8006538 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8006382:	400c      	ands	r4, r1
 8006384:	b11c      	cbz	r4, 800638e <HAL_I2C_EV_IRQHandler+0xfe>
 8006386:	0596      	lsls	r6, r2, #22
 8006388:	d501      	bpl.n	800638e <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800638a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800638c:	e7d9      	b.n	8006342 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800638e:	4c6b      	ldr	r4, [pc, #428]	; (800653c <HAL_I2C_EV_IRQHandler+0x2ac>)
 8006390:	400c      	ands	r4, r1
 8006392:	2c00      	cmp	r4, #0
 8006394:	d09a      	beq.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
 8006396:	0594      	lsls	r4, r2, #22
 8006398:	d598      	bpl.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 800639a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800639e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80063a0:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063a4:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80063a8:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 80063aa:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063ac:	f040 80a8 	bne.w	8006500 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063b0:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80063b2:	b947      	cbnz	r7, 80063c6 <HAL_I2C_EV_IRQHandler+0x136>
 80063b4:	2c40      	cmp	r4, #64	; 0x40
 80063b6:	d106      	bne.n	80063c6 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b8:	9701      	str	r7, [sp, #4]
 80063ba:	695c      	ldr	r4, [r3, #20]
 80063bc:	9401      	str	r4, [sp, #4]
 80063be:	699c      	ldr	r4, [r3, #24]
 80063c0:	9401      	str	r4, [sp, #4]
 80063c2:	9c01      	ldr	r4, [sp, #4]
 80063c4:	e782      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063c6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80063c8:	b98c      	cbnz	r4, 80063ee <HAL_I2C_EV_IRQHandler+0x15e>
 80063ca:	6907      	ldr	r7, [r0, #16]
 80063cc:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 80063d0:	d10d      	bne.n	80063ee <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d2:	9402      	str	r4, [sp, #8]
 80063d4:	695c      	ldr	r4, [r3, #20]
 80063d6:	9402      	str	r4, [sp, #8]
 80063d8:	699c      	ldr	r4, [r3, #24]
 80063da:	9402      	str	r4, [sp, #8]
 80063dc:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063de:	681c      	ldr	r4, [r3, #0]
 80063e0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80063e4:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 80063e6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80063e8:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 80063ea:	6504      	str	r4, [r0, #80]	; 0x50
 80063ec:	e76e      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 80063ee:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80063f0:	b2a4      	uxth	r4, r4
 80063f2:	b954      	cbnz	r4, 800640a <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f4:	9403      	str	r4, [sp, #12]
 80063f6:	695c      	ldr	r4, [r3, #20]
 80063f8:	9403      	str	r4, [sp, #12]
 80063fa:	699c      	ldr	r4, [r3, #24]
 80063fc:	9403      	str	r4, [sp, #12]
 80063fe:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006406:	601c      	str	r4, [r3, #0]
 8006408:	e019      	b.n	800643e <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 800640a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800640c:	b2a4      	uxth	r4, r4
 800640e:	2c01      	cmp	r4, #1
 8006410:	d142      	bne.n	8006498 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006412:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006416:	d11b      	bne.n	8006450 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006418:	681c      	ldr	r4, [r3, #0]
 800641a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800641e:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006420:	685c      	ldr	r4, [r3, #4]
 8006422:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8006426:	d00c      	beq.n	8006442 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800642e:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006430:	2400      	movs	r4, #0
 8006432:	9404      	str	r4, [sp, #16]
 8006434:	695c      	ldr	r4, [r3, #20]
 8006436:	9404      	str	r4, [sp, #16]
 8006438:	699c      	ldr	r4, [r3, #24]
 800643a:	9404      	str	r4, [sp, #16]
 800643c:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 800643e:	2400      	movs	r4, #0
 8006440:	e7d3      	b.n	80063ea <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006442:	9405      	str	r4, [sp, #20]
 8006444:	695c      	ldr	r4, [r3, #20]
 8006446:	9405      	str	r4, [sp, #20]
 8006448:	699c      	ldr	r4, [r3, #24]
 800644a:	9405      	str	r4, [sp, #20]
 800644c:	9c05      	ldr	r4, [sp, #20]
 800644e:	e7d7      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006450:	2e04      	cmp	r6, #4
 8006452:	d015      	beq.n	8006480 <HAL_I2C_EV_IRQHandler+0x1f0>
 8006454:	2e08      	cmp	r6, #8
 8006456:	d013      	beq.n	8006480 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8006458:	f1be 0f12 	cmp.w	lr, #18
 800645c:	d010      	beq.n	8006480 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800645e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006460:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006462:	681c      	ldr	r4, [r3, #0]
 8006464:	bf14      	ite	ne
 8006466:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800646a:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800646e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006470:	2400      	movs	r4, #0
 8006472:	9406      	str	r4, [sp, #24]
 8006474:	695c      	ldr	r4, [r3, #20]
 8006476:	9406      	str	r4, [sp, #24]
 8006478:	699c      	ldr	r4, [r3, #24]
 800647a:	9406      	str	r4, [sp, #24]
 800647c:	9c06      	ldr	r4, [sp, #24]
 800647e:	e7de      	b.n	800643e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006480:	681c      	ldr	r4, [r3, #0]
 8006482:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006486:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006488:	2400      	movs	r4, #0
 800648a:	9407      	str	r4, [sp, #28]
 800648c:	695c      	ldr	r4, [r3, #20]
 800648e:	9407      	str	r4, [sp, #28]
 8006490:	699c      	ldr	r4, [r3, #24]
 8006492:	9407      	str	r4, [sp, #28]
 8006494:	9c07      	ldr	r4, [sp, #28]
 8006496:	e7b3      	b.n	8006400 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8006498:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800649a:	b2a4      	uxth	r4, r4
 800649c:	2c02      	cmp	r4, #2
 800649e:	d11c      	bne.n	80064da <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80064a0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80064a2:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80064a4:	681c      	ldr	r4, [r3, #0]
 80064a6:	bf1d      	ittte	ne
 80064a8:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 80064ac:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80064ae:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80064b0:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80064b4:	bf18      	it	ne
 80064b6:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80064ba:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064bc:	685c      	ldr	r4, [r3, #4]
 80064be:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80064c0:	bf42      	ittt	mi
 80064c2:	685c      	ldrmi	r4, [r3, #4]
 80064c4:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80064c8:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ca:	2400      	movs	r4, #0
 80064cc:	9408      	str	r4, [sp, #32]
 80064ce:	695c      	ldr	r4, [r3, #20]
 80064d0:	9408      	str	r4, [sp, #32]
 80064d2:	699c      	ldr	r4, [r3, #24]
 80064d4:	9408      	str	r4, [sp, #32]
 80064d6:	9c08      	ldr	r4, [sp, #32]
 80064d8:	e7b1      	b.n	800643e <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80064e0:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064e2:	685c      	ldr	r4, [r3, #4]
 80064e4:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80064e6:	bf42      	ittt	mi
 80064e8:	685c      	ldrmi	r4, [r3, #4]
 80064ea:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80064ee:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2400      	movs	r4, #0
 80064f2:	9409      	str	r4, [sp, #36]	; 0x24
 80064f4:	695c      	ldr	r4, [r3, #20]
 80064f6:	9409      	str	r4, [sp, #36]	; 0x24
 80064f8:	699c      	ldr	r4, [r3, #24]
 80064fa:	9409      	str	r4, [sp, #36]	; 0x24
 80064fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80064fe:	e79e      	b.n	800643e <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006500:	2400      	movs	r4, #0
 8006502:	940a      	str	r4, [sp, #40]	; 0x28
 8006504:	695c      	ldr	r4, [r3, #20]
 8006506:	940a      	str	r4, [sp, #40]	; 0x28
 8006508:	699c      	ldr	r4, [r3, #24]
 800650a:	940a      	str	r4, [sp, #40]	; 0x28
 800650c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800650e:	e6dd      	b.n	80062cc <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006510:	2a21      	cmp	r2, #33	; 0x21
 8006512:	d003      	beq.n	800651c <HAL_I2C_EV_IRQHandler+0x28c>
 8006514:	2940      	cmp	r1, #64	; 0x40
 8006516:	d122      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006518:	2a22      	cmp	r2, #34	; 0x22
 800651a:	d120      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    if(hi2c->XferCount == 0U)
 800651c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800651e:	b292      	uxth	r2, r2
 8006520:	b972      	cbnz	r2, 8006540 <HAL_I2C_EV_IRQHandler+0x2b0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e018      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 800652c:	00100004 	.word	0x00100004
 8006530:	00010004 	.word	0x00010004
 8006534:	00010080 	.word	0x00010080
 8006538:	00010008 	.word	0x00010008
 800653c:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006540:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8006544:	2a40      	cmp	r2, #64	; 0x40
 8006546:	d128      	bne.n	800659a <HAL_I2C_EV_IRQHandler+0x30a>
        if(hi2c->EventCount == 0)
 8006548:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800654a:	b982      	cbnz	r2, 800656e <HAL_I2C_EV_IRQHandler+0x2de>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800654c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800654e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006550:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006552:	d106      	bne.n	8006562 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006554:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006556:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8006558:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800655a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 800655c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800655e:	b00d      	add	sp, #52	; 0x34
 8006560:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006562:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8006566:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8006568:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800656a:	3301      	adds	r3, #1
 800656c:	e7f6      	b.n	800655c <HAL_I2C_EV_IRQHandler+0x2cc>
        else if(hi2c->EventCount == 1)
 800656e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006570:	2a01      	cmp	r2, #1
 8006572:	d102      	bne.n	800657a <HAL_I2C_EV_IRQHandler+0x2ea>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006574:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	e7f5      	b.n	8006566 <HAL_I2C_EV_IRQHandler+0x2d6>
        else if(hi2c->EventCount == 2)
 800657a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800657c:	2a02      	cmp	r2, #2
 800657e:	d1ee      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006580:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006584:	2a22      	cmp	r2, #34	; 0x22
 8006586:	d104      	bne.n	8006592 <HAL_I2C_EV_IRQHandler+0x302>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e7e5      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006592:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006596:	2a21      	cmp	r2, #33	; 0x21
 8006598:	d1e1      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800659a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800659c:	1c51      	adds	r1, r2, #1
 800659e:	6241      	str	r1, [r0, #36]	; 0x24
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	611a      	str	r2, [r3, #16]
 80065a4:	e092      	b.n	80066cc <HAL_I2C_EV_IRQHandler+0x43c>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80065a6:	2c00      	cmp	r4, #0
 80065a8:	d0d9      	beq.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 80065aa:	0594      	lsls	r4, r2, #22
 80065ac:	d5d7      	bpl.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065b0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80065b4:	2a21      	cmp	r2, #33	; 0x21
 80065b6:	d1d2      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    if(hi2c->XferCount != 0U)
 80065b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80065ba:	b292      	uxth	r2, r2
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d1ec      	bne.n	800659a <HAL_I2C_EV_IRQHandler+0x30a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065c0:	2904      	cmp	r1, #4
 80065c2:	d00d      	beq.n	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
 80065c4:	2908      	cmp	r1, #8
 80065c6:	d00b      	beq.n	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
 80065c8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80065cc:	d008      	beq.n	80065e0 <HAL_I2C_EV_IRQHandler+0x350>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80065d4:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065d6:	2311      	movs	r3, #17
 80065d8:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 80065de:	e6a7      	b.n	8006330 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065e6:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f4:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80065fa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006602:	2a40      	cmp	r2, #64	; 0x40
 8006604:	f47f ae97 	bne.w	8006336 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006608:	f7ff fdaa 	bl	8006160 <HAL_I2C_MemTxCpltCallback>
 800660c:	e7a7      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800660e:	4d8d      	ldr	r5, [pc, #564]	; (8006844 <HAL_I2C_EV_IRQHandler+0x5b4>)
 8006610:	400d      	ands	r5, r1
 8006612:	2d00      	cmp	r5, #0
 8006614:	d03f      	beq.n	8006696 <HAL_I2C_EV_IRQHandler+0x406>
 8006616:	0551      	lsls	r1, r2, #21
 8006618:	d53d      	bpl.n	8006696 <HAL_I2C_EV_IRQHandler+0x406>
 800661a:	2c00      	cmp	r4, #0
 800661c:	d13b      	bne.n	8006696 <HAL_I2C_EV_IRQHandler+0x406>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800661e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8006622:	2a22      	cmp	r2, #34	; 0x22
 8006624:	d19b      	bne.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    tmp = hi2c->XferCount;
 8006626:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006628:	b292      	uxth	r2, r2
    if(tmp > 3U)
 800662a:	2a03      	cmp	r2, #3
 800662c:	d905      	bls.n	800663a <HAL_I2C_EV_IRQHandler+0x3aa>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800662e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	1c51      	adds	r1, r2, #1
 8006634:	6241      	str	r1, [r0, #36]	; 0x24
 8006636:	7013      	strb	r3, [r2, #0]
 8006638:	e048      	b.n	80066cc <HAL_I2C_EV_IRQHandler+0x43c>
    else if((tmp == 2U) || (tmp == 3U))
 800663a:	3a02      	subs	r2, #2
 800663c:	2a01      	cmp	r2, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006644:	601a      	str	r2, [r3, #0]
    else if((tmp == 2U) || (tmp == 3U))
 8006646:	d804      	bhi.n	8006652 <HAL_I2C_EV_IRQHandler+0x3c2>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e767      	b.n	8006522 <HAL_I2C_EV_IRQHandler+0x292>
      if(hi2c->XferOptions == I2C_NEXT_FRAME)
 8006652:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006654:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8006656:	bf02      	ittt	eq
 8006658:	681a      	ldreq	r2, [r3, #0]
 800665a:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800665e:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006666:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006668:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	1c51      	adds	r1, r2, #1
 800666e:	6241      	str	r1, [r0, #36]	; 0x24
 8006670:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8006672:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 800667a:	2320      	movs	r3, #32
 800667c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8006680:	2300      	movs	r3, #0
 8006682:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8006684:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800668c:	2a40      	cmp	r2, #64	; 0x40
 800668e:	d154      	bne.n	800673a <HAL_I2C_EV_IRQHandler+0x4aa>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006690:	f7fb fc7a 	bl	8001f88 <HAL_I2C_MemRxCpltCallback>
 8006694:	e763      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006696:	2c00      	cmp	r4, #0
 8006698:	f43f af61 	beq.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 800669c:	0597      	lsls	r7, r2, #22
 800669e:	f57f af5e 	bpl.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 80066a4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80066a6:	b289      	uxth	r1, r1
 80066a8:	2903      	cmp	r1, #3
 80066aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80066ac:	d113      	bne.n	80066d6 <HAL_I2C_EV_IRQHandler+0x446>
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066ae:	2a04      	cmp	r2, #4
 80066b0:	d004      	beq.n	80066bc <HAL_I2C_EV_IRQHandler+0x42c>
 80066b2:	2a08      	cmp	r2, #8
 80066b4:	d002      	beq.n	80066bc <HAL_I2C_EV_IRQHandler+0x42c>
 80066b6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80066ba:	d103      	bne.n	80066c4 <HAL_I2C_EV_IRQHandler+0x434>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c2:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80066c4:	1c4a      	adds	r2, r1, #1
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	6242      	str	r2, [r0, #36]	; 0x24
 80066ca:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80066cc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80066d4:	e743      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
  else if(hi2c->XferCount == 2U)
 80066d6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80066d8:	b2a4      	uxth	r4, r4
 80066da:	2c02      	cmp	r4, #2
 80066dc:	d1f2      	bne.n	80066c4 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066de:	2a04      	cmp	r2, #4
 80066e0:	d027      	beq.n	8006732 <HAL_I2C_EV_IRQHandler+0x4a2>
 80066e2:	2a08      	cmp	r2, #8
 80066e4:	d025      	beq.n	8006732 <HAL_I2C_EV_IRQHandler+0x4a2>
 80066e6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80066ea:	d022      	beq.n	8006732 <HAL_I2C_EV_IRQHandler+0x4a2>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066ec:	681c      	ldr	r4, [r3, #0]
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80066ee:	3a01      	subs	r2, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066f0:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80066f4:	2a01      	cmp	r2, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066f6:	601c      	str	r4, [r3, #0]
      if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80066f8:	d803      	bhi.n	8006702 <HAL_I2C_EV_IRQHandler+0x472>
        hi2c->Instance->CR1 |= I2C_CR1_START;
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006700:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	1c4a      	adds	r2, r1, #1
 8006706:	6242      	str	r2, [r0, #36]	; 0x24
 8006708:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800670a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800670c:	3b01      	subs	r3, #1
 800670e:	b29b      	uxth	r3, r3
 8006710:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006712:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	6242      	str	r2, [r0, #36]	; 0x24
 8006718:	6802      	ldr	r2, [r0, #0]
 800671a:	6912      	ldr	r2, [r2, #16]
 800671c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800671e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006720:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006728:	6853      	ldr	r3, [r2, #4]
 800672a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672e:	6053      	str	r3, [r2, #4]
 8006730:	e7a3      	b.n	800667a <HAL_I2C_EV_IRQHandler+0x3ea>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006738:	e7e2      	b.n	8006700 <HAL_I2C_EV_IRQHandler+0x470>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800673a:	f7ff fd0c 	bl	8006156 <HAL_I2C_MasterRxCpltCallback>
 800673e:	e70e      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006740:	4c41      	ldr	r4, [pc, #260]	; (8006848 <HAL_I2C_EV_IRQHandler+0x5b8>)
 8006742:	400c      	ands	r4, r1
 8006744:	b174      	cbz	r4, 8006764 <HAL_I2C_EV_IRQHandler+0x4d4>
 8006746:	0596      	lsls	r6, r2, #22
 8006748:	d50c      	bpl.n	8006764 <HAL_I2C_EV_IRQHandler+0x4d4>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800674a:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800674c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800674e:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8006752:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006754:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8006758:	bf54      	ite	pl
 800675a:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800675c:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800675e:	f7ff fcfd 	bl	800615c <HAL_I2C_AddrCallback>
 8006762:	e6fc      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006764:	4c39      	ldr	r4, [pc, #228]	; (800684c <HAL_I2C_EV_IRQHandler+0x5bc>)
 8006766:	400c      	ands	r4, r1
 8006768:	2c00      	cmp	r4, #0
 800676a:	d073      	beq.n	8006854 <HAL_I2C_EV_IRQHandler+0x5c4>
 800676c:	0594      	lsls	r4, r2, #22
 800676e:	d571      	bpl.n	8006854 <HAL_I2C_EV_IRQHandler+0x5c4>
  uint32_t CurrentState = hi2c->State;
 8006770:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006774:	6859      	ldr	r1, [r3, #4]
 8006776:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800677a:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800677c:	2100      	movs	r1, #0
 800677e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006780:	6959      	ldr	r1, [r3, #20]
 8006782:	910b      	str	r1, [sp, #44]	; 0x2c
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	f041 0101 	orr.w	r1, r1, #1
 800678a:	6019      	str	r1, [r3, #0]
 800678c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006794:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 800679a:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800679c:	d50c      	bpl.n	80067b8 <HAL_I2C_EV_IRQHandler+0x528>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800679e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80067a2:	2922      	cmp	r1, #34	; 0x22
 80067a4:	d003      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x51e>
 80067a6:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80067aa:	292a      	cmp	r1, #42	; 0x2a
 80067ac:	d129      	bne.n	8006802 <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80067ae:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80067b0:	6809      	ldr	r1, [r1, #0]
 80067b2:	6849      	ldr	r1, [r1, #4]
 80067b4:	b289      	uxth	r1, r1
 80067b6:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80067b8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80067ba:	b289      	uxth	r1, r1
 80067bc:	b1e1      	cbz	r1, 80067f8 <HAL_I2C_EV_IRQHandler+0x568>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067be:	6959      	ldr	r1, [r3, #20]
 80067c0:	074f      	lsls	r7, r1, #29
 80067c2:	d508      	bpl.n	80067d6 <HAL_I2C_EV_IRQHandler+0x546>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067c4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	1c4c      	adds	r4, r1, #1
 80067ca:	6244      	str	r4, [r0, #36]	; 0x24
 80067cc:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 80067ce:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067d6:	6801      	ldr	r1, [r0, #0]
 80067d8:	694b      	ldr	r3, [r1, #20]
 80067da:	065e      	lsls	r6, r3, #25
 80067dc:	d508      	bpl.n	80067f0 <HAL_I2C_EV_IRQHandler+0x560>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067e0:	6909      	ldr	r1, [r1, #16]
 80067e2:	1c5c      	adds	r4, r3, #1
 80067e4:	6244      	str	r4, [r0, #36]	; 0x24
 80067e6:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80067e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067f2:	f043 0304 	orr.w	r3, r3, #4
 80067f6:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067fa:	b123      	cbz	r3, 8006806 <HAL_I2C_EV_IRQHandler+0x576>
    I2C_ITError(hi2c);
 80067fc:	f7ff fcb4 	bl	8006168 <I2C_ITError>
 8006800:	e6ad      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006802:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006804:	e7d4      	b.n	80067b0 <HAL_I2C_EV_IRQHandler+0x520>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8006806:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 800680a:	2902      	cmp	r1, #2
 800680c:	d80a      	bhi.n	8006824 <HAL_I2C_EV_IRQHandler+0x594>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800680e:	4a10      	ldr	r2, [pc, #64]	; (8006850 <HAL_I2C_EV_IRQHandler+0x5c0>)
 8006810:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8006812:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8006814:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006816:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800681e:	f7ff fc9e 	bl	800615e <HAL_I2C_ListenCpltCallback>
 8006822:	e69c      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006824:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006826:	2b22      	cmp	r3, #34	; 0x22
 8006828:	d002      	beq.n	8006830 <HAL_I2C_EV_IRQHandler+0x5a0>
 800682a:	2a22      	cmp	r2, #34	; 0x22
 800682c:	f47f ae97 	bne.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006830:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8006832:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8006834:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006836:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800683a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800683e:	f7ff fc8c 	bl	800615a <HAL_I2C_SlaveRxCpltCallback>
 8006842:	e68c      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006844:	00010040 	.word	0x00010040
 8006848:	00010002 	.word	0x00010002
 800684c:	00010010 	.word	0x00010010
 8006850:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8006854:	4e39      	ldr	r6, [pc, #228]	; (800693c <HAL_I2C_EV_IRQHandler+0x6ac>)
 8006856:	4c3a      	ldr	r4, [pc, #232]	; (8006940 <HAL_I2C_EV_IRQHandler+0x6b0>)
 8006858:	402e      	ands	r6, r5
 800685a:	400c      	ands	r4, r1
 800685c:	2e00      	cmp	r6, #0
 800685e:	d036      	beq.n	80068ce <HAL_I2C_EV_IRQHandler+0x63e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8006860:	4d38      	ldr	r5, [pc, #224]	; (8006944 <HAL_I2C_EV_IRQHandler+0x6b4>)
 8006862:	400d      	ands	r5, r1
 8006864:	b33d      	cbz	r5, 80068b6 <HAL_I2C_EV_IRQHandler+0x626>
 8006866:	0555      	lsls	r5, r2, #21
 8006868:	d525      	bpl.n	80068b6 <HAL_I2C_EV_IRQHandler+0x626>
 800686a:	bb24      	cbnz	r4, 80068b6 <HAL_I2C_EV_IRQHandler+0x626>
  uint32_t CurrentState = hi2c->State;
 800686c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8006870:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006872:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8006874:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 8006876:	2a00      	cmp	r2, #0
 8006878:	f43f ae71 	beq.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800687c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800687e:	1c54      	adds	r4, r2, #1
 8006880:	6244      	str	r4, [r0, #36]	; 0x24
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8006886:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006888:	3a01      	subs	r2, #1
 800688a:	b292      	uxth	r2, r2
 800688c:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800688e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006890:	b292      	uxth	r2, r2
 8006892:	2a00      	cmp	r2, #0
 8006894:	f47f ae63 	bne.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006898:	2929      	cmp	r1, #41	; 0x29
 800689a:	f47f ae60 	bne.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a4:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068a6:	2321      	movs	r3, #33	; 0x21
 80068a8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068aa:	2328      	movs	r3, #40	; 0x28
 80068ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068b0:	f7ff fc52 	bl	8006158 <HAL_I2C_SlaveTxCpltCallback>
 80068b4:	e653      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	f43f ae51 	beq.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 80068bc:	0594      	lsls	r4, r2, #22
 80068be:	f57f ae4e 	bpl.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
  if(hi2c->XferCount != 0U)
 80068c2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80068c4:	b292      	uxth	r2, r2
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	f47f ae67 	bne.w	800659a <HAL_I2C_EV_IRQHandler+0x30a>
 80068cc:	e647      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80068ce:	4d1e      	ldr	r5, [pc, #120]	; (8006948 <HAL_I2C_EV_IRQHandler+0x6b8>)
 80068d0:	400d      	ands	r5, r1
 80068d2:	b335      	cbz	r5, 8006922 <HAL_I2C_EV_IRQHandler+0x692>
 80068d4:	0551      	lsls	r1, r2, #21
 80068d6:	d524      	bpl.n	8006922 <HAL_I2C_EV_IRQHandler+0x692>
 80068d8:	bb1c      	cbnz	r4, 8006922 <HAL_I2C_EV_IRQHandler+0x692>
  uint32_t CurrentState = hi2c->State;
 80068da:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80068de:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80068e0:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 80068e2:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80068e4:	2900      	cmp	r1, #0
 80068e6:	f43f ae3a 	beq.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80068ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	1c4c      	adds	r4, r1, #1
 80068f0:	6244      	str	r4, [r0, #36]	; 0x24
 80068f2:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80068f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f ae2c 	bne.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006906:	2a2a      	cmp	r2, #42	; 0x2a
 8006908:	f47f ae29 	bne.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800690c:	6802      	ldr	r2, [r0, #0]
 800690e:	6853      	ldr	r3, [r2, #4]
 8006910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006914:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006916:	2322      	movs	r3, #34	; 0x22
 8006918:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800691a:	2328      	movs	r3, #40	; 0x28
 800691c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8006920:	e78d      	b.n	800683e <HAL_I2C_EV_IRQHandler+0x5ae>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8006922:	2c00      	cmp	r4, #0
 8006924:	f43f ae1b 	beq.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006928:	0592      	lsls	r2, r2, #22
 800692a:	f57f ae18 	bpl.w	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
  if(hi2c->XferCount != 0U)
 800692e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8006930:	b292      	uxth	r2, r2
 8006932:	2a00      	cmp	r2, #0
 8006934:	f47f ae7b 	bne.w	800662e <HAL_I2C_EV_IRQHandler+0x39e>
 8006938:	e611      	b.n	800655e <HAL_I2C_EV_IRQHandler+0x2ce>
 800693a:	bf00      	nop
 800693c:	00100004 	.word	0x00100004
 8006940:	00010004 	.word	0x00010004
 8006944:	00010080 	.word	0x00010080
 8006948:	00010040 	.word	0x00010040

0800694c <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800694c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800694e:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006950:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006952:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 800695c:	2200      	movs	r2, #0
 800695e:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006960:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8006962:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006964:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8006966:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800696a:	2960      	cmp	r1, #96	; 0x60
 800696c:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8006970:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8006978:	d107      	bne.n	800698a <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800697a:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	f022 0201 	bic.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006984:	f7ff fbee 	bl	8006164 <HAL_I2C_AbortCpltCallback>
 8006988:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8006992:	f7ff fbe6 	bl	8006162 <HAL_I2C_ErrorCallback>
 8006996:	bd08      	pop	{r3, pc}

08006998 <HAL_I2C_GetState>:
  return hi2c->State;
 8006998:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800699c:	4770      	bx	lr

0800699e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800699e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80069a0:	4604      	mov	r4, r0
 80069a2:	b1d8      	cbz	r0, 80069dc <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80069a4:	6803      	ldr	r3, [r0, #0]
 80069a6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80069aa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80069ac:	f245 5255 	movw	r2, #21845	; 0x5555
 80069b0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80069b2:	6842      	ldr	r2, [r0, #4]
 80069b4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80069b6:	6882      	ldr	r2, [r0, #8]
 80069b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80069ba:	f7fe f8c5 	bl	8004b48 <HAL_GetTick>
 80069be:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	68d8      	ldr	r0, [r3, #12]
 80069c4:	b918      	cbnz	r0, 80069ce <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80069c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80069ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80069ce:	f7fe f8bb 	bl	8004b48 <HAL_GetTick>
 80069d2:	1b40      	subs	r0, r0, r5
 80069d4:	2830      	cmp	r0, #48	; 0x30
 80069d6:	d9f3      	bls.n	80069c0 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 80069d8:	2003      	movs	r0, #3
}
 80069da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80069dc:	2001      	movs	r0, #1
 80069de:	bd38      	pop	{r3, r4, r5, pc}

080069e0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80069e0:	6803      	ldr	r3, [r0, #0]
 80069e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80069e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80069e8:	2000      	movs	r0, #0
 80069ea:	4770      	bx	lr

080069ec <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ec:	6803      	ldr	r3, [r0, #0]
{
 80069ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f2:	07d8      	lsls	r0, r3, #31
 80069f4:	d43b      	bmi.n	8006a6e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	0799      	lsls	r1, r3, #30
 80069fa:	f100 8086 	bmi.w	8006b0a <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	071e      	lsls	r6, r3, #28
 8006a02:	f100 80d1 	bmi.w	8006ba8 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	075d      	lsls	r5, r3, #29
 8006a0a:	d52a      	bpl.n	8006a62 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	4b8e      	ldr	r3, [pc, #568]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a12:	4d8f      	ldr	r5, [pc, #572]	; (8006c50 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2c:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8006a2e:	f7fe f88b 	bl	8004b48 <HAL_GetTick>
 8006a32:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	05da      	lsls	r2, r3, #23
 8006a38:	f140 80d8 	bpl.w	8006bec <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a3c:	68a3      	ldr	r3, [r4, #8]
 8006a3e:	4d83      	ldr	r5, [pc, #524]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 80da 	bne.w	8006bfa <HAL_RCC_OscConfig+0x20e>
 8006a46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fe f87b 	bl	8004b48 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a52:	4d7e      	ldr	r5, [pc, #504]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8006a54:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a56:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	f140 80ed 	bpl.w	8006c3c <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a62:	69a2      	ldr	r2, [r4, #24]
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	f040 80f9 	bne.w	8006c5c <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e015      	b.n	8006a9a <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a6e:	4b77      	ldr	r3, [pc, #476]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	f002 020c 	and.w	r2, r2, #12
 8006a76:	2a04      	cmp	r2, #4
 8006a78:	d007      	beq.n	8006a8a <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a80:	2a08      	cmp	r2, #8
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	025a      	lsls	r2, r3, #9
 8006a88:	d509      	bpl.n	8006a9e <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8a:	4b70      	ldr	r3, [pc, #448]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	039b      	lsls	r3, r3, #14
 8006a90:	d5b1      	bpl.n	80069f6 <HAL_RCC_OscConfig+0xa>
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1ae      	bne.n	80069f6 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8006a98:	2001      	movs	r0, #1
}
 8006a9a:	b003      	add	sp, #12
 8006a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	4d6a      	ldr	r5, [pc, #424]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d111      	bne.n	8006acc <HAL_RCC_OscConfig+0xe0>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ab0:	f7fe f84a 	bl	8004b48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab4:	4d65      	ldr	r5, [pc, #404]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8006ab6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	039f      	lsls	r7, r3, #14
 8006abc:	d49b      	bmi.n	80069f6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006abe:	f7fe f843 	bl	8004b48 <HAL_GetTick>
 8006ac2:	1b80      	subs	r0, r0, r6
 8006ac4:	2864      	cmp	r0, #100	; 0x64
 8006ac6:	d9f7      	bls.n	8006ab8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8006ac8:	2003      	movs	r0, #3
 8006aca:	e7e6      	b.n	8006a9a <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad0:	d104      	bne.n	8006adc <HAL_RCC_OscConfig+0xf0>
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	e7e5      	b.n	8006aa8 <HAL_RCC_OscConfig+0xbc>
 8006adc:	682a      	ldr	r2, [r5, #0]
 8006ade:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ae2:	602a      	str	r2, [r5, #0]
 8006ae4:	682a      	ldr	r2, [r5, #0]
 8006ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aea:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1df      	bne.n	8006ab0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8006af0:	f7fe f82a 	bl	8004b48 <HAL_GetTick>
 8006af4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	0398      	lsls	r0, r3, #14
 8006afa:	f57f af7c 	bpl.w	80069f6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006afe:	f7fe f823 	bl	8004b48 <HAL_GetTick>
 8006b02:	1b80      	subs	r0, r0, r6
 8006b04:	2864      	cmp	r0, #100	; 0x64
 8006b06:	d9f6      	bls.n	8006af6 <HAL_RCC_OscConfig+0x10a>
 8006b08:	e7de      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b0a:	4b50      	ldr	r3, [pc, #320]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	f012 0f0c 	tst.w	r2, #12
 8006b12:	d007      	beq.n	8006b24 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b1a:	2a08      	cmp	r2, #8
 8006b1c:	d116      	bne.n	8006b4c <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	0259      	lsls	r1, r3, #9
 8006b22:	d413      	bmi.n	8006b4c <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b24:	4b49      	ldr	r3, [pc, #292]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	0792      	lsls	r2, r2, #30
 8006b2a:	d502      	bpl.n	8006b32 <HAL_RCC_OscConfig+0x146>
 8006b2c:	68e2      	ldr	r2, [r4, #12]
 8006b2e:	2a01      	cmp	r2, #1
 8006b30:	d1b2      	bne.n	8006a98 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	22f8      	movs	r2, #248	; 0xf8
 8006b36:	fa92 f2a2 	rbit	r2, r2
 8006b3a:	fab2 f182 	clz	r1, r2
 8006b3e:	6922      	ldr	r2, [r4, #16]
 8006b40:	408a      	lsls	r2, r1
 8006b42:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b4a:	e758      	b.n	80069fe <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b4c:	68e2      	ldr	r2, [r4, #12]
 8006b4e:	4b41      	ldr	r3, [pc, #260]	; (8006c54 <HAL_RCC_OscConfig+0x268>)
 8006b50:	b1da      	cbz	r2, 8006b8a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b56:	f7fd fff7 	bl	8004b48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5a:	4d3c      	ldr	r5, [pc, #240]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8006b5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d50c      	bpl.n	8006b7e <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b64:	6829      	ldr	r1, [r5, #0]
 8006b66:	23f8      	movs	r3, #248	; 0xf8
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	fab3 f283 	clz	r2, r3
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	4093      	lsls	r3, r2
 8006b74:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	e73f      	b.n	80069fe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b7e:	f7fd ffe3 	bl	8004b48 <HAL_GetTick>
 8006b82:	1b80      	subs	r0, r0, r6
 8006b84:	2802      	cmp	r0, #2
 8006b86:	d9ea      	bls.n	8006b5e <HAL_RCC_OscConfig+0x172>
 8006b88:	e79e      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8006b8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b8c:	f7fd ffdc 	bl	8004b48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b90:	4d2e      	ldr	r5, [pc, #184]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8006b92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	079f      	lsls	r7, r3, #30
 8006b98:	f57f af31 	bpl.w	80069fe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b9c:	f7fd ffd4 	bl	8004b48 <HAL_GetTick>
 8006ba0:	1b80      	subs	r0, r0, r6
 8006ba2:	2802      	cmp	r0, #2
 8006ba4:	d9f6      	bls.n	8006b94 <HAL_RCC_OscConfig+0x1a8>
 8006ba6:	e78f      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ba8:	6962      	ldr	r2, [r4, #20]
 8006baa:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <HAL_RCC_OscConfig+0x26c>)
 8006bac:	b17a      	cbz	r2, 8006bce <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006bb2:	f7fd ffc9 	bl	8004b48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb6:	4d25      	ldr	r5, [pc, #148]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8006bb8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006bbc:	0798      	lsls	r0, r3, #30
 8006bbe:	f53f af22 	bmi.w	8006a06 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc2:	f7fd ffc1 	bl	8004b48 <HAL_GetTick>
 8006bc6:	1b80      	subs	r0, r0, r6
 8006bc8:	2802      	cmp	r0, #2
 8006bca:	d9f6      	bls.n	8006bba <HAL_RCC_OscConfig+0x1ce>
 8006bcc:	e77c      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8006bce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006bd0:	f7fd ffba 	bl	8004b48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	4d1d      	ldr	r5, [pc, #116]	; (8006c4c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8006bd6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006bda:	0799      	lsls	r1, r3, #30
 8006bdc:	f57f af13 	bpl.w	8006a06 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006be0:	f7fd ffb2 	bl	8004b48 <HAL_GetTick>
 8006be4:	1b80      	subs	r0, r0, r6
 8006be6:	2802      	cmp	r0, #2
 8006be8:	d9f6      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x1ec>
 8006bea:	e76d      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bec:	f7fd ffac 	bl	8004b48 <HAL_GetTick>
 8006bf0:	1b80      	subs	r0, r0, r6
 8006bf2:	2802      	cmp	r0, #2
 8006bf4:	f67f af1e 	bls.w	8006a34 <HAL_RCC_OscConfig+0x48>
 8006bf8:	e766      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d104      	bne.n	8006c08 <HAL_RCC_OscConfig+0x21c>
 8006bfe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c00:	f043 0304 	orr.w	r3, r3, #4
 8006c04:	672b      	str	r3, [r5, #112]	; 0x70
 8006c06:	e71e      	b.n	8006a46 <HAL_RCC_OscConfig+0x5a>
 8006c08:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	672a      	str	r2, [r5, #112]	; 0x70
 8006c10:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006c12:	f022 0204 	bic.w	r2, r2, #4
 8006c16:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f47f af18 	bne.w	8006a4e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8006c1e:	f7fd ff93 	bl	8004b48 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c22:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006c26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c2a:	0798      	lsls	r0, r3, #30
 8006c2c:	f57f af19 	bpl.w	8006a62 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fd ff8a 	bl	8004b48 <HAL_GetTick>
 8006c34:	1b80      	subs	r0, r0, r6
 8006c36:	42b8      	cmp	r0, r7
 8006c38:	d9f6      	bls.n	8006c28 <HAL_RCC_OscConfig+0x23c>
 8006c3a:	e745      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f7fd ff84 	bl	8004b48 <HAL_GetTick>
 8006c40:	1b80      	subs	r0, r0, r6
 8006c42:	42b8      	cmp	r0, r7
 8006c44:	f67f af09 	bls.w	8006a5a <HAL_RCC_OscConfig+0x6e>
 8006c48:	e73e      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
 8006c4a:	bf00      	nop
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40007000 	.word	0x40007000
 8006c54:	42470000 	.word	0x42470000
 8006c58:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c5c:	4d2b      	ldr	r5, [pc, #172]	; (8006d0c <HAL_RCC_OscConfig+0x320>)
 8006c5e:	68ab      	ldr	r3, [r5, #8]
 8006c60:	f003 030c 	and.w	r3, r3, #12
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	f43f af17 	beq.w	8006a98 <HAL_RCC_OscConfig+0xac>
 8006c6a:	4e29      	ldr	r6, [pc, #164]	; (8006d10 <HAL_RCC_OscConfig+0x324>)
 8006c6c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c6e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006c70:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c72:	d13e      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8006c74:	f7fd ff68 	bl	8004b48 <HAL_GetTick>
 8006c78:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	0199      	lsls	r1, r3, #6
 8006c7e:	d432      	bmi.n	8006ce6 <HAL_RCC_OscConfig+0x2fa>
 8006c80:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8006c84:	fa97 f7a7 	rbit	r7, r7
 8006c88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c8c:	fab7 f787 	clz	r7, r7
 8006c90:	fa92 f2a2 	rbit	r2, r2
 8006c94:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006c98:	fab2 f082 	clz	r0, r2
 8006c9c:	fa91 f1a1 	rbit	r1, r1
 8006ca0:	6a22      	ldr	r2, [r4, #32]
 8006ca2:	69e3      	ldr	r3, [r4, #28]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ca8:	fa02 f707 	lsl.w	r7, r2, r7
 8006cac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006cae:	0852      	lsrs	r2, r2, #1
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	4082      	lsls	r2, r0
 8006cb4:	433b      	orrs	r3, r7
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cba:	4c14      	ldr	r4, [pc, #80]	; (8006d0c <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cbc:	fab1 f181 	clz	r1, r1
 8006cc0:	fa02 f101 	lsl.w	r1, r2, r1
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006cc8:	2301      	movs	r3, #1
 8006cca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006ccc:	f7fd ff3c 	bl	8004b48 <HAL_GetTick>
 8006cd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	019a      	lsls	r2, r3, #6
 8006cd6:	f53f aec8 	bmi.w	8006a6a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cda:	f7fd ff35 	bl	8004b48 <HAL_GetTick>
 8006cde:	1b40      	subs	r0, r0, r5
 8006ce0:	2802      	cmp	r0, #2
 8006ce2:	d9f6      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x2e6>
 8006ce4:	e6f0      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce6:	f7fd ff2f 	bl	8004b48 <HAL_GetTick>
 8006cea:	1bc0      	subs	r0, r0, r7
 8006cec:	2802      	cmp	r0, #2
 8006cee:	d9c4      	bls.n	8006c7a <HAL_RCC_OscConfig+0x28e>
 8006cf0:	e6ea      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8006cf2:	f7fd ff29 	bl	8004b48 <HAL_GetTick>
 8006cf6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	019b      	lsls	r3, r3, #6
 8006cfc:	f57f aeb5 	bpl.w	8006a6a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d00:	f7fd ff22 	bl	8004b48 <HAL_GetTick>
 8006d04:	1b00      	subs	r0, r0, r4
 8006d06:	2802      	cmp	r0, #2
 8006d08:	d9f6      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x30c>
 8006d0a:	e6dd      	b.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	42470060 	.word	0x42470060

08006d14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d14:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x68>)
 8006d16:	6893      	ldr	r3, [r2, #8]
 8006d18:	f003 030c 	and.w	r3, r3, #12
 8006d1c:	2b04      	cmp	r3, #4
{
 8006d1e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d20:	d003      	beq.n	8006d2a <HAL_RCC_GetSysClockFreq+0x16>
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d003      	beq.n	8006d2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d26:	4816      	ldr	r0, [pc, #88]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006d28:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8006d2a:	4816      	ldr	r0, [pc, #88]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x70>)
 8006d2c:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d2e:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d30:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d36:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006d3a:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8006d3e:	6853      	ldr	r3, [r2, #4]
 8006d40:	fa94 f0a4 	rbit	r0, r4
 8006d44:	fab0 f080 	clz	r0, r0
 8006d48:	ea03 0304 	and.w	r3, r3, r4
 8006d4c:	fa23 f300 	lsr.w	r3, r3, r0
 8006d50:	bf14      	ite	ne
 8006d52:	480c      	ldrne	r0, [pc, #48]	; (8006d84 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8006d54:	480a      	ldreq	r0, [pc, #40]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d56:	fbb0 f0f1 	udiv	r0, r0, r1
 8006d5a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x68>)
 8006d5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	fa92 f2a2 	rbit	r2, r2
 8006d68:	fab2 f282 	clz	r2, r2
 8006d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d70:	40d3      	lsrs	r3, r2
 8006d72:	3301      	adds	r3, #1
 8006d74:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8006d76:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d7a:	bd10      	pop	{r4, pc}
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	007a1200 	.word	0x007a1200

08006d88 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006d88:	4b56      	ldr	r3, [pc, #344]	; (8006ee4 <HAL_RCC_ClockConfig+0x15c>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	f002 020f 	and.w	r2, r2, #15
 8006d90:	428a      	cmp	r2, r1
{
 8006d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	4605      	mov	r5, r0
 8006d98:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006d9a:	d330      	bcc.n	8006dfe <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	682a      	ldr	r2, [r5, #0]
 8006d9e:	0794      	lsls	r4, r2, #30
 8006da0:	d437      	bmi.n	8006e12 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006da2:	07d0      	lsls	r0, r2, #31
 8006da4:	d43d      	bmi.n	8006e22 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006da6:	4b4f      	ldr	r3, [pc, #316]	; (8006ee4 <HAL_RCC_ClockConfig+0x15c>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f002 020f 	and.w	r2, r2, #15
 8006dae:	4296      	cmp	r6, r2
 8006db0:	f0c0 8088 	bcc.w	8006ec4 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db4:	682a      	ldr	r2, [r5, #0]
 8006db6:	0751      	lsls	r1, r2, #29
 8006db8:	f100 808c 	bmi.w	8006ed4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbc:	0713      	lsls	r3, r2, #28
 8006dbe:	d507      	bpl.n	8006dd0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dc0:	4a49      	ldr	r2, [pc, #292]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006dc2:	6929      	ldr	r1, [r5, #16]
 8006dc4:	6893      	ldr	r3, [r2, #8]
 8006dc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006dca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006dce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006dd0:	f7ff ffa0 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
 8006dd4:	4b44      	ldr	r3, [pc, #272]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006dd6:	22f0      	movs	r2, #240	; 0xf0
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	fa92 f2a2 	rbit	r2, r2
 8006dde:	fab2 f282 	clz	r2, r2
 8006de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de6:	40d3      	lsrs	r3, r2
 8006de8:	4a40      	ldr	r2, [pc, #256]	; (8006eec <HAL_RCC_ClockConfig+0x164>)
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	40d8      	lsrs	r0, r3
 8006dee:	4b40      	ldr	r3, [pc, #256]	; (8006ef0 <HAL_RCC_ClockConfig+0x168>)
 8006df0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7fd fe72 	bl	8004adc <HAL_InitTick>
  return HAL_OK;
 8006df8:	2000      	movs	r0, #0
}
 8006dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfe:	b2ca      	uxtb	r2, r1
 8006e00:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d0c7      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e12:	4935      	ldr	r1, [pc, #212]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006e14:	68a8      	ldr	r0, [r5, #8]
 8006e16:	688b      	ldr	r3, [r1, #8]
 8006e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e1c:	4303      	orrs	r3, r0
 8006e1e:	608b      	str	r3, [r1, #8]
 8006e20:	e7bf      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e22:	686a      	ldr	r2, [r5, #4]
 8006e24:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006e26:	2a01      	cmp	r2, #1
 8006e28:	d11e      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e30:	d0ec      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e32:	4c2d      	ldr	r4, [pc, #180]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006e34:	68a3      	ldr	r3, [r4, #8]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006e3e:	f7fd fe83 	bl	8004b48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e42:	686b      	ldr	r3, [r5, #4]
 8006e44:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8006e46:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e48:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e4c:	d116      	bne.n	8006e7c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	f003 030c 	and.w	r3, r3, #12
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d0a6      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e58:	f7fd fe76 	bl	8004b48 <HAL_GetTick>
 8006e5c:	1bc0      	subs	r0, r0, r7
 8006e5e:	4540      	cmp	r0, r8
 8006e60:	d9f5      	bls.n	8006e4e <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8006e62:	2003      	movs	r0, #3
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8006e68:	1e91      	subs	r1, r2, #2
 8006e6a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8006e6e:	d802      	bhi.n	8006e76 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e74:	e7dc      	b.n	8006e30 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e76:	f013 0f02 	tst.w	r3, #2
 8006e7a:	e7d9      	b.n	8006e30 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d10a      	bne.n	8006e96 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e80:	68a3      	ldr	r3, [r4, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d08d      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e8a:	f7fd fe5d 	bl	8004b48 <HAL_GetTick>
 8006e8e:	1bc0      	subs	r0, r0, r7
 8006e90:	4540      	cmp	r0, r8
 8006e92:	d9f5      	bls.n	8006e80 <HAL_RCC_ClockConfig+0xf8>
 8006e94:	e7e5      	b.n	8006e62 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d10f      	bne.n	8006eba <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	d080      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea4:	f7fd fe50 	bl	8004b48 <HAL_GetTick>
 8006ea8:	1bc0      	subs	r0, r0, r7
 8006eaa:	4540      	cmp	r0, r8
 8006eac:	d9f5      	bls.n	8006e9a <HAL_RCC_ClockConfig+0x112>
 8006eae:	e7d8      	b.n	8006e62 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb0:	f7fd fe4a 	bl	8004b48 <HAL_GetTick>
 8006eb4:	1bc0      	subs	r0, r0, r7
 8006eb6:	4540      	cmp	r0, r8
 8006eb8:	d8d3      	bhi.n	8006e62 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	f013 0f0c 	tst.w	r3, #12
 8006ec0:	d1f6      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x128>
 8006ec2:	e770      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec4:	b2f2      	uxtb	r2, r6
 8006ec6:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	429e      	cmp	r6, r3
 8006ed0:	d19c      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x84>
 8006ed2:	e76f      	b.n	8006db4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <HAL_RCC_ClockConfig+0x160>)
 8006ed6:	68e8      	ldr	r0, [r5, #12]
 8006ed8:	688b      	ldr	r3, [r1, #8]
 8006eda:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006ede:	4303      	orrs	r3, r0
 8006ee0:	608b      	str	r3, [r1, #8]
 8006ee2:	e76b      	b.n	8006dbc <HAL_RCC_ClockConfig+0x34>
 8006ee4:	40023c00 	.word	0x40023c00
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	0800a2d1 	.word	0x0800a2d1
 8006ef0:	20000004 	.word	0x20000004

08006ef4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006ef4:	4b01      	ldr	r3, [pc, #4]	; (8006efc <HAL_RCC_GetHCLKFreq+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000004 	.word	0x20000004

08006f00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f02:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	fa92 f2a2 	rbit	r2, r2
 8006f0c:	fab2 f282 	clz	r2, r2
 8006f10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006f14:	40d3      	lsrs	r3, r2
 8006f16:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f18:	5cd3      	ldrb	r3, [r2, r3]
 8006f1a:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006f1c:	6810      	ldr	r0, [r2, #0]
}
 8006f1e:	40d8      	lsrs	r0, r3
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40023800 	.word	0x40023800
 8006f28:	0800a2e1 	.word	0x0800a2e1
 8006f2c:	20000004 	.word	0x20000004

08006f30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f32:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	fa92 f2a2 	rbit	r2, r2
 8006f3c:	fab2 f282 	clz	r2, r2
 8006f40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f44:	40d3      	lsrs	r3, r2
 8006f46:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f48:	5cd3      	ldrb	r3, [r2, r3]
 8006f4a:	4a04      	ldr	r2, [pc, #16]	; (8006f5c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006f4c:	6810      	ldr	r0, [r2, #0]
} 
 8006f4e:	40d8      	lsrs	r0, r3
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40023800 	.word	0x40023800
 8006f58:	0800a2e1 	.word	0x0800a2e1
 8006f5c:	20000004 	.word	0x20000004

08006f60 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f60:	6a03      	ldr	r3, [r0, #32]
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f68:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006f6a:	6842      	ldr	r2, [r0, #4]
{
 8006f6c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f6e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f72:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006f76:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f78:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006f7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006f7e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006f80:	4c0c      	ldr	r4, [pc, #48]	; (8006fb4 <TIM_OC1_SetConfig+0x54>)
 8006f82:	42a0      	cmp	r0, r4
 8006f84:	d009      	beq.n	8006f9a <TIM_OC1_SetConfig+0x3a>
 8006f86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006f8a:	42a0      	cmp	r0, r4
 8006f8c:	d005      	beq.n	8006f9a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f90:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f92:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006f94:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006f96:	6203      	str	r3, [r0, #32]
} 
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8006f9a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f9c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f9e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006fa2:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fa6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006faa:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb0:	4322      	orrs	r2, r4
 8006fb2:	e7ec      	b.n	8006f8e <TIM_OC1_SetConfig+0x2e>
 8006fb4:	40010000 	.word	0x40010000

08006fb8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb8:	6a03      	ldr	r3, [r0, #32]
 8006fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fbe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006fc2:	6842      	ldr	r2, [r0, #4]
{
 8006fc4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc6:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8006fca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006fce:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fd0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006fd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fd6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006fda:	4c0e      	ldr	r4, [pc, #56]	; (8007014 <TIM_OC3_SetConfig+0x5c>)
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d009      	beq.n	8006ff4 <TIM_OC3_SetConfig+0x3c>
 8006fe0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d005      	beq.n	8006ff4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fea:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006fec:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006fee:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff0:	6203      	str	r3, [r0, #32]
}
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ff4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ff6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007000:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007002:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007006:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8007008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800700c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007010:	e7ea      	b.n	8006fe8 <TIM_OC3_SetConfig+0x30>
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000

08007018 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007018:	6a03      	ldr	r3, [r0, #32]
 800701a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800701e:	6203      	str	r3, [r0, #32]
{
 8007020:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007024:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007026:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007028:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800702a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007032:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007034:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007038:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800703c:	4d09      	ldr	r5, [pc, #36]	; (8007064 <TIM_OC4_SetConfig+0x4c>)
 800703e:	42a8      	cmp	r0, r5
 8007040:	d009      	beq.n	8007056 <TIM_OC4_SetConfig+0x3e>
 8007042:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007046:	42a8      	cmp	r0, r5
 8007048:	d005      	beq.n	8007056 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800704c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800704e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007050:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007052:	6204      	str	r4, [r0, #32]
}
 8007054:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007056:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800705c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8007060:	e7f3      	b.n	800704a <TIM_OC4_SetConfig+0x32>
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000

08007068 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 8007068:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800706a:	2302      	movs	r3, #2
 800706c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8007078:	2301      	movs	r3, #1
 800707a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 800707e:	2000      	movs	r0, #0
 8007080:	4770      	bx	lr

08007082 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007082:	6803      	ldr	r3, [r0, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	2000      	movs	r0, #0
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_PeriodElapsedCallback>:
 8007098:	4770      	bx	lr

0800709a <HAL_TIM_OC_DelayElapsedCallback>:
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_IC_CaptureCallback>:
 800709c:	4770      	bx	lr

0800709e <HAL_TIM_PWM_PulseFinishedCallback>:
 800709e:	4770      	bx	lr

080070a0 <HAL_TIM_TriggerCallback>:
 80070a0:	4770      	bx	lr

080070a2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a2:	6803      	ldr	r3, [r0, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	0791      	lsls	r1, r2, #30
{
 80070a8:	b510      	push	{r4, lr}
 80070aa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ac:	d50e      	bpl.n	80070cc <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	0792      	lsls	r2, r2, #30
 80070b2:	d50b      	bpl.n	80070cc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070b4:	f06f 0202 	mvn.w	r2, #2
 80070b8:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070bc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070be:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070c0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c2:	d077      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80070c4:	f7ff ffea 	bl	800709c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c8:	2300      	movs	r3, #0
 80070ca:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	0750      	lsls	r0, r2, #29
 80070d2:	d510      	bpl.n	80070f6 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	0751      	lsls	r1, r2, #29
 80070d8:	d50d      	bpl.n	80070f6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070da:	f06f 0204 	mvn.w	r2, #4
 80070de:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070e0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070e2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070e8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ec:	d068      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80070ee:	f7ff ffd5 	bl	800709c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	2300      	movs	r3, #0
 80070f4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	0712      	lsls	r2, r2, #28
 80070fc:	d50f      	bpl.n	800711e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	0710      	lsls	r0, r2, #28
 8007102:	d50c      	bpl.n	800711e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007104:	f06f 0208 	mvn.w	r2, #8
 8007108:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800710a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800710e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007110:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8007112:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007114:	d05a      	beq.n	80071cc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	f7ff ffc1 	bl	800709c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711a:	2300      	movs	r3, #0
 800711c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	06d2      	lsls	r2, r2, #27
 8007124:	d510      	bpl.n	8007148 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	06d0      	lsls	r0, r2, #27
 800712a:	d50d      	bpl.n	8007148 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800712c:	f06f 0210 	mvn.w	r2, #16
 8007130:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007132:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007134:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007136:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800713c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800713e:	d04b      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007140:	f7ff ffac 	bl	800709c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007144:	2300      	movs	r3, #0
 8007146:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	07d1      	lsls	r1, r2, #31
 800714e:	d508      	bpl.n	8007162 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	07d2      	lsls	r2, r2, #31
 8007154:	d505      	bpl.n	8007162 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007156:	f06f 0201 	mvn.w	r2, #1
 800715a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800715c:	4620      	mov	r0, r4
 800715e:	f7ff ff9b 	bl	8007098 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	0610      	lsls	r0, r2, #24
 8007168:	d508      	bpl.n	800717c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	0611      	lsls	r1, r2, #24
 800716e:	d505      	bpl.n	800717c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007174:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f9db 	bl	8007532 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	0652      	lsls	r2, r2, #25
 8007182:	d508      	bpl.n	8007196 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	0650      	lsls	r0, r2, #25
 8007188:	d505      	bpl.n	8007196 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800718a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800718e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007190:	4620      	mov	r0, r4
 8007192:	f7ff ff85 	bl	80070a0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	0691      	lsls	r1, r2, #26
 800719c:	d522      	bpl.n	80071e4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	0692      	lsls	r2, r2, #26
 80071a2:	d51f      	bpl.n	80071e4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071a4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80071a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071aa:	611a      	str	r2, [r3, #16]
}
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80071b0:	f000 b9be 	b.w	8007530 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b4:	f7ff ff71 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7ff ff70 	bl	800709e <HAL_TIM_PWM_PulseFinishedCallback>
 80071be:	e783      	b.n	80070c8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	f7ff ff6b 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff ff6a 	bl	800709e <HAL_TIM_PWM_PulseFinishedCallback>
 80071ca:	e792      	b.n	80070f2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071cc:	f7ff ff65 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff ff64 	bl	800709e <HAL_TIM_PWM_PulseFinishedCallback>
 80071d6:	e7a0      	b.n	800711a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d8:	f7ff ff5f 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071dc:	4620      	mov	r0, r4
 80071de:	f7ff ff5e 	bl	800709e <HAL_TIM_PWM_PulseFinishedCallback>
 80071e2:	e7af      	b.n	8007144 <HAL_TIM_IRQHandler+0xa2>
 80071e4:	bd10      	pop	{r4, pc}
	...

080071e8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80071e8:	4a2e      	ldr	r2, [pc, #184]	; (80072a4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80071ea:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80071ec:	4290      	cmp	r0, r2
 80071ee:	d012      	beq.n	8007216 <TIM_Base_SetConfig+0x2e>
 80071f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80071f4:	d00f      	beq.n	8007216 <TIM_Base_SetConfig+0x2e>
 80071f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80071fa:	4290      	cmp	r0, r2
 80071fc:	d00b      	beq.n	8007216 <TIM_Base_SetConfig+0x2e>
 80071fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007202:	4290      	cmp	r0, r2
 8007204:	d007      	beq.n	8007216 <TIM_Base_SetConfig+0x2e>
 8007206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800720a:	4290      	cmp	r0, r2
 800720c:	d003      	beq.n	8007216 <TIM_Base_SetConfig+0x2e>
 800720e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007212:	4290      	cmp	r0, r2
 8007214:	d11d      	bne.n	8007252 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8007216:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800721c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800721e:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <TIM_Base_SetConfig+0xbc>)
 8007220:	4290      	cmp	r0, r2
 8007222:	d104      	bne.n	800722e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007224:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800722a:	4313      	orrs	r3, r2
 800722c:	e028      	b.n	8007280 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800722e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007232:	d0f7      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007234:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <TIM_Base_SetConfig+0xc0>)
 8007236:	4290      	cmp	r0, r2
 8007238:	d0f4      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 800723a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800723e:	4290      	cmp	r0, r2
 8007240:	d0f0      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007246:	4290      	cmp	r0, r2
 8007248:	d0ec      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 800724a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800724e:	4290      	cmp	r0, r2
 8007250:	d0e8      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_Base_SetConfig+0xc4>)
 8007254:	4290      	cmp	r0, r2
 8007256:	d0e5      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800725c:	4290      	cmp	r0, r2
 800725e:	d0e1      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007264:	4290      	cmp	r0, r2
 8007266:	d0dd      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007268:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800726c:	4290      	cmp	r0, r2
 800726e:	d0d9      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007274:	4290      	cmp	r0, r2
 8007276:	d0d5      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
 8007278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800727c:	4290      	cmp	r0, r2
 800727e:	d0d1      	beq.n	8007224 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8007280:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007282:	688b      	ldr	r3, [r1, #8]
 8007284:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007286:	680b      	ldr	r3, [r1, #0]
 8007288:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <TIM_Base_SetConfig+0xbc>)
 800728c:	4298      	cmp	r0, r3
 800728e:	d006      	beq.n	800729e <TIM_Base_SetConfig+0xb6>
 8007290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007294:	4298      	cmp	r0, r3
 8007296:	d002      	beq.n	800729e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8007298:	2301      	movs	r3, #1
 800729a:	6143      	str	r3, [r0, #20]
}
 800729c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	6303      	str	r3, [r0, #48]	; 0x30
 80072a2:	e7f9      	b.n	8007298 <TIM_Base_SetConfig+0xb0>
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40014000 	.word	0x40014000

080072b0 <HAL_TIM_Base_Init>:
{ 
 80072b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80072b2:	4604      	mov	r4, r0
 80072b4:	b1a0      	cbz	r0, 80072e0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80072b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80072ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072be:	b91b      	cbnz	r3, 80072c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80072c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80072c4:	f7fd f9e0 	bl	8004688 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80072c8:	2302      	movs	r3, #2
 80072ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	1d21      	adds	r1, r4, #4
 80072d2:	f7ff ff89 	bl	80071e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80072dc:	2000      	movs	r0, #0
 80072de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072e0:	2001      	movs	r0, #1
}
 80072e2:	bd10      	pop	{r4, pc}

080072e4 <HAL_TIM_PWM_Init>:
{
 80072e4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80072e6:	4604      	mov	r4, r0
 80072e8:	b1a0      	cbz	r0, 8007314 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80072ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80072ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072f2:	b91b      	cbnz	r3, 80072fc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80072f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80072f8:	f7fd f9ae 	bl	8004658 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80072fc:	2302      	movs	r3, #2
 80072fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1d21      	adds	r1, r4, #4
 8007306:	f7ff ff6f 	bl	80071e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800730a:	2301      	movs	r3, #1
 800730c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8007310:	2000      	movs	r0, #0
 8007312:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007314:	2001      	movs	r0, #1
}  
 8007316:	bd10      	pop	{r4, pc}

08007318 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007318:	6a03      	ldr	r3, [r0, #32]
 800731a:	f023 0310 	bic.w	r3, r3, #16
 800731e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007320:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8007322:	6842      	ldr	r2, [r0, #4]
{
 8007324:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8007326:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800732e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007332:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007334:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007338:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800733c:	4c0d      	ldr	r4, [pc, #52]	; (8007374 <TIM_OC2_SetConfig+0x5c>)
 800733e:	42a0      	cmp	r0, r4
 8007340:	d009      	beq.n	8007356 <TIM_OC2_SetConfig+0x3e>
 8007342:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007346:	42a0      	cmp	r0, r4
 8007348:	d005      	beq.n	8007356 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800734a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800734c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800734e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007350:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007352:	6203      	str	r3, [r0, #32]
}
 8007354:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007356:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007358:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800735e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007362:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007364:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007368:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800736a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800736e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8007372:	e7ea      	b.n	800734a <TIM_OC2_SetConfig+0x32>
 8007374:	40010000 	.word	0x40010000

08007378 <HAL_TIM_PWM_ConfigChannel>:
{
 8007378:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800737a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800737e:	2b01      	cmp	r3, #1
{
 8007380:	4604      	mov	r4, r0
 8007382:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007386:	d025      	beq.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8007388:	2301      	movs	r3, #1
 800738a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800738e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8007392:	2a0c      	cmp	r2, #12
 8007394:	d818      	bhi.n	80073c8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8007396:	e8df f002 	tbb	[pc, r2]
 800739a:	1707      	.short	0x1707
 800739c:	171e1717 	.word	0x171e1717
 80073a0:	172f1717 	.word	0x172f1717
 80073a4:	1717      	.short	0x1717
 80073a6:	40          	.byte	0x40
 80073a7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a8:	6820      	ldr	r0, [r4, #0]
 80073aa:	f7ff fdd9 	bl	8006f60 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	f042 0208 	orr.w	r2, r2, #8
 80073b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	f022 0204 	bic.w	r2, r2, #4
 80073c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80073ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80073d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	f7ff ff9e 	bl	8007318 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073dc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073de:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80073f6:	e7e6      	b.n	80073c6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	f7ff fddd 	bl	8006fb8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8007400:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	f042 0208 	orr.w	r2, r2, #8
 8007408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8007416:	61da      	str	r2, [r3, #28]
    break;
 8007418:	e7d6      	b.n	80073c8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	f7ff fdfc 	bl	8007018 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007420:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8007422:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007424:	69da      	ldr	r2, [r3, #28]
 8007426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800742a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800742c:	69da      	ldr	r2, [r3, #28]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007432:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8007434:	69da      	ldr	r2, [r3, #28]
 8007436:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800743a:	e7ec      	b.n	8007416 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800743c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800743c:	6a03      	ldr	r3, [r0, #32]
{
 800743e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8007440:	2401      	movs	r4, #1
 8007442:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007444:	ea23 0304 	bic.w	r3, r3, r4
 8007448:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800744a:	6a03      	ldr	r3, [r0, #32]
 800744c:	408a      	lsls	r2, r1
 800744e:	431a      	orrs	r2, r3
 8007450:	6202      	str	r2, [r0, #32]
 8007452:	bd10      	pop	{r4, pc}

08007454 <HAL_TIM_PWM_Start>:
{
 8007454:	b510      	push	{r4, lr}
 8007456:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007458:	2201      	movs	r2, #1
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	f7ff ffee 	bl	800743c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	4a08      	ldr	r2, [pc, #32]	; (8007484 <HAL_TIM_PWM_Start+0x30>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1c>
 8007468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800746c:	4293      	cmp	r3, r2
 800746e:	d103      	bne.n	8007478 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8007470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
} 
 8007480:	2000      	movs	r0, #0
 8007482:	bd10      	pop	{r4, pc}
 8007484:	40010000 	.word	0x40010000

08007488 <HAL_TIM_PWM_Stop>:
{ 
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800748c:	2200      	movs	r2, #0
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	f7ff ffd4 	bl	800743c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <HAL_TIM_PWM_Stop+0x60>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <HAL_TIM_PWM_Stop+0x1c>
 800749c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10d      	bne.n	80074c0 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 80074a4:	6a19      	ldr	r1, [r3, #32]
 80074a6:	f241 1211 	movw	r2, #4369	; 0x1111
 80074aa:	4211      	tst	r1, r2
 80074ac:	d108      	bne.n	80074c0 <HAL_TIM_PWM_Stop+0x38>
 80074ae:	6a19      	ldr	r1, [r3, #32]
 80074b0:	f240 4244 	movw	r2, #1092	; 0x444
 80074b4:	4211      	tst	r1, r2
 80074b6:	bf02      	ittt	eq
 80074b8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80074ba:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80074be:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80074c0:	6a19      	ldr	r1, [r3, #32]
 80074c2:	f241 1211 	movw	r2, #4369	; 0x1111
 80074c6:	4211      	tst	r1, r2
 80074c8:	d108      	bne.n	80074dc <HAL_TIM_PWM_Stop+0x54>
 80074ca:	6a19      	ldr	r1, [r3, #32]
 80074cc:	f240 4244 	movw	r2, #1092	; 0x444
 80074d0:	4211      	tst	r1, r2
 80074d2:	d103      	bne.n	80074dc <HAL_TIM_PWM_Stop+0x54>
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	2301      	movs	r3, #1
 80074de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
} 
 80074e2:	2000      	movs	r0, #0
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000

080074ec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80074ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80074f0:	2b01      	cmp	r3, #1
{
 80074f2:	b510      	push	{r4, lr}
 80074f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80074f8:	d018      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80074fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80074fe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8007500:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007502:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007504:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800750a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4322      	orrs	r2, r4
 8007510:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007518:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8007520:	2301      	movs	r3, #1
 8007522:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8007526:	2300      	movs	r3, #0
 8007528:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800752c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800752e:	bd10      	pop	{r4, pc}

08007530 <HAL_TIMEx_CommutationCallback>:
 8007530:	4770      	bx	lr

08007532 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007532:	4770      	bx	lr

08007534 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007534:	6803      	ldr	r3, [r0, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800753c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	f022 0201 	bic.w	r2, r2, #1
 8007544:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007546:	2320      	movs	r3, #32
 8007548:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800754c:	4770      	bx	lr
	...

08007550 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8007554:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007556:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8007558:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800755a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800755c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007560:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007562:	6133      	str	r3, [r6, #16]
{
 8007564:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007566:	6883      	ldr	r3, [r0, #8]
 8007568:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800756a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800756c:	4303      	orrs	r3, r0
 800756e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007570:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007574:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007576:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800757a:	430b      	orrs	r3, r1
 800757c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800757e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007580:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007582:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8007584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8007588:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800758a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800758e:	6173      	str	r3, [r6, #20]
 8007590:	4b7a      	ldr	r3, [pc, #488]	; (800777c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007592:	d17c      	bne.n	800768e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007594:	429e      	cmp	r6, r3
 8007596:	d003      	beq.n	80075a0 <UART_SetConfig+0x50>
 8007598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759c:	429e      	cmp	r6, r3
 800759e:	d144      	bne.n	800762a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80075a0:	f7ff fcc6 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80075a4:	2519      	movs	r5, #25
 80075a6:	fb05 f300 	mul.w	r3, r5, r0
 80075aa:	6860      	ldr	r0, [r4, #4]
 80075ac:	f04f 0964 	mov.w	r9, #100	; 0x64
 80075b0:	0040      	lsls	r0, r0, #1
 80075b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80075b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80075ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075be:	f7ff fcb7 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	4368      	muls	r0, r5
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	fbb0 f7f3 	udiv	r7, r0, r3
 80075cc:	f7ff fcb0 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	4368      	muls	r0, r5
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075da:	fbb3 f3f9 	udiv	r3, r3, r9
 80075de:	fb09 7313 	mls	r3, r9, r3, r7
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	3332      	adds	r3, #50	; 0x32
 80075e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80075f0:	f7ff fc9e 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80075f4:	6862      	ldr	r2, [r4, #4]
 80075f6:	4368      	muls	r0, r5
 80075f8:	0052      	lsls	r2, r2, #1
 80075fa:	fbb0 faf2 	udiv	sl, r0, r2
 80075fe:	f7ff fc97 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007602:	6863      	ldr	r3, [r4, #4]
 8007604:	4368      	muls	r0, r5
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	fbb0 f3f3 	udiv	r3, r0, r3
 800760c:	fbb3 f3f9 	udiv	r3, r3, r9
 8007610:	fb09 a313 	mls	r3, r9, r3, sl
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	3332      	adds	r3, #50	; 0x32
 8007618:	fbb3 f3f9 	udiv	r3, r3, r9
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007622:	443b      	add	r3, r7
 8007624:	60b3      	str	r3, [r6, #8]
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800762a:	f7ff fc69 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800762e:	2519      	movs	r5, #25
 8007630:	fb05 f300 	mul.w	r3, r5, r0
 8007634:	6860      	ldr	r0, [r4, #4]
 8007636:	f04f 0964 	mov.w	r9, #100	; 0x64
 800763a:	0040      	lsls	r0, r0, #1
 800763c:	fbb3 f3f0 	udiv	r3, r3, r0
 8007640:	fbb3 f3f9 	udiv	r3, r3, r9
 8007644:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007648:	f7ff fc5a 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	4368      	muls	r0, r5
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	fbb0 f7f3 	udiv	r7, r0, r3
 8007656:	f7ff fc53 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800765a:	6863      	ldr	r3, [r4, #4]
 800765c:	4368      	muls	r0, r5
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	fbb0 f3f3 	udiv	r3, r0, r3
 8007664:	fbb3 f3f9 	udiv	r3, r3, r9
 8007668:	fb09 7313 	mls	r3, r9, r3, r7
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	3332      	adds	r3, #50	; 0x32
 8007670:	fbb3 f3f9 	udiv	r3, r3, r9
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800767a:	f7ff fc41 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	4368      	muls	r0, r5
 8007682:	0052      	lsls	r2, r2, #1
 8007684:	fbb0 faf2 	udiv	sl, r0, r2
 8007688:	f7ff fc3a 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800768c:	e7b9      	b.n	8007602 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800768e:	429e      	cmp	r6, r3
 8007690:	d002      	beq.n	8007698 <UART_SetConfig+0x148>
 8007692:	4b3b      	ldr	r3, [pc, #236]	; (8007780 <UART_SetConfig+0x230>)
 8007694:	429e      	cmp	r6, r3
 8007696:	d140      	bne.n	800771a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007698:	f7ff fc4a 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 800769c:	6867      	ldr	r7, [r4, #4]
 800769e:	2519      	movs	r5, #25
 80076a0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80076a4:	fb05 f300 	mul.w	r3, r5, r0
 80076a8:	00bf      	lsls	r7, r7, #2
 80076aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80076ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80076b2:	011f      	lsls	r7, r3, #4
 80076b4:	f7ff fc3c 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	4368      	muls	r0, r5
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	fbb0 f8f3 	udiv	r8, r0, r3
 80076c2:	f7ff fc35 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	4368      	muls	r0, r5
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80076d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80076d4:	fb09 8313 	mls	r3, r9, r3, r8
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	3332      	adds	r3, #50	; 0x32
 80076dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80076e0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80076e4:	f7ff fc24 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	4368      	muls	r0, r5
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	fbb0 faf2 	udiv	sl, r0, r2
 80076f2:	f7ff fc1d 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	4368      	muls	r0, r5
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007700:	fbb3 f3f9 	udiv	r3, r3, r9
 8007704:	fb09 a313 	mls	r3, r9, r3, sl
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	3332      	adds	r3, #50	; 0x32
 800770c:	fbb3 f3f9 	udiv	r3, r3, r9
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	ea43 0308 	orr.w	r3, r3, r8
 8007718:	e783      	b.n	8007622 <UART_SetConfig+0xd2>
 800771a:	f7ff fbf1 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800771e:	6867      	ldr	r7, [r4, #4]
 8007720:	2519      	movs	r5, #25
 8007722:	f04f 0964 	mov.w	r9, #100	; 0x64
 8007726:	fb05 f300 	mul.w	r3, r5, r0
 800772a:	00bf      	lsls	r7, r7, #2
 800772c:	fbb3 f3f7 	udiv	r3, r3, r7
 8007730:	fbb3 f3f9 	udiv	r3, r3, r9
 8007734:	011f      	lsls	r7, r3, #4
 8007736:	f7ff fbe3 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	4368      	muls	r0, r5
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	fbb0 f8f3 	udiv	r8, r0, r3
 8007744:	f7ff fbdc 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	4368      	muls	r0, r5
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007752:	fbb3 f3f9 	udiv	r3, r3, r9
 8007756:	fb09 8313 	mls	r3, r9, r3, r8
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	3332      	adds	r3, #50	; 0x32
 800775e:	fbb3 f3f9 	udiv	r3, r3, r9
 8007762:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8007766:	f7ff fbcb 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 800776a:	6862      	ldr	r2, [r4, #4]
 800776c:	4368      	muls	r0, r5
 800776e:	0092      	lsls	r2, r2, #2
 8007770:	fbb0 faf2 	udiv	sl, r0, r2
 8007774:	f7ff fbc4 	bl	8006f00 <HAL_RCC_GetPCLK1Freq>
 8007778:	e7bd      	b.n	80076f6 <UART_SetConfig+0x1a6>
 800777a:	bf00      	nop
 800777c:	40011000 	.word	0x40011000
 8007780:	40011400 	.word	0x40011400

08007784 <HAL_UART_Init>:
{
 8007784:	b510      	push	{r4, lr}
  if(huart == NULL)
 8007786:	4604      	mov	r4, r0
 8007788:	b340      	cbz	r0, 80077dc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800778a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800778e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007792:	b91b      	cbnz	r3, 800779c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007794:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007798:	f7fc ffc0 	bl	800471c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800779c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800779e:	2324      	movs	r3, #36	; 0x24
 80077a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80077a4:	68d3      	ldr	r3, [r2, #12]
 80077a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077aa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff fecf 	bl	8007550 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ca:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80077ce:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80077d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80077d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80077da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80077dc:	2001      	movs	r0, #1
}
 80077de:	bd10      	pop	{r4, pc}

080077e0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80077e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	d11c      	bne.n	8007822 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 80077e8:	b1c9      	cbz	r1, 800781e <HAL_UART_Receive_IT+0x3e>
 80077ea:	b1c2      	cbz	r2, 800781e <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 80077ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d016      	beq.n	8007822 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 80077f4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80077f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077fa:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077fe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8007804:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007806:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8007808:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	f041 0101 	orr.w	r1, r1, #1
 8007810:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007812:	68d1      	ldr	r1, [r2, #12]
 8007814:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8007818:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800781a:	4618      	mov	r0, r3
 800781c:	4770      	bx	lr
      return HAL_ERROR;
 800781e:	2001      	movs	r0, #1
 8007820:	4770      	bx	lr
    return HAL_BUSY; 
 8007822:	2002      	movs	r0, #2
}
 8007824:	4770      	bx	lr
	...

08007828 <HAL_UART_Transmit_DMA>:
{
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4604      	mov	r4, r0
 800782c:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800782e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007832:	2a20      	cmp	r2, #32
 8007834:	d12a      	bne.n	800788c <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 8007836:	b339      	cbz	r1, 8007888 <HAL_UART_Transmit_DMA+0x60>
 8007838:	b333      	cbz	r3, 8007888 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800783a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800783e:	2a01      	cmp	r2, #1
 8007840:	d024      	beq.n	800788c <HAL_UART_Transmit_DMA+0x64>
 8007842:	2201      	movs	r2, #1
 8007844:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007848:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 800784a:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800784e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007850:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007852:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007856:	4a0e      	ldr	r2, [pc, #56]	; (8007890 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8007858:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800785a:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800785c:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800785e:	4a0d      	ldr	r2, [pc, #52]	; (8007894 <HAL_UART_Transmit_DMA+0x6c>)
 8007860:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007862:	4a0d      	ldr	r2, [pc, #52]	; (8007898 <HAL_UART_Transmit_DMA+0x70>)
 8007864:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007866:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8007868:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800786a:	3204      	adds	r2, #4
 800786c:	f7fd fe46 	bl	80054fc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007878:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800787a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800787e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007882:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8007884:	4628      	mov	r0, r5
 8007886:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007888:	2001      	movs	r0, #1
 800788a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800788c:	2002      	movs	r0, #2
}
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	0800792d 	.word	0x0800792d
 8007894:	0800795b 	.word	0x0800795b
 8007898:	08007a1f 	.word	0x08007a1f

0800789c <HAL_UART_Receive_DMA>:
{  
 800789c:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 800789e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80078a2:	2a20      	cmp	r2, #32
{  
 80078a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078a6:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 80078a8:	d138      	bne.n	800791c <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 80078aa:	2900      	cmp	r1, #0
 80078ac:	d034      	beq.n	8007918 <HAL_UART_Receive_DMA+0x7c>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d032      	beq.n	8007918 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80078b2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80078b6:	2a01      	cmp	r2, #1
 80078b8:	d030      	beq.n	800791c <HAL_UART_Receive_DMA+0x80>
 80078ba:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80078be:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078c2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 80078c6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80078c8:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ca:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <HAL_UART_Receive_DMA+0x84>)
 80078d2:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80078d4:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <HAL_UART_Receive_DMA+0x88>)
 80078d8:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078da:	4a13      	ldr	r2, [pc, #76]	; (8007928 <HAL_UART_Receive_DMA+0x8c>)
 80078dc:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80078de:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80078e0:	460a      	mov	r2, r1
 80078e2:	1d31      	adds	r1, r6, #4
 80078e4:	f7fd fe0a 	bl	80054fc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	9401      	str	r4, [sp, #4]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f6:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80078f8:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007910:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8007912:	4620      	mov	r0, r4
}
 8007914:	b002      	add	sp, #8
 8007916:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007918:	2001      	movs	r0, #1
 800791a:	e7fb      	b.n	8007914 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 800791c:	2002      	movs	r0, #2
 800791e:	e7f9      	b.n	8007914 <HAL_UART_Receive_DMA+0x78>
 8007920:	08007965 	.word	0x08007965
 8007924:	08007a13 	.word	0x08007a13
 8007928:	08007a1f 	.word	0x08007a1f

0800792c <UART_DMATransmitCplt>:
{
 800792c:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800792e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007930:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007938:	d10a      	bne.n	8007950 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 800793a:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800793c:	6813      	ldr	r3, [r2, #0]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007944:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007950:	4610      	mov	r0, r2
 8007952:	f7fa faff 	bl	8001f54 <HAL_UART_TxCpltCallback>
 8007956:	bd08      	pop	{r3, pc}

08007958 <HAL_UART_TxHalfCpltCallback>:
 8007958:	4770      	bx	lr

0800795a <UART_DMATxHalfCplt>:
{
 800795a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800795c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800795e:	f7ff fffb 	bl	8007958 <HAL_UART_TxHalfCpltCallback>
 8007962:	bd08      	pop	{r3, pc}

08007964 <UART_DMAReceiveCplt>:
{
 8007964:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007966:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007968:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007970:	d110      	bne.n	8007994 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8007972:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007974:	6813      	ldr	r3, [r2, #0]
 8007976:	68d9      	ldr	r1, [r3, #12]
 8007978:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800797c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797e:	6959      	ldr	r1, [r3, #20]
 8007980:	f021 0101 	bic.w	r1, r1, #1
 8007984:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	6959      	ldr	r1, [r3, #20]
 8007988:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800798c:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800798e:	2320      	movs	r3, #32
 8007990:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8007994:	4610      	mov	r0, r2
 8007996:	f7fa fa85 	bl	8001ea4 <HAL_UART_RxCpltCallback>
 800799a:	bd08      	pop	{r3, pc}

0800799c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800799c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80079a0:	2b22      	cmp	r3, #34	; 0x22
{
 80079a2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80079a4:	d132      	bne.n	8007a0c <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80079a6:	6883      	ldr	r3, [r0, #8]
 80079a8:	6901      	ldr	r1, [r0, #16]
 80079aa:	6802      	ldr	r2, [r0, #0]
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80079b2:	d11f      	bne.n	80079f4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b4:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80079b6:	b9c9      	cbnz	r1, 80079ec <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079bc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80079c0:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80079c2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80079c4:	3c01      	subs	r4, #1
 80079c6:	b2a4      	uxth	r4, r4
 80079c8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80079ca:	b96c      	cbnz	r4, 80079e8 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079cc:	6803      	ldr	r3, [r0, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079d4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	f022 0201 	bic.w	r2, r2, #1
 80079dc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80079de:	2320      	movs	r3, #32
 80079e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80079e4:	f7fa fa5e 	bl	8001ea4 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80079e8:	2000      	movs	r0, #0
}
 80079ea:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	f823 2b01 	strh.w	r2, [r3], #1
 80079f2:	e7e5      	b.n	80079c0 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80079f4:	b921      	cbnz	r1, 8007a00 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6852      	ldr	r2, [r2, #4]
 80079fa:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e7e0      	b.n	80079c2 <UART_Receive_IT+0x26>
 8007a00:	6852      	ldr	r2, [r2, #4]
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	6281      	str	r1, [r0, #40]	; 0x28
 8007a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a0a:	e7f7      	b.n	80079fc <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	bd10      	pop	{r4, pc}

08007a10 <HAL_UART_RxHalfCpltCallback>:
 8007a10:	4770      	bx	lr

08007a12 <UART_DMARxHalfCplt>:
{
 8007a12:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8007a14:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007a16:	f7ff fffb 	bl	8007a10 <HAL_UART_RxHalfCpltCallback>
 8007a1a:	bd08      	pop	{r3, pc}

08007a1c <HAL_UART_ErrorCallback>:
 8007a1c:	4770      	bx	lr

08007a1e <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a1e:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8007a20:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a22:	680b      	ldr	r3, [r1, #0]
 8007a24:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a26:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8007a2a:	2821      	cmp	r0, #33	; 0x21
 8007a2c:	d10a      	bne.n	8007a44 <UART_DMAError+0x26>
 8007a2e:	0612      	lsls	r2, r2, #24
 8007a30:	d508      	bpl.n	8007a44 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8007a32:	2200      	movs	r2, #0
 8007a34:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8007a44:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a46:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8007a4a:	2a22      	cmp	r2, #34	; 0x22
 8007a4c:	d106      	bne.n	8007a5c <UART_DMAError+0x3e>
 8007a4e:	065b      	lsls	r3, r3, #25
 8007a50:	d504      	bpl.n	8007a5c <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a56:	4608      	mov	r0, r1
 8007a58:	f7ff fd6c 	bl	8007534 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a5c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007a5e:	f043 0310 	orr.w	r3, r3, #16
 8007a62:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007a64:	4608      	mov	r0, r1
 8007a66:	f7ff ffd9 	bl	8007a1c <HAL_UART_ErrorCallback>
 8007a6a:	bd08      	pop	{r3, pc}

08007a6c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a6c:	6803      	ldr	r3, [r0, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a70:	68d9      	ldr	r1, [r3, #12]
{
 8007a72:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8007a74:	0716      	lsls	r6, r2, #28
{
 8007a76:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a78:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8007a7a:	d107      	bne.n	8007a8c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a7c:	0696      	lsls	r6, r2, #26
 8007a7e:	d55a      	bpl.n	8007b36 <HAL_UART_IRQHandler+0xca>
 8007a80:	068d      	lsls	r5, r1, #26
 8007a82:	d558      	bpl.n	8007b36 <HAL_UART_IRQHandler+0xca>
}
 8007a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007a88:	f7ff bf88 	b.w	800799c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a8c:	f015 0501 	ands.w	r5, r5, #1
 8007a90:	d102      	bne.n	8007a98 <HAL_UART_IRQHandler+0x2c>
 8007a92:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007a96:	d04e      	beq.n	8007b36 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a98:	07d3      	lsls	r3, r2, #31
 8007a9a:	d505      	bpl.n	8007aa8 <HAL_UART_IRQHandler+0x3c>
 8007a9c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9e:	bf42      	ittt	mi
 8007aa0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8007aa2:	f043 0301 	orrmi.w	r3, r3, #1
 8007aa6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa8:	0750      	lsls	r0, r2, #29
 8007aaa:	d504      	bpl.n	8007ab6 <HAL_UART_IRQHandler+0x4a>
 8007aac:	b11d      	cbz	r5, 8007ab6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ab6:	0793      	lsls	r3, r2, #30
 8007ab8:	d504      	bpl.n	8007ac4 <HAL_UART_IRQHandler+0x58>
 8007aba:	b11d      	cbz	r5, 8007ac4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007abc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007abe:	f043 0304 	orr.w	r3, r3, #4
 8007ac2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ac4:	0716      	lsls	r6, r2, #28
 8007ac6:	d504      	bpl.n	8007ad2 <HAL_UART_IRQHandler+0x66>
 8007ac8:	b11d      	cbz	r5, 8007ad2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d066      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad8:	0695      	lsls	r5, r2, #26
 8007ada:	d504      	bpl.n	8007ae6 <HAL_UART_IRQHandler+0x7a>
 8007adc:	0688      	lsls	r0, r1, #26
 8007ade:	d502      	bpl.n	8007ae6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7ff ff5b 	bl	800799c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007aec:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8007aee:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af0:	d402      	bmi.n	8007af8 <HAL_UART_IRQHandler+0x8c>
 8007af2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007af6:	d01a      	beq.n	8007b2e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8007af8:	f7ff fd1c 	bl	8007534 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	0652      	lsls	r2, r2, #25
 8007b02:	d510      	bpl.n	8007b26 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b04:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8007b06:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8007b0e:	b150      	cbz	r0, 8007b26 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <HAL_UART_IRQHandler+0x13c>)
 8007b12:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b14:	f7fd fd30 	bl	8005578 <HAL_DMA_Abort_IT>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d044      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8007b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007b24:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff ff78 	bl	8007a1c <HAL_UART_ErrorCallback>
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8007b2e:	f7ff ff75 	bl	8007a1c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b32:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b36:	0616      	lsls	r6, r2, #24
 8007b38:	d527      	bpl.n	8007b8a <HAL_UART_IRQHandler+0x11e>
 8007b3a:	060d      	lsls	r5, r1, #24
 8007b3c:	d525      	bpl.n	8007b8a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b3e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007b42:	2a21      	cmp	r2, #33	; 0x21
 8007b44:	d12f      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b46:	68a2      	ldr	r2, [r4, #8]
 8007b48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007b4c:	6a22      	ldr	r2, [r4, #32]
 8007b4e:	d117      	bne.n	8007b80 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b50:	8811      	ldrh	r1, [r2, #0]
 8007b52:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007b56:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007b58:	6921      	ldr	r1, [r4, #16]
 8007b5a:	b979      	cbnz	r1, 8007b7c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8007b5c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8007b5e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8007b60:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007b62:	3a01      	subs	r2, #1
 8007b64:	b292      	uxth	r2, r2
 8007b66:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007b68:	b9ea      	cbnz	r2, 8007ba6 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b70:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	e7ee      	b.n	8007b5e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b80:	1c51      	adds	r1, r2, #1
 8007b82:	6221      	str	r1, [r4, #32]
 8007b84:	7812      	ldrb	r2, [r2, #0]
 8007b86:	605a      	str	r2, [r3, #4]
 8007b88:	e7ea      	b.n	8007b60 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b8a:	0650      	lsls	r0, r2, #25
 8007b8c:	d50b      	bpl.n	8007ba6 <HAL_UART_IRQHandler+0x13a>
 8007b8e:	064a      	lsls	r2, r1, #25
 8007b90:	d509      	bpl.n	8007ba6 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b98:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7fa f9d7 	bl	8001f54 <HAL_UART_TxCpltCallback>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	08007bad 	.word	0x08007bad

08007bac <UART_DMAAbortOnError>:
{
 8007bac:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007bae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8007bb4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007bb6:	f7ff ff31 	bl	8007a1c <HAL_UART_ErrorCallback>
 8007bba:	bd08      	pop	{r3, pc}

08007bbc <__libc_init_array>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4e0d      	ldr	r6, [pc, #52]	; (8007bf4 <__libc_init_array+0x38>)
 8007bc0:	4c0d      	ldr	r4, [pc, #52]	; (8007bf8 <__libc_init_array+0x3c>)
 8007bc2:	1ba4      	subs	r4, r4, r6
 8007bc4:	10a4      	asrs	r4, r4, #2
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	d109      	bne.n	8007be0 <__libc_init_array+0x24>
 8007bcc:	4e0b      	ldr	r6, [pc, #44]	; (8007bfc <__libc_init_array+0x40>)
 8007bce:	4c0c      	ldr	r4, [pc, #48]	; (8007c00 <__libc_init_array+0x44>)
 8007bd0:	f002 fb60 	bl	800a294 <_init>
 8007bd4:	1ba4      	subs	r4, r4, r6
 8007bd6:	10a4      	asrs	r4, r4, #2
 8007bd8:	2500      	movs	r5, #0
 8007bda:	42a5      	cmp	r5, r4
 8007bdc:	d105      	bne.n	8007bea <__libc_init_array+0x2e>
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007be4:	4798      	blx	r3
 8007be6:	3501      	adds	r5, #1
 8007be8:	e7ee      	b.n	8007bc8 <__libc_init_array+0xc>
 8007bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bee:	4798      	blx	r3
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	e7f2      	b.n	8007bda <__libc_init_array+0x1e>
 8007bf4:	0800a558 	.word	0x0800a558
 8007bf8:	0800a558 	.word	0x0800a558
 8007bfc:	0800a558 	.word	0x0800a558
 8007c00:	0800a55c 	.word	0x0800a55c
 8007c04:	00000000 	.word	0x00000000

08007c08 <cos>:
 8007c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c0a:	ec51 0b10 	vmov	r0, r1, d0
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <cos+0x80>)
 8007c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c14:	4293      	cmp	r3, r2
 8007c16:	dc06      	bgt.n	8007c26 <cos+0x1e>
 8007c18:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007c80 <cos+0x78>
 8007c1c:	f001 fae8 	bl	80091f0 <__kernel_cos>
 8007c20:	ec51 0b10 	vmov	r0, r1, d0
 8007c24:	e007      	b.n	8007c36 <cos+0x2e>
 8007c26:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <cos+0x84>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	dd09      	ble.n	8007c40 <cos+0x38>
 8007c2c:	ee10 2a10 	vmov	r2, s0
 8007c30:	460b      	mov	r3, r1
 8007c32:	f7f8 facd 	bl	80001d0 <__aeabi_dsub>
 8007c36:	ec41 0b10 	vmov	d0, r0, r1
 8007c3a:	b005      	add	sp, #20
 8007c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c40:	4668      	mov	r0, sp
 8007c42:	f001 f831 	bl	8008ca8 <__ieee754_rem_pio2>
 8007c46:	f000 0003 	and.w	r0, r0, #3
 8007c4a:	2801      	cmp	r0, #1
 8007c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c50:	ed9d 0b00 	vldr	d0, [sp]
 8007c54:	d007      	beq.n	8007c66 <cos+0x5e>
 8007c56:	2802      	cmp	r0, #2
 8007c58:	d00e      	beq.n	8007c78 <cos+0x70>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d0de      	beq.n	8007c1c <cos+0x14>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f001 fefe 	bl	8009a60 <__kernel_sin>
 8007c64:	e7dc      	b.n	8007c20 <cos+0x18>
 8007c66:	f001 fefb 	bl	8009a60 <__kernel_sin>
 8007c6a:	ec53 2b10 	vmov	r2, r3, d0
 8007c6e:	ee10 0a10 	vmov	r0, s0
 8007c72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c76:	e7de      	b.n	8007c36 <cos+0x2e>
 8007c78:	f001 faba 	bl	80091f0 <__kernel_cos>
 8007c7c:	e7f5      	b.n	8007c6a <cos+0x62>
 8007c7e:	bf00      	nop
	...
 8007c88:	3fe921fb 	.word	0x3fe921fb
 8007c8c:	7fefffff 	.word	0x7fefffff

08007c90 <sin>:
 8007c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c92:	ec51 0b10 	vmov	r0, r1, d0
 8007c96:	4a20      	ldr	r2, [pc, #128]	; (8007d18 <sin+0x88>)
 8007c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	dc07      	bgt.n	8007cb0 <sin+0x20>
 8007ca0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007d10 <sin+0x80>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f001 fedb 	bl	8009a60 <__kernel_sin>
 8007caa:	ec51 0b10 	vmov	r0, r1, d0
 8007cae:	e007      	b.n	8007cc0 <sin+0x30>
 8007cb0:	4a1a      	ldr	r2, [pc, #104]	; (8007d1c <sin+0x8c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dd09      	ble.n	8007cca <sin+0x3a>
 8007cb6:	ee10 2a10 	vmov	r2, s0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	f7f8 fa88 	bl	80001d0 <__aeabi_dsub>
 8007cc0:	ec41 0b10 	vmov	d0, r0, r1
 8007cc4:	b005      	add	sp, #20
 8007cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cca:	4668      	mov	r0, sp
 8007ccc:	f000 ffec 	bl	8008ca8 <__ieee754_rem_pio2>
 8007cd0:	f000 0003 	and.w	r0, r0, #3
 8007cd4:	2801      	cmp	r0, #1
 8007cd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cda:	ed9d 0b00 	vldr	d0, [sp]
 8007cde:	d004      	beq.n	8007cea <sin+0x5a>
 8007ce0:	2802      	cmp	r0, #2
 8007ce2:	d005      	beq.n	8007cf0 <sin+0x60>
 8007ce4:	b970      	cbnz	r0, 8007d04 <sin+0x74>
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	e7dd      	b.n	8007ca6 <sin+0x16>
 8007cea:	f001 fa81 	bl	80091f0 <__kernel_cos>
 8007cee:	e7dc      	b.n	8007caa <sin+0x1a>
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	f001 feb5 	bl	8009a60 <__kernel_sin>
 8007cf6:	ec53 2b10 	vmov	r2, r3, d0
 8007cfa:	ee10 0a10 	vmov	r0, s0
 8007cfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d02:	e7dd      	b.n	8007cc0 <sin+0x30>
 8007d04:	f001 fa74 	bl	80091f0 <__kernel_cos>
 8007d08:	e7f5      	b.n	8007cf6 <sin+0x66>
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w
	...
 8007d18:	3fe921fb 	.word	0x3fe921fb
 8007d1c:	7fefffff 	.word	0x7fefffff

08007d20 <atan2>:
 8007d20:	f000 b9d2 	b.w	80080c8 <__ieee754_atan2>

08007d24 <pow>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	ed2d 8b04 	vpush	{d8-d9}
 8007d2c:	b08d      	sub	sp, #52	; 0x34
 8007d2e:	ec57 6b10 	vmov	r6, r7, d0
 8007d32:	ec55 4b11 	vmov	r4, r5, d1
 8007d36:	f000 faa3 	bl	8008280 <__ieee754_pow>
 8007d3a:	4bae      	ldr	r3, [pc, #696]	; (8007ff4 <pow+0x2d0>)
 8007d3c:	eeb0 8a40 	vmov.f32	s16, s0
 8007d40:	eef0 8a60 	vmov.f32	s17, s1
 8007d44:	f993 9000 	ldrsb.w	r9, [r3]
 8007d48:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007d4c:	4698      	mov	r8, r3
 8007d4e:	d05f      	beq.n	8007e10 <pow+0xec>
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	4620      	mov	r0, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	f7f8 fe88 	bl	8000a6c <__aeabi_dcmpun>
 8007d5c:	4683      	mov	fp, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d156      	bne.n	8007e10 <pow+0xec>
 8007d62:	4632      	mov	r2, r6
 8007d64:	463b      	mov	r3, r7
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 fe7f 	bl	8000a6c <__aeabi_dcmpun>
 8007d6e:	9001      	str	r0, [sp, #4]
 8007d70:	b1e8      	cbz	r0, 8007dae <pow+0x8a>
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fe45 	bl	8000a08 <__aeabi_dcmpeq>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d046      	beq.n	8007e10 <pow+0xec>
 8007d82:	2301      	movs	r3, #1
 8007d84:	9302      	str	r3, [sp, #8]
 8007d86:	4b9c      	ldr	r3, [pc, #624]	; (8007ff8 <pow+0x2d4>)
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	4b9c      	ldr	r3, [pc, #624]	; (8007ffc <pow+0x2d8>)
 8007d8c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d90:	2200      	movs	r2, #0
 8007d92:	f1b9 0f02 	cmp.w	r9, #2
 8007d96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007da2:	d033      	beq.n	8007e0c <pow+0xe8>
 8007da4:	a802      	add	r0, sp, #8
 8007da6:	f002 f953 	bl	800a050 <matherr>
 8007daa:	bb48      	cbnz	r0, 8007e00 <pow+0xdc>
 8007dac:	e05e      	b.n	8007e6c <pow+0x148>
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	f04f 0b00 	mov.w	fp, #0
 8007db6:	4652      	mov	r2, sl
 8007db8:	465b      	mov	r3, fp
 8007dba:	4630      	mov	r0, r6
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	f7f8 fe23 	bl	8000a08 <__aeabi_dcmpeq>
 8007dc2:	ec4b ab19 	vmov	d9, sl, fp
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d055      	beq.n	8007e76 <pow+0x152>
 8007dca:	4652      	mov	r2, sl
 8007dcc:	465b      	mov	r3, fp
 8007dce:	4620      	mov	r0, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7f8 fe19 	bl	8000a08 <__aeabi_dcmpeq>
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	b318      	cbz	r0, 8007e22 <pow+0xfe>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	9302      	str	r3, [sp, #8]
 8007dde:	4b86      	ldr	r3, [pc, #536]	; (8007ff8 <pow+0x2d4>)
 8007de0:	9303      	str	r3, [sp, #12]
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	930a      	str	r3, [sp, #40]	; 0x28
 8007de6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007dea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007dee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	d0d5      	beq.n	8007da4 <pow+0x80>
 8007df8:	4b80      	ldr	r3, [pc, #512]	; (8007ffc <pow+0x2d8>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e02:	b11b      	cbz	r3, 8007e0c <pow+0xe8>
 8007e04:	f002 fa40 	bl	800a288 <__errno>
 8007e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0a:	6003      	str	r3, [r0, #0]
 8007e0c:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007e10:	eeb0 0a48 	vmov.f32	s0, s16
 8007e14:	eef0 0a68 	vmov.f32	s1, s17
 8007e18:	b00d      	add	sp, #52	; 0x34
 8007e1a:	ecbd 8b04 	vpop	{d8-d9}
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	ec45 4b10 	vmov	d0, r4, r5
 8007e26:	f002 f886 	bl	8009f36 <finite>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d0f0      	beq.n	8007e10 <pow+0xec>
 8007e2e:	4652      	mov	r2, sl
 8007e30:	465b      	mov	r3, fp
 8007e32:	4620      	mov	r0, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	f7f8 fdf1 	bl	8000a1c <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0e8      	beq.n	8007e10 <pow+0xec>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	9302      	str	r3, [sp, #8]
 8007e42:	4b6d      	ldr	r3, [pc, #436]	; (8007ff8 <pow+0x2d4>)
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	4b6b      	ldr	r3, [pc, #428]	; (8007ff4 <pow+0x2d0>)
 8007e48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8007e50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e58:	b913      	cbnz	r3, 8007e60 <pow+0x13c>
 8007e5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e5e:	e7a1      	b.n	8007da4 <pow+0x80>
 8007e60:	4967      	ldr	r1, [pc, #412]	; (8008000 <pow+0x2dc>)
 8007e62:	2000      	movs	r0, #0
 8007e64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d19b      	bne.n	8007da4 <pow+0x80>
 8007e6c:	f002 fa0c 	bl	800a288 <__errno>
 8007e70:	2321      	movs	r3, #33	; 0x21
 8007e72:	6003      	str	r3, [r0, #0]
 8007e74:	e7c4      	b.n	8007e00 <pow+0xdc>
 8007e76:	eeb0 0a48 	vmov.f32	s0, s16
 8007e7a:	eef0 0a68 	vmov.f32	s1, s17
 8007e7e:	f002 f85a 	bl	8009f36 <finite>
 8007e82:	9001      	str	r0, [sp, #4]
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f040 808a 	bne.w	8007f9e <pow+0x27a>
 8007e8a:	ec47 6b10 	vmov	d0, r6, r7
 8007e8e:	f002 f852 	bl	8009f36 <finite>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f000 8083 	beq.w	8007f9e <pow+0x27a>
 8007e98:	ec45 4b10 	vmov	d0, r4, r5
 8007e9c:	f002 f84b 	bl	8009f36 <finite>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d07c      	beq.n	8007f9e <pow+0x27a>
 8007ea4:	ec53 2b18 	vmov	r2, r3, d8
 8007ea8:	ee18 0a10 	vmov	r0, s16
 8007eac:	4619      	mov	r1, r3
 8007eae:	f7f8 fddd 	bl	8000a6c <__aeabi_dcmpun>
 8007eb2:	f998 9000 	ldrsb.w	r9, [r8]
 8007eb6:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <pow+0x2d4>)
 8007eb8:	b1b0      	cbz	r0, 8007ee8 <pow+0x1c4>
 8007eba:	2201      	movs	r2, #1
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	9202      	str	r2, [sp, #8]
 8007ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ec8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ecc:	f1b9 0f00 	cmp.w	r9, #0
 8007ed0:	d0c3      	beq.n	8007e5a <pow+0x136>
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	4659      	mov	r1, fp
 8007eda:	f7f8 fc57 	bl	800078c <__aeabi_ddiv>
 8007ede:	f1b9 0f02 	cmp.w	r9, #2
 8007ee2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ee6:	e7c0      	b.n	8007e6a <pow+0x146>
 8007ee8:	2203      	movs	r2, #3
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	900a      	str	r0, [sp, #40]	; 0x28
 8007ef0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ef4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	d12c      	bne.n	8007f58 <pow+0x234>
 8007efe:	4b41      	ldr	r3, [pc, #260]	; (8008004 <pow+0x2e0>)
 8007f00:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fd84 	bl	8000a1c <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d066      	beq.n	8007fe6 <pow+0x2c2>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <pow+0x2e4>)
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fb0a 	bl	8000538 <__aeabi_dmul>
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	ec45 4b10 	vmov	d0, r4, r5
 8007f2c:	f002 f89c 	bl	800a068 <rint>
 8007f30:	4620      	mov	r0, r4
 8007f32:	ec53 2b10 	vmov	r2, r3, d0
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 fd66 	bl	8000a08 <__aeabi_dcmpeq>
 8007f3c:	b920      	cbnz	r0, 8007f48 <pow+0x224>
 8007f3e:	4b33      	ldr	r3, [pc, #204]	; (800800c <pow+0x2e8>)
 8007f40:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f48:	f998 3000 	ldrsb.w	r3, [r8]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d14a      	bne.n	8007fe6 <pow+0x2c2>
 8007f50:	f002 f99a 	bl	800a288 <__errno>
 8007f54:	2322      	movs	r3, #34	; 0x22
 8007f56:	e78c      	b.n	8007e72 <pow+0x14e>
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <pow+0x2ec>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f60:	4630      	mov	r0, r6
 8007f62:	4652      	mov	r2, sl
 8007f64:	465b      	mov	r3, fp
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fd58 	bl	8000a1c <__aeabi_dcmplt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0eb      	beq.n	8007f48 <pow+0x224>
 8007f70:	2200      	movs	r2, #0
 8007f72:	4b25      	ldr	r3, [pc, #148]	; (8008008 <pow+0x2e4>)
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 fade 	bl	8000538 <__aeabi_dmul>
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	460d      	mov	r5, r1
 8007f80:	ec45 4b10 	vmov	d0, r4, r5
 8007f84:	f002 f870 	bl	800a068 <rint>
 8007f88:	4620      	mov	r0, r4
 8007f8a:	ec53 2b10 	vmov	r2, r3, d0
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 fd3a 	bl	8000a08 <__aeabi_dcmpeq>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d1d7      	bne.n	8007f48 <pow+0x224>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4b19      	ldr	r3, [pc, #100]	; (8008000 <pow+0x2dc>)
 8007f9c:	e7d2      	b.n	8007f44 <pow+0x220>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	ec51 0b18 	vmov	r0, r1, d8
 8007fa6:	f7f8 fd2f 	bl	8000a08 <__aeabi_dcmpeq>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f43f af30 	beq.w	8007e10 <pow+0xec>
 8007fb0:	ec47 6b10 	vmov	d0, r6, r7
 8007fb4:	f001 ffbf 	bl	8009f36 <finite>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f43f af29 	beq.w	8007e10 <pow+0xec>
 8007fbe:	ec45 4b10 	vmov	d0, r4, r5
 8007fc2:	f001 ffb8 	bl	8009f36 <finite>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f af22 	beq.w	8007e10 <pow+0xec>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <pow+0x2d4>)
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007fdc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007fe0:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007fe4:	e7b0      	b.n	8007f48 <pow+0x224>
 8007fe6:	a802      	add	r0, sp, #8
 8007fe8:	f002 f832 	bl	800a050 <matherr>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f47f af07 	bne.w	8007e00 <pow+0xdc>
 8007ff2:	e7ad      	b.n	8007f50 <pow+0x22c>
 8007ff4:	20000008 	.word	0x20000008
 8007ff8:	0800a2f1 	.word	0x0800a2f1
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	fff00000 	.word	0xfff00000
 8008004:	47efffff 	.word	0x47efffff
 8008008:	3fe00000 	.word	0x3fe00000
 800800c:	c7efffff 	.word	0xc7efffff
 8008010:	7ff00000 	.word	0x7ff00000

08008014 <sqrt>:
 8008014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008018:	ed2d 8b02 	vpush	{d8}
 800801c:	b08b      	sub	sp, #44	; 0x2c
 800801e:	ec55 4b10 	vmov	r4, r5, d0
 8008022:	f001 f833 	bl	800908c <__ieee754_sqrt>
 8008026:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <sqrt+0xac>)
 8008028:	eeb0 8a40 	vmov.f32	s16, s0
 800802c:	eef0 8a60 	vmov.f32	s17, s1
 8008030:	f993 6000 	ldrsb.w	r6, [r3]
 8008034:	1c73      	adds	r3, r6, #1
 8008036:	d02a      	beq.n	800808e <sqrt+0x7a>
 8008038:	4622      	mov	r2, r4
 800803a:	462b      	mov	r3, r5
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 fd14 	bl	8000a6c <__aeabi_dcmpun>
 8008044:	4607      	mov	r7, r0
 8008046:	bb10      	cbnz	r0, 800808e <sqrt+0x7a>
 8008048:	f04f 0800 	mov.w	r8, #0
 800804c:	f04f 0900 	mov.w	r9, #0
 8008050:	4642      	mov	r2, r8
 8008052:	464b      	mov	r3, r9
 8008054:	4620      	mov	r0, r4
 8008056:	4629      	mov	r1, r5
 8008058:	f7f8 fce0 	bl	8000a1c <__aeabi_dcmplt>
 800805c:	b1b8      	cbz	r0, 800808e <sqrt+0x7a>
 800805e:	2301      	movs	r3, #1
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <sqrt+0xb0>)
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	9708      	str	r7, [sp, #32]
 8008068:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800806c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008070:	b9b6      	cbnz	r6, 80080a0 <sqrt+0x8c>
 8008072:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008076:	4668      	mov	r0, sp
 8008078:	f001 ffea 	bl	800a050 <matherr>
 800807c:	b1d0      	cbz	r0, 80080b4 <sqrt+0xa0>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	b11b      	cbz	r3, 800808a <sqrt+0x76>
 8008082:	f002 f901 	bl	800a288 <__errno>
 8008086:	9b08      	ldr	r3, [sp, #32]
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800808e:	eeb0 0a48 	vmov.f32	s0, s16
 8008092:	eef0 0a68 	vmov.f32	s1, s17
 8008096:	b00b      	add	sp, #44	; 0x2c
 8008098:	ecbd 8b02 	vpop	{d8}
 800809c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fb70 	bl	800078c <__aeabi_ddiv>
 80080ac:	2e02      	cmp	r6, #2
 80080ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080b2:	d1e0      	bne.n	8008076 <sqrt+0x62>
 80080b4:	f002 f8e8 	bl	800a288 <__errno>
 80080b8:	2321      	movs	r3, #33	; 0x21
 80080ba:	6003      	str	r3, [r0, #0]
 80080bc:	e7df      	b.n	800807e <sqrt+0x6a>
 80080be:	bf00      	nop
 80080c0:	20000008 	.word	0x20000008
 80080c4:	0800a2f5 	.word	0x0800a2f5

080080c8 <__ieee754_atan2>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	ec57 6b11 	vmov	r6, r7, d1
 80080d0:	4273      	negs	r3, r6
 80080d2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80080d6:	4333      	orrs	r3, r6
 80080d8:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008278 <__ieee754_atan2+0x1b0>
 80080dc:	ec51 0b10 	vmov	r0, r1, d0
 80080e0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80080e4:	4563      	cmp	r3, ip
 80080e6:	ee11 8a10 	vmov	r8, s2
 80080ea:	ee10 9a10 	vmov	r9, s0
 80080ee:	468e      	mov	lr, r1
 80080f0:	d807      	bhi.n	8008102 <__ieee754_atan2+0x3a>
 80080f2:	4244      	negs	r4, r0
 80080f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080f8:	4304      	orrs	r4, r0
 80080fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80080fe:	4564      	cmp	r4, ip
 8008100:	d907      	bls.n	8008112 <__ieee754_atan2+0x4a>
 8008102:	4632      	mov	r2, r6
 8008104:	463b      	mov	r3, r7
 8008106:	f7f8 f865 	bl	80001d4 <__adddf3>
 800810a:	ec41 0b10 	vmov	d0, r0, r1
 800810e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008112:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008116:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800811a:	4334      	orrs	r4, r6
 800811c:	d103      	bne.n	8008126 <__ieee754_atan2+0x5e>
 800811e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008122:	f001 bd59 	b.w	8009bd8 <atan>
 8008126:	17bc      	asrs	r4, r7, #30
 8008128:	f004 0402 	and.w	r4, r4, #2
 800812c:	ea59 0903 	orrs.w	r9, r9, r3
 8008130:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008134:	d107      	bne.n	8008146 <__ieee754_atan2+0x7e>
 8008136:	2c02      	cmp	r4, #2
 8008138:	d030      	beq.n	800819c <__ieee754_atan2+0xd4>
 800813a:	2c03      	cmp	r4, #3
 800813c:	d1e5      	bne.n	800810a <__ieee754_atan2+0x42>
 800813e:	a13c      	add	r1, pc, #240	; (adr r1, 8008230 <__ieee754_atan2+0x168>)
 8008140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008144:	e7e1      	b.n	800810a <__ieee754_atan2+0x42>
 8008146:	ea58 0802 	orrs.w	r8, r8, r2
 800814a:	d106      	bne.n	800815a <__ieee754_atan2+0x92>
 800814c:	f1be 0f00 	cmp.w	lr, #0
 8008150:	da6a      	bge.n	8008228 <__ieee754_atan2+0x160>
 8008152:	a139      	add	r1, pc, #228	; (adr r1, 8008238 <__ieee754_atan2+0x170>)
 8008154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008158:	e7d7      	b.n	800810a <__ieee754_atan2+0x42>
 800815a:	4562      	cmp	r2, ip
 800815c:	d122      	bne.n	80081a4 <__ieee754_atan2+0xdc>
 800815e:	4293      	cmp	r3, r2
 8008160:	d111      	bne.n	8008186 <__ieee754_atan2+0xbe>
 8008162:	2c02      	cmp	r4, #2
 8008164:	d007      	beq.n	8008176 <__ieee754_atan2+0xae>
 8008166:	2c03      	cmp	r4, #3
 8008168:	d009      	beq.n	800817e <__ieee754_atan2+0xb6>
 800816a:	2c01      	cmp	r4, #1
 800816c:	d156      	bne.n	800821c <__ieee754_atan2+0x154>
 800816e:	a134      	add	r1, pc, #208	; (adr r1, 8008240 <__ieee754_atan2+0x178>)
 8008170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008174:	e7c9      	b.n	800810a <__ieee754_atan2+0x42>
 8008176:	a134      	add	r1, pc, #208	; (adr r1, 8008248 <__ieee754_atan2+0x180>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	e7c5      	b.n	800810a <__ieee754_atan2+0x42>
 800817e:	a134      	add	r1, pc, #208	; (adr r1, 8008250 <__ieee754_atan2+0x188>)
 8008180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008184:	e7c1      	b.n	800810a <__ieee754_atan2+0x42>
 8008186:	2c02      	cmp	r4, #2
 8008188:	d008      	beq.n	800819c <__ieee754_atan2+0xd4>
 800818a:	2c03      	cmp	r4, #3
 800818c:	d0d7      	beq.n	800813e <__ieee754_atan2+0x76>
 800818e:	2c01      	cmp	r4, #1
 8008190:	f04f 0000 	mov.w	r0, #0
 8008194:	d146      	bne.n	8008224 <__ieee754_atan2+0x15c>
 8008196:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800819a:	e7b6      	b.n	800810a <__ieee754_atan2+0x42>
 800819c:	a12e      	add	r1, pc, #184	; (adr r1, 8008258 <__ieee754_atan2+0x190>)
 800819e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a2:	e7b2      	b.n	800810a <__ieee754_atan2+0x42>
 80081a4:	4563      	cmp	r3, ip
 80081a6:	d0d1      	beq.n	800814c <__ieee754_atan2+0x84>
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	151b      	asrs	r3, r3, #20
 80081ac:	2b3c      	cmp	r3, #60	; 0x3c
 80081ae:	dc1e      	bgt.n	80081ee <__ieee754_atan2+0x126>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	da01      	bge.n	80081b8 <__ieee754_atan2+0xf0>
 80081b4:	333c      	adds	r3, #60	; 0x3c
 80081b6:	db1e      	blt.n	80081f6 <__ieee754_atan2+0x12e>
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	f7f8 fae6 	bl	800078c <__aeabi_ddiv>
 80081c0:	ec41 0b10 	vmov	d0, r0, r1
 80081c4:	f001 feb0 	bl	8009f28 <fabs>
 80081c8:	f001 fd06 	bl	8009bd8 <atan>
 80081cc:	ec51 0b10 	vmov	r0, r1, d0
 80081d0:	2c01      	cmp	r4, #1
 80081d2:	d013      	beq.n	80081fc <__ieee754_atan2+0x134>
 80081d4:	2c02      	cmp	r4, #2
 80081d6:	d014      	beq.n	8008202 <__ieee754_atan2+0x13a>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	d096      	beq.n	800810a <__ieee754_atan2+0x42>
 80081dc:	a320      	add	r3, pc, #128	; (adr r3, 8008260 <__ieee754_atan2+0x198>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f7 fff5 	bl	80001d0 <__aeabi_dsub>
 80081e6:	a31c      	add	r3, pc, #112	; (adr r3, 8008258 <__ieee754_atan2+0x190>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	e013      	b.n	8008216 <__ieee754_atan2+0x14e>
 80081ee:	a11e      	add	r1, pc, #120	; (adr r1, 8008268 <__ieee754_atan2+0x1a0>)
 80081f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f4:	e7ec      	b.n	80081d0 <__ieee754_atan2+0x108>
 80081f6:	2000      	movs	r0, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	e7e9      	b.n	80081d0 <__ieee754_atan2+0x108>
 80081fc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008200:	e783      	b.n	800810a <__ieee754_atan2+0x42>
 8008202:	a317      	add	r3, pc, #92	; (adr r3, 8008260 <__ieee754_atan2+0x198>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f7 ffe2 	bl	80001d0 <__aeabi_dsub>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	a111      	add	r1, pc, #68	; (adr r1, 8008258 <__ieee754_atan2+0x190>)
 8008212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008216:	f7f7 ffdb 	bl	80001d0 <__aeabi_dsub>
 800821a:	e776      	b.n	800810a <__ieee754_atan2+0x42>
 800821c:	a114      	add	r1, pc, #80	; (adr r1, 8008270 <__ieee754_atan2+0x1a8>)
 800821e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008222:	e772      	b.n	800810a <__ieee754_atan2+0x42>
 8008224:	2100      	movs	r1, #0
 8008226:	e770      	b.n	800810a <__ieee754_atan2+0x42>
 8008228:	a10f      	add	r1, pc, #60	; (adr r1, 8008268 <__ieee754_atan2+0x1a0>)
 800822a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822e:	e76c      	b.n	800810a <__ieee754_atan2+0x42>
 8008230:	54442d18 	.word	0x54442d18
 8008234:	c00921fb 	.word	0xc00921fb
 8008238:	54442d18 	.word	0x54442d18
 800823c:	bff921fb 	.word	0xbff921fb
 8008240:	54442d18 	.word	0x54442d18
 8008244:	bfe921fb 	.word	0xbfe921fb
 8008248:	7f3321d2 	.word	0x7f3321d2
 800824c:	4002d97c 	.word	0x4002d97c
 8008250:	7f3321d2 	.word	0x7f3321d2
 8008254:	c002d97c 	.word	0xc002d97c
 8008258:	54442d18 	.word	0x54442d18
 800825c:	400921fb 	.word	0x400921fb
 8008260:	33145c07 	.word	0x33145c07
 8008264:	3ca1a626 	.word	0x3ca1a626
 8008268:	54442d18 	.word	0x54442d18
 800826c:	3ff921fb 	.word	0x3ff921fb
 8008270:	54442d18 	.word	0x54442d18
 8008274:	3fe921fb 	.word	0x3fe921fb
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	00000000 	.word	0x00000000

08008280 <__ieee754_pow>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b091      	sub	sp, #68	; 0x44
 8008286:	ed8d 1b00 	vstr	d1, [sp]
 800828a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800828e:	ec57 6b10 	vmov	r6, r7, d0
 8008292:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008296:	ea58 0302 	orrs.w	r3, r8, r2
 800829a:	ee10 aa10 	vmov	sl, s0
 800829e:	463d      	mov	r5, r7
 80082a0:	f000 84bd 	beq.w	8008c1e <__ieee754_pow+0x99e>
 80082a4:	4b78      	ldr	r3, [pc, #480]	; (8008488 <__ieee754_pow+0x208>)
 80082a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80082aa:	429c      	cmp	r4, r3
 80082ac:	dc09      	bgt.n	80082c2 <__ieee754_pow+0x42>
 80082ae:	d103      	bne.n	80082b8 <__ieee754_pow+0x38>
 80082b0:	b93e      	cbnz	r6, 80082c2 <__ieee754_pow+0x42>
 80082b2:	45a0      	cmp	r8, r4
 80082b4:	dc0d      	bgt.n	80082d2 <__ieee754_pow+0x52>
 80082b6:	e001      	b.n	80082bc <__ieee754_pow+0x3c>
 80082b8:	4598      	cmp	r8, r3
 80082ba:	dc02      	bgt.n	80082c2 <__ieee754_pow+0x42>
 80082bc:	4598      	cmp	r8, r3
 80082be:	d10e      	bne.n	80082de <__ieee754_pow+0x5e>
 80082c0:	b16a      	cbz	r2, 80082de <__ieee754_pow+0x5e>
 80082c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80082c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082ca:	ea54 030a 	orrs.w	r3, r4, sl
 80082ce:	f000 84a6 	beq.w	8008c1e <__ieee754_pow+0x99e>
 80082d2:	486e      	ldr	r0, [pc, #440]	; (800848c <__ieee754_pow+0x20c>)
 80082d4:	b011      	add	sp, #68	; 0x44
 80082d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082da:	f001 bebd 	b.w	800a058 <nan>
 80082de:	2d00      	cmp	r5, #0
 80082e0:	da53      	bge.n	800838a <__ieee754_pow+0x10a>
 80082e2:	4b6b      	ldr	r3, [pc, #428]	; (8008490 <__ieee754_pow+0x210>)
 80082e4:	4598      	cmp	r8, r3
 80082e6:	dc4d      	bgt.n	8008384 <__ieee754_pow+0x104>
 80082e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80082ec:	4598      	cmp	r8, r3
 80082ee:	dd4c      	ble.n	800838a <__ieee754_pow+0x10a>
 80082f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082f8:	2b14      	cmp	r3, #20
 80082fa:	dd26      	ble.n	800834a <__ieee754_pow+0xca>
 80082fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008300:	fa22 f103 	lsr.w	r1, r2, r3
 8008304:	fa01 f303 	lsl.w	r3, r1, r3
 8008308:	429a      	cmp	r2, r3
 800830a:	d13e      	bne.n	800838a <__ieee754_pow+0x10a>
 800830c:	f001 0101 	and.w	r1, r1, #1
 8008310:	f1c1 0b02 	rsb	fp, r1, #2
 8008314:	2a00      	cmp	r2, #0
 8008316:	d15b      	bne.n	80083d0 <__ieee754_pow+0x150>
 8008318:	4b5b      	ldr	r3, [pc, #364]	; (8008488 <__ieee754_pow+0x208>)
 800831a:	4598      	cmp	r8, r3
 800831c:	d124      	bne.n	8008368 <__ieee754_pow+0xe8>
 800831e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008322:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008326:	ea53 030a 	orrs.w	r3, r3, sl
 800832a:	f000 8478 	beq.w	8008c1e <__ieee754_pow+0x99e>
 800832e:	4b59      	ldr	r3, [pc, #356]	; (8008494 <__ieee754_pow+0x214>)
 8008330:	429c      	cmp	r4, r3
 8008332:	dd2d      	ble.n	8008390 <__ieee754_pow+0x110>
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	f280 8475 	bge.w	8008c26 <__ieee754_pow+0x9a6>
 800833c:	2000      	movs	r0, #0
 800833e:	2100      	movs	r1, #0
 8008340:	ec41 0b10 	vmov	d0, r0, r1
 8008344:	b011      	add	sp, #68	; 0x44
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	2a00      	cmp	r2, #0
 800834c:	d13e      	bne.n	80083cc <__ieee754_pow+0x14c>
 800834e:	f1c3 0314 	rsb	r3, r3, #20
 8008352:	fa48 f103 	asr.w	r1, r8, r3
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	4598      	cmp	r8, r3
 800835c:	f040 846b 	bne.w	8008c36 <__ieee754_pow+0x9b6>
 8008360:	f001 0101 	and.w	r1, r1, #1
 8008364:	f1c1 0b02 	rsb	fp, r1, #2
 8008368:	4b4b      	ldr	r3, [pc, #300]	; (8008498 <__ieee754_pow+0x218>)
 800836a:	4598      	cmp	r8, r3
 800836c:	d118      	bne.n	80083a0 <__ieee754_pow+0x120>
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	f280 845c 	bge.w	8008c2e <__ieee754_pow+0x9ae>
 8008376:	4948      	ldr	r1, [pc, #288]	; (8008498 <__ieee754_pow+0x218>)
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	2000      	movs	r0, #0
 800837e:	f7f8 fa05 	bl	800078c <__aeabi_ddiv>
 8008382:	e7dd      	b.n	8008340 <__ieee754_pow+0xc0>
 8008384:	f04f 0b02 	mov.w	fp, #2
 8008388:	e7c4      	b.n	8008314 <__ieee754_pow+0x94>
 800838a:	f04f 0b00 	mov.w	fp, #0
 800838e:	e7c1      	b.n	8008314 <__ieee754_pow+0x94>
 8008390:	f1b9 0f00 	cmp.w	r9, #0
 8008394:	dad2      	bge.n	800833c <__ieee754_pow+0xbc>
 8008396:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800839a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800839e:	e7cf      	b.n	8008340 <__ieee754_pow+0xc0>
 80083a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80083a4:	d106      	bne.n	80083b4 <__ieee754_pow+0x134>
 80083a6:	4632      	mov	r2, r6
 80083a8:	463b      	mov	r3, r7
 80083aa:	4610      	mov	r0, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	f7f8 f8c3 	bl	8000538 <__aeabi_dmul>
 80083b2:	e7c5      	b.n	8008340 <__ieee754_pow+0xc0>
 80083b4:	4b39      	ldr	r3, [pc, #228]	; (800849c <__ieee754_pow+0x21c>)
 80083b6:	4599      	cmp	r9, r3
 80083b8:	d10a      	bne.n	80083d0 <__ieee754_pow+0x150>
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	db08      	blt.n	80083d0 <__ieee754_pow+0x150>
 80083be:	ec47 6b10 	vmov	d0, r6, r7
 80083c2:	b011      	add	sp, #68	; 0x44
 80083c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	f000 be60 	b.w	800908c <__ieee754_sqrt>
 80083cc:	f04f 0b00 	mov.w	fp, #0
 80083d0:	ec47 6b10 	vmov	d0, r6, r7
 80083d4:	f001 fda8 	bl	8009f28 <fabs>
 80083d8:	ec51 0b10 	vmov	r0, r1, d0
 80083dc:	f1ba 0f00 	cmp.w	sl, #0
 80083e0:	d127      	bne.n	8008432 <__ieee754_pow+0x1b2>
 80083e2:	b124      	cbz	r4, 80083ee <__ieee754_pow+0x16e>
 80083e4:	4b2c      	ldr	r3, [pc, #176]	; (8008498 <__ieee754_pow+0x218>)
 80083e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d121      	bne.n	8008432 <__ieee754_pow+0x1b2>
 80083ee:	f1b9 0f00 	cmp.w	r9, #0
 80083f2:	da05      	bge.n	8008400 <__ieee754_pow+0x180>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	2000      	movs	r0, #0
 80083fa:	4927      	ldr	r1, [pc, #156]	; (8008498 <__ieee754_pow+0x218>)
 80083fc:	f7f8 f9c6 	bl	800078c <__aeabi_ddiv>
 8008400:	2d00      	cmp	r5, #0
 8008402:	da9d      	bge.n	8008340 <__ieee754_pow+0xc0>
 8008404:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008408:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800840c:	ea54 030b 	orrs.w	r3, r4, fp
 8008410:	d108      	bne.n	8008424 <__ieee754_pow+0x1a4>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f7 fed9 	bl	80001d0 <__aeabi_dsub>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e7ac      	b.n	800837e <__ieee754_pow+0xfe>
 8008424:	f1bb 0f01 	cmp.w	fp, #1
 8008428:	d18a      	bne.n	8008340 <__ieee754_pow+0xc0>
 800842a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842e:	4619      	mov	r1, r3
 8008430:	e786      	b.n	8008340 <__ieee754_pow+0xc0>
 8008432:	0fed      	lsrs	r5, r5, #31
 8008434:	1e6b      	subs	r3, r5, #1
 8008436:	930d      	str	r3, [sp, #52]	; 0x34
 8008438:	ea5b 0303 	orrs.w	r3, fp, r3
 800843c:	d102      	bne.n	8008444 <__ieee754_pow+0x1c4>
 800843e:	4632      	mov	r2, r6
 8008440:	463b      	mov	r3, r7
 8008442:	e7e8      	b.n	8008416 <__ieee754_pow+0x196>
 8008444:	4b16      	ldr	r3, [pc, #88]	; (80084a0 <__ieee754_pow+0x220>)
 8008446:	4598      	cmp	r8, r3
 8008448:	f340 80fe 	ble.w	8008648 <__ieee754_pow+0x3c8>
 800844c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008450:	4598      	cmp	r8, r3
 8008452:	dd0a      	ble.n	800846a <__ieee754_pow+0x1ea>
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <__ieee754_pow+0x214>)
 8008456:	429c      	cmp	r4, r3
 8008458:	dc0d      	bgt.n	8008476 <__ieee754_pow+0x1f6>
 800845a:	f1b9 0f00 	cmp.w	r9, #0
 800845e:	f6bf af6d 	bge.w	800833c <__ieee754_pow+0xbc>
 8008462:	a307      	add	r3, pc, #28	; (adr r3, 8008480 <__ieee754_pow+0x200>)
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	e79f      	b.n	80083aa <__ieee754_pow+0x12a>
 800846a:	4b0e      	ldr	r3, [pc, #56]	; (80084a4 <__ieee754_pow+0x224>)
 800846c:	429c      	cmp	r4, r3
 800846e:	ddf4      	ble.n	800845a <__ieee754_pow+0x1da>
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <__ieee754_pow+0x218>)
 8008472:	429c      	cmp	r4, r3
 8008474:	dd18      	ble.n	80084a8 <__ieee754_pow+0x228>
 8008476:	f1b9 0f00 	cmp.w	r9, #0
 800847a:	dcf2      	bgt.n	8008462 <__ieee754_pow+0x1e2>
 800847c:	e75e      	b.n	800833c <__ieee754_pow+0xbc>
 800847e:	bf00      	nop
 8008480:	8800759c 	.word	0x8800759c
 8008484:	7e37e43c 	.word	0x7e37e43c
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	0800a2d0 	.word	0x0800a2d0
 8008490:	433fffff 	.word	0x433fffff
 8008494:	3fefffff 	.word	0x3fefffff
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	3fe00000 	.word	0x3fe00000
 80084a0:	41e00000 	.word	0x41e00000
 80084a4:	3feffffe 	.word	0x3feffffe
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b63      	ldr	r3, [pc, #396]	; (8008638 <__ieee754_pow+0x3b8>)
 80084ac:	f7f7 fe90 	bl	80001d0 <__aeabi_dsub>
 80084b0:	a355      	add	r3, pc, #340	; (adr r3, 8008608 <__ieee754_pow+0x388>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	4604      	mov	r4, r0
 80084b8:	460d      	mov	r5, r1
 80084ba:	f7f8 f83d 	bl	8000538 <__aeabi_dmul>
 80084be:	a354      	add	r3, pc, #336	; (adr r3, 8008610 <__ieee754_pow+0x390>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	4620      	mov	r0, r4
 80084ca:	4629      	mov	r1, r5
 80084cc:	f7f8 f834 	bl	8000538 <__aeabi_dmul>
 80084d0:	2200      	movs	r2, #0
 80084d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d6:	4b59      	ldr	r3, [pc, #356]	; (800863c <__ieee754_pow+0x3bc>)
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	f7f8 f82c 	bl	8000538 <__aeabi_dmul>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	a14c      	add	r1, pc, #304	; (adr r1, 8008618 <__ieee754_pow+0x398>)
 80084e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ea:	f7f7 fe71 	bl	80001d0 <__aeabi_dsub>
 80084ee:	4622      	mov	r2, r4
 80084f0:	462b      	mov	r3, r5
 80084f2:	f7f8 f821 	bl	8000538 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	2000      	movs	r0, #0
 80084fc:	4950      	ldr	r1, [pc, #320]	; (8008640 <__ieee754_pow+0x3c0>)
 80084fe:	f7f7 fe67 	bl	80001d0 <__aeabi_dsub>
 8008502:	4622      	mov	r2, r4
 8008504:	462b      	mov	r3, r5
 8008506:	4680      	mov	r8, r0
 8008508:	4689      	mov	r9, r1
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f8 f813 	bl	8000538 <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f8 f80d 	bl	8000538 <__aeabi_dmul>
 800851e:	a340      	add	r3, pc, #256	; (adr r3, 8008620 <__ieee754_pow+0x3a0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f8 f808 	bl	8000538 <__aeabi_dmul>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008530:	f7f7 fe4e 	bl	80001d0 <__aeabi_dsub>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4604      	mov	r4, r0
 800853a:	460d      	mov	r5, r1
 800853c:	4630      	mov	r0, r6
 800853e:	4639      	mov	r1, r7
 8008540:	f7f7 fe48 	bl	80001d4 <__adddf3>
 8008544:	2000      	movs	r0, #0
 8008546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800854a:	4632      	mov	r2, r6
 800854c:	463b      	mov	r3, r7
 800854e:	f7f7 fe3f 	bl	80001d0 <__aeabi_dsub>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fe39 	bl	80001d0 <__aeabi_dsub>
 800855e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008560:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008564:	4313      	orrs	r3, r2
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	f040 81eb 	bne.w	8008944 <__ieee754_pow+0x6c4>
 800856e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008628 <__ieee754_pow+0x3a8>
 8008572:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008576:	2400      	movs	r4, #0
 8008578:	4622      	mov	r2, r4
 800857a:	462b      	mov	r3, r5
 800857c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008580:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008584:	f7f7 fe24 	bl	80001d0 <__aeabi_dsub>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	f7f7 ffd4 	bl	8000538 <__aeabi_dmul>
 8008590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008594:	4680      	mov	r8, r0
 8008596:	4689      	mov	r9, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 ffcc 	bl	8000538 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	f7f7 fe14 	bl	80001d4 <__adddf3>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	4680      	mov	r8, r0
 80085b2:	4689      	mov	r9, r1
 80085b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085b8:	f7f7 ffbe 	bl	8000538 <__aeabi_dmul>
 80085bc:	460b      	mov	r3, r1
 80085be:	4604      	mov	r4, r0
 80085c0:	460d      	mov	r5, r1
 80085c2:	4602      	mov	r2, r0
 80085c4:	4649      	mov	r1, r9
 80085c6:	4640      	mov	r0, r8
 80085c8:	e9cd 4500 	strd	r4, r5, [sp]
 80085cc:	f7f7 fe02 	bl	80001d4 <__adddf3>
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <__ieee754_pow+0x3c4>)
 80085d2:	4299      	cmp	r1, r3
 80085d4:	4606      	mov	r6, r0
 80085d6:	460f      	mov	r7, r1
 80085d8:	468b      	mov	fp, r1
 80085da:	f340 82f7 	ble.w	8008bcc <__ieee754_pow+0x94c>
 80085de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80085e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80085e6:	4303      	orrs	r3, r0
 80085e8:	f000 81ea 	beq.w	80089c0 <__ieee754_pow+0x740>
 80085ec:	a310      	add	r3, pc, #64	; (adr r3, 8008630 <__ieee754_pow+0x3b0>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f6:	f7f7 ff9f 	bl	8000538 <__aeabi_dmul>
 80085fa:	a30d      	add	r3, pc, #52	; (adr r3, 8008630 <__ieee754_pow+0x3b0>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	e6d5      	b.n	80083ae <__ieee754_pow+0x12e>
 8008602:	bf00      	nop
 8008604:	f3af 8000 	nop.w
 8008608:	60000000 	.word	0x60000000
 800860c:	3ff71547 	.word	0x3ff71547
 8008610:	f85ddf44 	.word	0xf85ddf44
 8008614:	3e54ae0b 	.word	0x3e54ae0b
 8008618:	55555555 	.word	0x55555555
 800861c:	3fd55555 	.word	0x3fd55555
 8008620:	652b82fe 	.word	0x652b82fe
 8008624:	3ff71547 	.word	0x3ff71547
 8008628:	00000000 	.word	0x00000000
 800862c:	bff00000 	.word	0xbff00000
 8008630:	8800759c 	.word	0x8800759c
 8008634:	7e37e43c 	.word	0x7e37e43c
 8008638:	3ff00000 	.word	0x3ff00000
 800863c:	3fd00000 	.word	0x3fd00000
 8008640:	3fe00000 	.word	0x3fe00000
 8008644:	408fffff 	.word	0x408fffff
 8008648:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	da05      	bge.n	800865e <__ieee754_pow+0x3de>
 8008652:	4bd3      	ldr	r3, [pc, #844]	; (80089a0 <__ieee754_pow+0x720>)
 8008654:	f7f7 ff70 	bl	8000538 <__aeabi_dmul>
 8008658:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800865c:	460c      	mov	r4, r1
 800865e:	1523      	asrs	r3, r4, #20
 8008660:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008664:	4413      	add	r3, r2
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	4bce      	ldr	r3, [pc, #824]	; (80089a4 <__ieee754_pow+0x724>)
 800866a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800866e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008672:	429c      	cmp	r4, r3
 8008674:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008678:	dd08      	ble.n	800868c <__ieee754_pow+0x40c>
 800867a:	4bcb      	ldr	r3, [pc, #812]	; (80089a8 <__ieee754_pow+0x728>)
 800867c:	429c      	cmp	r4, r3
 800867e:	f340 815e 	ble.w	800893e <__ieee754_pow+0x6be>
 8008682:	9b07      	ldr	r3, [sp, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	9307      	str	r3, [sp, #28]
 8008688:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800868c:	f04f 0a00 	mov.w	sl, #0
 8008690:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008694:	930c      	str	r3, [sp, #48]	; 0x30
 8008696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008698:	4bc4      	ldr	r3, [pc, #784]	; (80089ac <__ieee754_pow+0x72c>)
 800869a:	4413      	add	r3, r2
 800869c:	ed93 7b00 	vldr	d7, [r3]
 80086a0:	4629      	mov	r1, r5
 80086a2:	ec53 2b17 	vmov	r2, r3, d7
 80086a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80086aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086ae:	f7f7 fd8f 	bl	80001d0 <__aeabi_dsub>
 80086b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086be:	f7f7 fd89 	bl	80001d4 <__adddf3>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	2000      	movs	r0, #0
 80086c8:	49b9      	ldr	r1, [pc, #740]	; (80089b0 <__ieee754_pow+0x730>)
 80086ca:	f7f8 f85f 	bl	800078c <__aeabi_ddiv>
 80086ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	f7f7 ff2d 	bl	8000538 <__aeabi_dmul>
 80086de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80086e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80086ea:	2300      	movs	r3, #0
 80086ec:	9302      	str	r3, [sp, #8]
 80086ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086f2:	106d      	asrs	r5, r5, #1
 80086f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086fc:	2200      	movs	r2, #0
 80086fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	4614      	mov	r4, r2
 8008708:	461d      	mov	r5, r3
 800870a:	f7f7 ff15 	bl	8000538 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f7 fd5b 	bl	80001d0 <__aeabi_dsub>
 800871a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	4620      	mov	r0, r4
 8008724:	4629      	mov	r1, r5
 8008726:	f7f7 fd53 	bl	80001d0 <__aeabi_dsub>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008732:	f7f7 fd4d 	bl	80001d0 <__aeabi_dsub>
 8008736:	4642      	mov	r2, r8
 8008738:	464b      	mov	r3, r9
 800873a:	f7f7 fefd 	bl	8000538 <__aeabi_dmul>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f7 fd43 	bl	80001d0 <__aeabi_dsub>
 800874a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800874e:	f7f7 fef3 	bl	8000538 <__aeabi_dmul>
 8008752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008756:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800875a:	4610      	mov	r0, r2
 800875c:	4619      	mov	r1, r3
 800875e:	f7f7 feeb 	bl	8000538 <__aeabi_dmul>
 8008762:	a37b      	add	r3, pc, #492	; (adr r3, 8008950 <__ieee754_pow+0x6d0>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	f7f7 fee4 	bl	8000538 <__aeabi_dmul>
 8008770:	a379      	add	r3, pc, #484	; (adr r3, 8008958 <__ieee754_pow+0x6d8>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 fd2d 	bl	80001d4 <__adddf3>
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	f7f7 fedb 	bl	8000538 <__aeabi_dmul>
 8008782:	a377      	add	r3, pc, #476	; (adr r3, 8008960 <__ieee754_pow+0x6e0>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fd24 	bl	80001d4 <__adddf3>
 800878c:	4622      	mov	r2, r4
 800878e:	462b      	mov	r3, r5
 8008790:	f7f7 fed2 	bl	8000538 <__aeabi_dmul>
 8008794:	a374      	add	r3, pc, #464	; (adr r3, 8008968 <__ieee754_pow+0x6e8>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 fd1b 	bl	80001d4 <__adddf3>
 800879e:	4622      	mov	r2, r4
 80087a0:	462b      	mov	r3, r5
 80087a2:	f7f7 fec9 	bl	8000538 <__aeabi_dmul>
 80087a6:	a372      	add	r3, pc, #456	; (adr r3, 8008970 <__ieee754_pow+0x6f0>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 fd12 	bl	80001d4 <__adddf3>
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	f7f7 fec0 	bl	8000538 <__aeabi_dmul>
 80087b8:	a36f      	add	r3, pc, #444	; (adr r3, 8008978 <__ieee754_pow+0x6f8>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 fd09 	bl	80001d4 <__adddf3>
 80087c2:	4622      	mov	r2, r4
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	462b      	mov	r3, r5
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f7 feb3 	bl	8000538 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f7 fead 	bl	8000538 <__aeabi_dmul>
 80087de:	4642      	mov	r2, r8
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	464b      	mov	r3, r9
 80087e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ea:	f7f7 fcf3 	bl	80001d4 <__adddf3>
 80087ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087f2:	f7f7 fea1 	bl	8000538 <__aeabi_dmul>
 80087f6:	4622      	mov	r2, r4
 80087f8:	462b      	mov	r3, r5
 80087fa:	f7f7 fceb 	bl	80001d4 <__adddf3>
 80087fe:	4642      	mov	r2, r8
 8008800:	4606      	mov	r6, r0
 8008802:	460f      	mov	r7, r1
 8008804:	464b      	mov	r3, r9
 8008806:	4640      	mov	r0, r8
 8008808:	4649      	mov	r1, r9
 800880a:	f7f7 fe95 	bl	8000538 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	4b68      	ldr	r3, [pc, #416]	; (80089b4 <__ieee754_pow+0x734>)
 8008812:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008816:	f7f7 fcdd 	bl	80001d4 <__adddf3>
 800881a:	4632      	mov	r2, r6
 800881c:	463b      	mov	r3, r7
 800881e:	f7f7 fcd9 	bl	80001d4 <__adddf3>
 8008822:	9802      	ldr	r0, [sp, #8]
 8008824:	460d      	mov	r5, r1
 8008826:	4604      	mov	r4, r0
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f7 fe82 	bl	8000538 <__aeabi_dmul>
 8008834:	2200      	movs	r2, #0
 8008836:	4680      	mov	r8, r0
 8008838:	4689      	mov	r9, r1
 800883a:	4b5e      	ldr	r3, [pc, #376]	; (80089b4 <__ieee754_pow+0x734>)
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f7 fcc6 	bl	80001d0 <__aeabi_dsub>
 8008844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008848:	f7f7 fcc2 	bl	80001d0 <__aeabi_dsub>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f7 fcbc 	bl	80001d0 <__aeabi_dsub>
 8008858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800885c:	f7f7 fe6c 	bl	8000538 <__aeabi_dmul>
 8008860:	4622      	mov	r2, r4
 8008862:	4606      	mov	r6, r0
 8008864:	460f      	mov	r7, r1
 8008866:	462b      	mov	r3, r5
 8008868:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800886c:	f7f7 fe64 	bl	8000538 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f7f7 fcac 	bl	80001d4 <__adddf3>
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4640      	mov	r0, r8
 8008886:	4649      	mov	r1, r9
 8008888:	f7f7 fca4 	bl	80001d4 <__adddf3>
 800888c:	9802      	ldr	r0, [sp, #8]
 800888e:	a33c      	add	r3, pc, #240	; (adr r3, 8008980 <__ieee754_pow+0x700>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	f7f7 fe4e 	bl	8000538 <__aeabi_dmul>
 800889c:	4642      	mov	r2, r8
 800889e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088a2:	464b      	mov	r3, r9
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f7 fc92 	bl	80001d0 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4630      	mov	r0, r6
 80088b2:	4639      	mov	r1, r7
 80088b4:	f7f7 fc8c 	bl	80001d0 <__aeabi_dsub>
 80088b8:	a333      	add	r3, pc, #204	; (adr r3, 8008988 <__ieee754_pow+0x708>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fe3b 	bl	8000538 <__aeabi_dmul>
 80088c2:	a333      	add	r3, pc, #204	; (adr r3, 8008990 <__ieee754_pow+0x710>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fe32 	bl	8000538 <__aeabi_dmul>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f7 fc7a 	bl	80001d4 <__adddf3>
 80088e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e2:	4b35      	ldr	r3, [pc, #212]	; (80089b8 <__ieee754_pow+0x738>)
 80088e4:	4413      	add	r3, r2
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fc73 	bl	80001d4 <__adddf3>
 80088ee:	4604      	mov	r4, r0
 80088f0:	9807      	ldr	r0, [sp, #28]
 80088f2:	460d      	mov	r5, r1
 80088f4:	f7f7 fdba 	bl	800046c <__aeabi_i2d>
 80088f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088fa:	4b30      	ldr	r3, [pc, #192]	; (80089bc <__ieee754_pow+0x73c>)
 80088fc:	4413      	add	r3, r2
 80088fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800890e:	f7f7 fc61 	bl	80001d4 <__adddf3>
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	f7f7 fc5d 	bl	80001d4 <__adddf3>
 800891a:	4632      	mov	r2, r6
 800891c:	463b      	mov	r3, r7
 800891e:	f7f7 fc59 	bl	80001d4 <__adddf3>
 8008922:	9802      	ldr	r0, [sp, #8]
 8008924:	4632      	mov	r2, r6
 8008926:	463b      	mov	r3, r7
 8008928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800892c:	f7f7 fc50 	bl	80001d0 <__aeabi_dsub>
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	f7f7 fc4c 	bl	80001d0 <__aeabi_dsub>
 8008938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800893c:	e607      	b.n	800854e <__ieee754_pow+0x2ce>
 800893e:	f04f 0a01 	mov.w	sl, #1
 8008942:	e6a5      	b.n	8008690 <__ieee754_pow+0x410>
 8008944:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008998 <__ieee754_pow+0x718>
 8008948:	e613      	b.n	8008572 <__ieee754_pow+0x2f2>
 800894a:	bf00      	nop
 800894c:	f3af 8000 	nop.w
 8008950:	4a454eef 	.word	0x4a454eef
 8008954:	3fca7e28 	.word	0x3fca7e28
 8008958:	93c9db65 	.word	0x93c9db65
 800895c:	3fcd864a 	.word	0x3fcd864a
 8008960:	a91d4101 	.word	0xa91d4101
 8008964:	3fd17460 	.word	0x3fd17460
 8008968:	518f264d 	.word	0x518f264d
 800896c:	3fd55555 	.word	0x3fd55555
 8008970:	db6fabff 	.word	0xdb6fabff
 8008974:	3fdb6db6 	.word	0x3fdb6db6
 8008978:	33333303 	.word	0x33333303
 800897c:	3fe33333 	.word	0x3fe33333
 8008980:	e0000000 	.word	0xe0000000
 8008984:	3feec709 	.word	0x3feec709
 8008988:	dc3a03fd 	.word	0xdc3a03fd
 800898c:	3feec709 	.word	0x3feec709
 8008990:	145b01f5 	.word	0x145b01f5
 8008994:	be3e2fe0 	.word	0xbe3e2fe0
 8008998:	00000000 	.word	0x00000000
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	43400000 	.word	0x43400000
 80089a4:	0003988e 	.word	0x0003988e
 80089a8:	000bb679 	.word	0x000bb679
 80089ac:	0800a300 	.word	0x0800a300
 80089b0:	3ff00000 	.word	0x3ff00000
 80089b4:	40080000 	.word	0x40080000
 80089b8:	0800a320 	.word	0x0800a320
 80089bc:	0800a310 	.word	0x0800a310
 80089c0:	a3b6      	add	r3, pc, #728	; (adr r3, 8008c9c <__ieee754_pow+0xa1c>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	4640      	mov	r0, r8
 80089c8:	4649      	mov	r1, r9
 80089ca:	f7f7 fc03 	bl	80001d4 <__adddf3>
 80089ce:	4622      	mov	r2, r4
 80089d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089d4:	462b      	mov	r3, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f7 fbf9 	bl	80001d0 <__aeabi_dsub>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e6:	f7f8 f837 	bl	8000a58 <__aeabi_dcmpgt>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f47f adfe 	bne.w	80085ec <__ieee754_pow+0x36c>
 80089f0:	4aa5      	ldr	r2, [pc, #660]	; (8008c88 <__ieee754_pow+0xa08>)
 80089f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089f6:	4293      	cmp	r3, r2
 80089f8:	f340 810c 	ble.w	8008c14 <__ieee754_pow+0x994>
 80089fc:	151b      	asrs	r3, r3, #20
 80089fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a06:	fa4a f303 	asr.w	r3, sl, r3
 8008a0a:	445b      	add	r3, fp
 8008a0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008a10:	4e9e      	ldr	r6, [pc, #632]	; (8008c8c <__ieee754_pow+0xa0c>)
 8008a12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008a16:	4116      	asrs	r6, r2
 8008a18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	ea23 0106 	bic.w	r1, r3, r6
 8008a22:	f1c2 0214 	rsb	r2, r2, #20
 8008a26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a2a:	fa4a fa02 	asr.w	sl, sl, r2
 8008a2e:	f1bb 0f00 	cmp.w	fp, #0
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4620      	mov	r0, r4
 8008a38:	4629      	mov	r1, r5
 8008a3a:	bfb8      	it	lt
 8008a3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a40:	f7f7 fbc6 	bl	80001d0 <__aeabi_dsub>
 8008a44:	e9cd 0100 	strd	r0, r1, [sp]
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a50:	f7f7 fbc0 	bl	80001d4 <__adddf3>
 8008a54:	2000      	movs	r0, #0
 8008a56:	a37a      	add	r3, pc, #488	; (adr r3, 8008c40 <__ieee754_pow+0x9c0>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	f7f7 fd6a 	bl	8000538 <__aeabi_dmul>
 8008a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460f      	mov	r7, r1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 fbae 	bl	80001d0 <__aeabi_dsub>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f7 fba8 	bl	80001d0 <__aeabi_dsub>
 8008a80:	a371      	add	r3, pc, #452	; (adr r3, 8008c48 <__ieee754_pow+0x9c8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fd57 	bl	8000538 <__aeabi_dmul>
 8008a8a:	a371      	add	r3, pc, #452	; (adr r3, 8008c50 <__ieee754_pow+0x9d0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4680      	mov	r8, r0
 8008a92:	4689      	mov	r9, r1
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fd4e 	bl	8000538 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f7 fb96 	bl	80001d4 <__adddf3>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f7 fb8e 	bl	80001d4 <__adddf3>
 8008ab8:	4632      	mov	r2, r6
 8008aba:	463b      	mov	r3, r7
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	f7f7 fb86 	bl	80001d0 <__aeabi_dsub>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7f7 fb80 	bl	80001d0 <__aeabi_dsub>
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f7 fd2c 	bl	8000538 <__aeabi_dmul>
 8008ae0:	a35d      	add	r3, pc, #372	; (adr r3, 8008c58 <__ieee754_pow+0x9d8>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	f7f7 fd25 	bl	8000538 <__aeabi_dmul>
 8008aee:	a35c      	add	r3, pc, #368	; (adr r3, 8008c60 <__ieee754_pow+0x9e0>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f7 fb6c 	bl	80001d0 <__aeabi_dsub>
 8008af8:	4622      	mov	r2, r4
 8008afa:	462b      	mov	r3, r5
 8008afc:	f7f7 fd1c 	bl	8000538 <__aeabi_dmul>
 8008b00:	a359      	add	r3, pc, #356	; (adr r3, 8008c68 <__ieee754_pow+0x9e8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fb65 	bl	80001d4 <__adddf3>
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	f7f7 fd13 	bl	8000538 <__aeabi_dmul>
 8008b12:	a357      	add	r3, pc, #348	; (adr r3, 8008c70 <__ieee754_pow+0x9f0>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	f7f7 fb5a 	bl	80001d0 <__aeabi_dsub>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	462b      	mov	r3, r5
 8008b20:	f7f7 fd0a 	bl	8000538 <__aeabi_dmul>
 8008b24:	a354      	add	r3, pc, #336	; (adr r3, 8008c78 <__ieee754_pow+0x9f8>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 fb53 	bl	80001d4 <__adddf3>
 8008b2e:	4622      	mov	r2, r4
 8008b30:	462b      	mov	r3, r5
 8008b32:	f7f7 fd01 	bl	8000538 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fb47 	bl	80001d0 <__aeabi_dsub>
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fcf3 	bl	8000538 <__aeabi_dmul>
 8008b52:	2200      	movs	r2, #0
 8008b54:	e9cd 0100 	strd	r0, r1, [sp]
 8008b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fb36 	bl	80001d0 <__aeabi_dsub>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b6c:	f7f7 fe0e 	bl	800078c <__aeabi_ddiv>
 8008b70:	4632      	mov	r2, r6
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	463b      	mov	r3, r7
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 fcdc 	bl	8000538 <__aeabi_dmul>
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	f7f7 fb26 	bl	80001d4 <__adddf3>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fb1e 	bl	80001d0 <__aeabi_dsub>
 8008b94:	4642      	mov	r2, r8
 8008b96:	464b      	mov	r3, r9
 8008b98:	f7f7 fb1a 	bl	80001d0 <__aeabi_dsub>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	493b      	ldr	r1, [pc, #236]	; (8008c90 <__ieee754_pow+0xa10>)
 8008ba4:	f7f7 fb14 	bl	80001d0 <__aeabi_dsub>
 8008ba8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008bac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	da31      	bge.n	8008c1a <__ieee754_pow+0x99a>
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	ec43 2b10 	vmov	d0, r2, r3
 8008bbc:	f001 fadc 	bl	800a178 <scalbn>
 8008bc0:	ec51 0b10 	vmov	r0, r1, d0
 8008bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bc8:	f7ff bbf1 	b.w	80083ae <__ieee754_pow+0x12e>
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <__ieee754_pow+0xa14>)
 8008bce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bd2:	429e      	cmp	r6, r3
 8008bd4:	f77f af0c 	ble.w	80089f0 <__ieee754_pow+0x770>
 8008bd8:	4b2f      	ldr	r3, [pc, #188]	; (8008c98 <__ieee754_pow+0xa18>)
 8008bda:	440b      	add	r3, r1
 8008bdc:	4303      	orrs	r3, r0
 8008bde:	d00b      	beq.n	8008bf8 <__ieee754_pow+0x978>
 8008be0:	a327      	add	r3, pc, #156	; (adr r3, 8008c80 <__ieee754_pow+0xa00>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bea:	f7f7 fca5 	bl	8000538 <__aeabi_dmul>
 8008bee:	a324      	add	r3, pc, #144	; (adr r3, 8008c80 <__ieee754_pow+0xa00>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7ff bbdb 	b.w	80083ae <__ieee754_pow+0x12e>
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	462b      	mov	r3, r5
 8008bfc:	f7f7 fae8 	bl	80001d0 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 ff12 	bl	8000a30 <__aeabi_dcmple>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f43f aeef 	beq.w	80089f0 <__ieee754_pow+0x770>
 8008c12:	e7e5      	b.n	8008be0 <__ieee754_pow+0x960>
 8008c14:	f04f 0a00 	mov.w	sl, #0
 8008c18:	e716      	b.n	8008a48 <__ieee754_pow+0x7c8>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	e7d2      	b.n	8008bc4 <__ieee754_pow+0x944>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	491b      	ldr	r1, [pc, #108]	; (8008c90 <__ieee754_pow+0xa10>)
 8008c22:	f7ff bb8d 	b.w	8008340 <__ieee754_pow+0xc0>
 8008c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c2a:	f7ff bb89 	b.w	8008340 <__ieee754_pow+0xc0>
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7ff bb85 	b.w	8008340 <__ieee754_pow+0xc0>
 8008c36:	4693      	mov	fp, r2
 8008c38:	f7ff bb96 	b.w	8008368 <__ieee754_pow+0xe8>
 8008c3c:	f3af 8000 	nop.w
 8008c40:	00000000 	.word	0x00000000
 8008c44:	3fe62e43 	.word	0x3fe62e43
 8008c48:	fefa39ef 	.word	0xfefa39ef
 8008c4c:	3fe62e42 	.word	0x3fe62e42
 8008c50:	0ca86c39 	.word	0x0ca86c39
 8008c54:	be205c61 	.word	0xbe205c61
 8008c58:	72bea4d0 	.word	0x72bea4d0
 8008c5c:	3e663769 	.word	0x3e663769
 8008c60:	c5d26bf1 	.word	0xc5d26bf1
 8008c64:	3ebbbd41 	.word	0x3ebbbd41
 8008c68:	af25de2c 	.word	0xaf25de2c
 8008c6c:	3f11566a 	.word	0x3f11566a
 8008c70:	16bebd93 	.word	0x16bebd93
 8008c74:	3f66c16c 	.word	0x3f66c16c
 8008c78:	5555553e 	.word	0x5555553e
 8008c7c:	3fc55555 	.word	0x3fc55555
 8008c80:	c2f8f359 	.word	0xc2f8f359
 8008c84:	01a56e1f 	.word	0x01a56e1f
 8008c88:	3fe00000 	.word	0x3fe00000
 8008c8c:	000fffff 	.word	0x000fffff
 8008c90:	3ff00000 	.word	0x3ff00000
 8008c94:	4090cbff 	.word	0x4090cbff
 8008c98:	3f6f3400 	.word	0x3f6f3400
 8008c9c:	652b82fe 	.word	0x652b82fe
 8008ca0:	3c971547 	.word	0x3c971547
 8008ca4:	00000000 	.word	0x00000000

08008ca8 <__ieee754_rem_pio2>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	ec57 6b10 	vmov	r6, r7, d0
 8008cb0:	4bc3      	ldr	r3, [pc, #780]	; (8008fc0 <__ieee754_rem_pio2+0x318>)
 8008cb2:	b08d      	sub	sp, #52	; 0x34
 8008cb4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008cb8:	4598      	cmp	r8, r3
 8008cba:	4604      	mov	r4, r0
 8008cbc:	9704      	str	r7, [sp, #16]
 8008cbe:	dc07      	bgt.n	8008cd0 <__ieee754_rem_pio2+0x28>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	ed84 0b00 	vstr	d0, [r4]
 8008cc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008ccc:	2500      	movs	r5, #0
 8008cce:	e027      	b.n	8008d20 <__ieee754_rem_pio2+0x78>
 8008cd0:	4bbc      	ldr	r3, [pc, #752]	; (8008fc4 <__ieee754_rem_pio2+0x31c>)
 8008cd2:	4598      	cmp	r8, r3
 8008cd4:	dc75      	bgt.n	8008dc2 <__ieee754_rem_pio2+0x11a>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	4dbb      	ldr	r5, [pc, #748]	; (8008fc8 <__ieee754_rem_pio2+0x320>)
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	ee10 0a10 	vmov	r0, s0
 8008ce0:	a3a9      	add	r3, pc, #676	; (adr r3, 8008f88 <__ieee754_rem_pio2+0x2e0>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	dd36      	ble.n	8008d58 <__ieee754_rem_pio2+0xb0>
 8008cea:	f7f7 fa71 	bl	80001d0 <__aeabi_dsub>
 8008cee:	45a8      	cmp	r8, r5
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	d018      	beq.n	8008d28 <__ieee754_rem_pio2+0x80>
 8008cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x2e8>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fa68 	bl	80001d0 <__aeabi_dsub>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	e9c4 2300 	strd	r2, r3, [r4]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fa60 	bl	80001d0 <__aeabi_dsub>
 8008d10:	a39f      	add	r3, pc, #636	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x2e8>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fa5b 	bl	80001d0 <__aeabi_dsub>
 8008d1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d1e:	2501      	movs	r5, #1
 8008d20:	4628      	mov	r0, r5
 8008d22:	b00d      	add	sp, #52	; 0x34
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	a39b      	add	r3, pc, #620	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x2f0>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fa4f 	bl	80001d0 <__aeabi_dsub>
 8008d32:	a39b      	add	r3, pc, #620	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2f8>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	f7f7 fa48 	bl	80001d0 <__aeabi_dsub>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	e9c4 2300 	strd	r2, r3, [r4]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fa40 	bl	80001d0 <__aeabi_dsub>
 8008d50:	a393      	add	r3, pc, #588	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2f8>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	e7de      	b.n	8008d16 <__ieee754_rem_pio2+0x6e>
 8008d58:	f7f7 fa3c 	bl	80001d4 <__adddf3>
 8008d5c:	45a8      	cmp	r8, r5
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	d016      	beq.n	8008d92 <__ieee754_rem_pio2+0xea>
 8008d64:	a38a      	add	r3, pc, #552	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x2e8>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 fa33 	bl	80001d4 <__adddf3>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	e9c4 2300 	strd	r2, r3, [r4]
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fa29 	bl	80001d0 <__aeabi_dsub>
 8008d7e:	a384      	add	r3, pc, #528	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x2e8>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fa26 	bl	80001d4 <__adddf3>
 8008d88:	f04f 35ff 	mov.w	r5, #4294967295
 8008d8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d90:	e7c6      	b.n	8008d20 <__ieee754_rem_pio2+0x78>
 8008d92:	a381      	add	r3, pc, #516	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x2f0>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fa1c 	bl	80001d4 <__adddf3>
 8008d9c:	a380      	add	r3, pc, #512	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2f8>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	f7f7 fa15 	bl	80001d4 <__adddf3>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9c4 2300 	strd	r2, r3, [r4]
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fa0b 	bl	80001d0 <__aeabi_dsub>
 8008dba:	a379      	add	r3, pc, #484	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2f8>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	e7e0      	b.n	8008d84 <__ieee754_rem_pio2+0xdc>
 8008dc2:	4b82      	ldr	r3, [pc, #520]	; (8008fcc <__ieee754_rem_pio2+0x324>)
 8008dc4:	4598      	cmp	r8, r3
 8008dc6:	f300 80d0 	bgt.w	8008f6a <__ieee754_rem_pio2+0x2c2>
 8008dca:	f001 f8ad 	bl	8009f28 <fabs>
 8008dce:	ec57 6b10 	vmov	r6, r7, d0
 8008dd2:	ee10 0a10 	vmov	r0, s0
 8008dd6:	a374      	add	r3, pc, #464	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x300>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fbab 	bl	8000538 <__aeabi_dmul>
 8008de2:	2200      	movs	r2, #0
 8008de4:	4b7a      	ldr	r3, [pc, #488]	; (8008fd0 <__ieee754_rem_pio2+0x328>)
 8008de6:	f7f7 f9f5 	bl	80001d4 <__adddf3>
 8008dea:	f7f7 fe55 	bl	8000a98 <__aeabi_d2iz>
 8008dee:	4605      	mov	r5, r0
 8008df0:	f7f7 fb3c 	bl	800046c <__aeabi_i2d>
 8008df4:	a364      	add	r3, pc, #400	; (adr r3, 8008f88 <__ieee754_rem_pio2+0x2e0>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dfe:	f7f7 fb9b 	bl	8000538 <__aeabi_dmul>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 f9e1 	bl	80001d0 <__aeabi_dsub>
 8008e0e:	a360      	add	r3, pc, #384	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x2e8>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	4682      	mov	sl, r0
 8008e16:	468b      	mov	fp, r1
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	f7f7 fb8c 	bl	8000538 <__aeabi_dmul>
 8008e20:	2d1f      	cmp	r5, #31
 8008e22:	4606      	mov	r6, r0
 8008e24:	460f      	mov	r7, r1
 8008e26:	dc2a      	bgt.n	8008e7e <__ieee754_rem_pio2+0x1d6>
 8008e28:	1e6a      	subs	r2, r5, #1
 8008e2a:	4b6a      	ldr	r3, [pc, #424]	; (8008fd4 <__ieee754_rem_pio2+0x32c>)
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	4598      	cmp	r8, r3
 8008e32:	d024      	beq.n	8008e7e <__ieee754_rem_pio2+0x1d6>
 8008e34:	4632      	mov	r2, r6
 8008e36:	463b      	mov	r3, r7
 8008e38:	4650      	mov	r0, sl
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	f7f7 f9c8 	bl	80001d0 <__aeabi_dsub>
 8008e40:	e9c4 0100 	strd	r0, r1, [r4]
 8008e44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	4659      	mov	r1, fp
 8008e50:	f7f7 f9be 	bl	80001d0 <__aeabi_dsub>
 8008e54:	463b      	mov	r3, r7
 8008e56:	4632      	mov	r2, r6
 8008e58:	f7f7 f9ba 	bl	80001d0 <__aeabi_dsub>
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e64:	f6bf af5c 	bge.w	8008d20 <__ieee754_rem_pio2+0x78>
 8008e68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	f8c4 8000 	str.w	r8, [r4]
 8008e72:	60a0      	str	r0, [r4, #8]
 8008e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e78:	60e3      	str	r3, [r4, #12]
 8008e7a:	426d      	negs	r5, r5
 8008e7c:	e750      	b.n	8008d20 <__ieee754_rem_pio2+0x78>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	4650      	mov	r0, sl
 8008e84:	4659      	mov	r1, fp
 8008e86:	f7f7 f9a3 	bl	80001d0 <__aeabi_dsub>
 8008e8a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8008e8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	e9c4 0100 	strd	r0, r1, [r4]
 8008e9a:	9205      	str	r2, [sp, #20]
 8008e9c:	ddd2      	ble.n	8008e44 <__ieee754_rem_pio2+0x19c>
 8008e9e:	a33e      	add	r3, pc, #248	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x2f0>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea8:	f7f7 fb46 	bl	8000538 <__aeabi_dmul>
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	f7f7 f98a 	bl	80001d0 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	4650      	mov	r0, sl
 8008ec6:	4659      	mov	r1, fp
 8008ec8:	f7f7 f982 	bl	80001d0 <__aeabi_dsub>
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	f7f7 f97e 	bl	80001d0 <__aeabi_dsub>
 8008ed4:	a332      	add	r3, pc, #200	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2f8>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee2:	f7f7 fb29 	bl	8000538 <__aeabi_dmul>
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	463b      	mov	r3, r7
 8008eea:	f7f7 f971 	bl	80001d0 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 f969 	bl	80001d0 <__aeabi_dsub>
 8008efe:	9a05      	ldr	r2, [sp, #20]
 8008f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b31      	cmp	r3, #49	; 0x31
 8008f08:	e9c4 0100 	strd	r0, r1, [r4]
 8008f0c:	dd2a      	ble.n	8008f64 <__ieee754_rem_pio2+0x2bc>
 8008f0e:	a328      	add	r3, pc, #160	; (adr r3, 8008fb0 <__ieee754_rem_pio2+0x308>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f18:	f7f7 fb0e 	bl	8000538 <__aeabi_dmul>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4640      	mov	r0, r8
 8008f26:	4649      	mov	r1, r9
 8008f28:	f7f7 f952 	bl	80001d0 <__aeabi_dsub>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 f94a 	bl	80001d0 <__aeabi_dsub>
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	463b      	mov	r3, r7
 8008f40:	f7f7 f946 	bl	80001d0 <__aeabi_dsub>
 8008f44:	a31c      	add	r3, pc, #112	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x310>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	f7f7 faf1 	bl	8000538 <__aeabi_dmul>
 8008f56:	4632      	mov	r2, r6
 8008f58:	463b      	mov	r3, r7
 8008f5a:	f7f7 f939 	bl	80001d0 <__aeabi_dsub>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	460f      	mov	r7, r1
 8008f62:	e767      	b.n	8008e34 <__ieee754_rem_pio2+0x18c>
 8008f64:	46c2      	mov	sl, r8
 8008f66:	46cb      	mov	fp, r9
 8008f68:	e76c      	b.n	8008e44 <__ieee754_rem_pio2+0x19c>
 8008f6a:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <__ieee754_rem_pio2+0x330>)
 8008f6c:	4598      	cmp	r8, r3
 8008f6e:	dd35      	ble.n	8008fdc <__ieee754_rem_pio2+0x334>
 8008f70:	ee10 2a10 	vmov	r2, s0
 8008f74:	463b      	mov	r3, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 f929 	bl	80001d0 <__aeabi_dsub>
 8008f7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f82:	e9c4 0100 	strd	r0, r1, [r4]
 8008f86:	e6a1      	b.n	8008ccc <__ieee754_rem_pio2+0x24>
 8008f88:	54400000 	.word	0x54400000
 8008f8c:	3ff921fb 	.word	0x3ff921fb
 8008f90:	1a626331 	.word	0x1a626331
 8008f94:	3dd0b461 	.word	0x3dd0b461
 8008f98:	1a600000 	.word	0x1a600000
 8008f9c:	3dd0b461 	.word	0x3dd0b461
 8008fa0:	2e037073 	.word	0x2e037073
 8008fa4:	3ba3198a 	.word	0x3ba3198a
 8008fa8:	6dc9c883 	.word	0x6dc9c883
 8008fac:	3fe45f30 	.word	0x3fe45f30
 8008fb0:	2e000000 	.word	0x2e000000
 8008fb4:	3ba3198a 	.word	0x3ba3198a
 8008fb8:	252049c1 	.word	0x252049c1
 8008fbc:	397b839a 	.word	0x397b839a
 8008fc0:	3fe921fb 	.word	0x3fe921fb
 8008fc4:	4002d97b 	.word	0x4002d97b
 8008fc8:	3ff921fb 	.word	0x3ff921fb
 8008fcc:	413921fb 	.word	0x413921fb
 8008fd0:	3fe00000 	.word	0x3fe00000
 8008fd4:	0800a330 	.word	0x0800a330
 8008fd8:	7fefffff 	.word	0x7fefffff
 8008fdc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008fe0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008fe4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008fe8:	4630      	mov	r0, r6
 8008fea:	460f      	mov	r7, r1
 8008fec:	f7f7 fd54 	bl	8000a98 <__aeabi_d2iz>
 8008ff0:	f7f7 fa3c 	bl	800046c <__aeabi_i2d>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009000:	f7f7 f8e6 	bl	80001d0 <__aeabi_dsub>
 8009004:	2200      	movs	r2, #0
 8009006:	4b1f      	ldr	r3, [pc, #124]	; (8009084 <__ieee754_rem_pio2+0x3dc>)
 8009008:	f7f7 fa96 	bl	8000538 <__aeabi_dmul>
 800900c:	460f      	mov	r7, r1
 800900e:	4606      	mov	r6, r0
 8009010:	f7f7 fd42 	bl	8000a98 <__aeabi_d2iz>
 8009014:	f7f7 fa2a 	bl	800046c <__aeabi_i2d>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009024:	f7f7 f8d4 	bl	80001d0 <__aeabi_dsub>
 8009028:	2200      	movs	r2, #0
 800902a:	4b16      	ldr	r3, [pc, #88]	; (8009084 <__ieee754_rem_pio2+0x3dc>)
 800902c:	f7f7 fa84 	bl	8000538 <__aeabi_dmul>
 8009030:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009034:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009038:	f04f 0803 	mov.w	r8, #3
 800903c:	2600      	movs	r6, #0
 800903e:	2700      	movs	r7, #0
 8009040:	4632      	mov	r2, r6
 8009042:	463b      	mov	r3, r7
 8009044:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009048:	f108 3aff 	add.w	sl, r8, #4294967295
 800904c:	f7f7 fcdc 	bl	8000a08 <__aeabi_dcmpeq>
 8009050:	b9b0      	cbnz	r0, 8009080 <__ieee754_rem_pio2+0x3d8>
 8009052:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <__ieee754_rem_pio2+0x3e0>)
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	2302      	movs	r3, #2
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	462a      	mov	r2, r5
 800905c:	4643      	mov	r3, r8
 800905e:	4621      	mov	r1, r4
 8009060:	a806      	add	r0, sp, #24
 8009062:	f000 f9ad 	bl	80093c0 <__kernel_rem_pio2>
 8009066:	9b04      	ldr	r3, [sp, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	4605      	mov	r5, r0
 800906c:	f6bf ae58 	bge.w	8008d20 <__ieee754_rem_pio2+0x78>
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009076:	6063      	str	r3, [r4, #4]
 8009078:	68e3      	ldr	r3, [r4, #12]
 800907a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800907e:	e6fb      	b.n	8008e78 <__ieee754_rem_pio2+0x1d0>
 8009080:	46d0      	mov	r8, sl
 8009082:	e7dd      	b.n	8009040 <__ieee754_rem_pio2+0x398>
 8009084:	41700000 	.word	0x41700000
 8009088:	0800a3b0 	.word	0x0800a3b0

0800908c <__ieee754_sqrt>:
 800908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009090:	ec55 4b10 	vmov	r4, r5, d0
 8009094:	4e54      	ldr	r6, [pc, #336]	; (80091e8 <__ieee754_sqrt+0x15c>)
 8009096:	43ae      	bics	r6, r5
 8009098:	ee10 0a10 	vmov	r0, s0
 800909c:	462b      	mov	r3, r5
 800909e:	462a      	mov	r2, r5
 80090a0:	4621      	mov	r1, r4
 80090a2:	d113      	bne.n	80090cc <__ieee754_sqrt+0x40>
 80090a4:	ee10 2a10 	vmov	r2, s0
 80090a8:	462b      	mov	r3, r5
 80090aa:	ee10 0a10 	vmov	r0, s0
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 fa42 	bl	8000538 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4620      	mov	r0, r4
 80090ba:	4629      	mov	r1, r5
 80090bc:	f7f7 f88a 	bl	80001d4 <__adddf3>
 80090c0:	4604      	mov	r4, r0
 80090c2:	460d      	mov	r5, r1
 80090c4:	ec45 4b10 	vmov	d0, r4, r5
 80090c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	dc10      	bgt.n	80090f2 <__ieee754_sqrt+0x66>
 80090d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090d4:	4330      	orrs	r0, r6
 80090d6:	d0f5      	beq.n	80090c4 <__ieee754_sqrt+0x38>
 80090d8:	b15d      	cbz	r5, 80090f2 <__ieee754_sqrt+0x66>
 80090da:	ee10 2a10 	vmov	r2, s0
 80090de:	462b      	mov	r3, r5
 80090e0:	4620      	mov	r0, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 f874 	bl	80001d0 <__aeabi_dsub>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	f7f7 fb4e 	bl	800078c <__aeabi_ddiv>
 80090f0:	e7e6      	b.n	80090c0 <__ieee754_sqrt+0x34>
 80090f2:	151b      	asrs	r3, r3, #20
 80090f4:	d10c      	bne.n	8009110 <__ieee754_sqrt+0x84>
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d06d      	beq.n	80091d6 <__ieee754_sqrt+0x14a>
 80090fa:	2000      	movs	r0, #0
 80090fc:	02d6      	lsls	r6, r2, #11
 80090fe:	d56e      	bpl.n	80091de <__ieee754_sqrt+0x152>
 8009100:	1e44      	subs	r4, r0, #1
 8009102:	1b1b      	subs	r3, r3, r4
 8009104:	f1c0 0420 	rsb	r4, r0, #32
 8009108:	fa21 f404 	lsr.w	r4, r1, r4
 800910c:	4322      	orrs	r2, r4
 800910e:	4081      	lsls	r1, r0
 8009110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009114:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009118:	07dd      	lsls	r5, r3, #31
 800911a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800911e:	bf42      	ittt	mi
 8009120:	0052      	lslmi	r2, r2, #1
 8009122:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8009126:	0049      	lslmi	r1, r1, #1
 8009128:	1058      	asrs	r0, r3, #1
 800912a:	2500      	movs	r5, #0
 800912c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8009130:	441a      	add	r2, r3
 8009132:	0049      	lsls	r1, r1, #1
 8009134:	2316      	movs	r3, #22
 8009136:	462c      	mov	r4, r5
 8009138:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800913c:	19a7      	adds	r7, r4, r6
 800913e:	4297      	cmp	r7, r2
 8009140:	bfde      	ittt	le
 8009142:	1bd2      	suble	r2, r2, r7
 8009144:	19bc      	addle	r4, r7, r6
 8009146:	19ad      	addle	r5, r5, r6
 8009148:	0052      	lsls	r2, r2, #1
 800914a:	3b01      	subs	r3, #1
 800914c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009150:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009154:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009158:	d1f0      	bne.n	800913c <__ieee754_sqrt+0xb0>
 800915a:	f04f 0e20 	mov.w	lr, #32
 800915e:	469c      	mov	ip, r3
 8009160:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009164:	42a2      	cmp	r2, r4
 8009166:	eb06 070c 	add.w	r7, r6, ip
 800916a:	dc02      	bgt.n	8009172 <__ieee754_sqrt+0xe6>
 800916c:	d112      	bne.n	8009194 <__ieee754_sqrt+0x108>
 800916e:	428f      	cmp	r7, r1
 8009170:	d810      	bhi.n	8009194 <__ieee754_sqrt+0x108>
 8009172:	2f00      	cmp	r7, #0
 8009174:	eb07 0c06 	add.w	ip, r7, r6
 8009178:	da34      	bge.n	80091e4 <__ieee754_sqrt+0x158>
 800917a:	f1bc 0f00 	cmp.w	ip, #0
 800917e:	db31      	blt.n	80091e4 <__ieee754_sqrt+0x158>
 8009180:	f104 0801 	add.w	r8, r4, #1
 8009184:	1b12      	subs	r2, r2, r4
 8009186:	428f      	cmp	r7, r1
 8009188:	bf88      	it	hi
 800918a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800918e:	1bc9      	subs	r1, r1, r7
 8009190:	4433      	add	r3, r6
 8009192:	4644      	mov	r4, r8
 8009194:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8009198:	f1be 0e01 	subs.w	lr, lr, #1
 800919c:	443a      	add	r2, r7
 800919e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80091a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091a6:	d1dd      	bne.n	8009164 <__ieee754_sqrt+0xd8>
 80091a8:	430a      	orrs	r2, r1
 80091aa:	d006      	beq.n	80091ba <__ieee754_sqrt+0x12e>
 80091ac:	1c5c      	adds	r4, r3, #1
 80091ae:	bf13      	iteet	ne
 80091b0:	3301      	addne	r3, #1
 80091b2:	3501      	addeq	r5, #1
 80091b4:	4673      	moveq	r3, lr
 80091b6:	f023 0301 	bicne.w	r3, r3, #1
 80091ba:	106a      	asrs	r2, r5, #1
 80091bc:	085b      	lsrs	r3, r3, #1
 80091be:	07e9      	lsls	r1, r5, #31
 80091c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091c8:	bf48      	it	mi
 80091ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091ce:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80091d2:	461c      	mov	r4, r3
 80091d4:	e776      	b.n	80090c4 <__ieee754_sqrt+0x38>
 80091d6:	0aca      	lsrs	r2, r1, #11
 80091d8:	3b15      	subs	r3, #21
 80091da:	0549      	lsls	r1, r1, #21
 80091dc:	e78b      	b.n	80090f6 <__ieee754_sqrt+0x6a>
 80091de:	0052      	lsls	r2, r2, #1
 80091e0:	3001      	adds	r0, #1
 80091e2:	e78b      	b.n	80090fc <__ieee754_sqrt+0x70>
 80091e4:	46a0      	mov	r8, r4
 80091e6:	e7cd      	b.n	8009184 <__ieee754_sqrt+0xf8>
 80091e8:	7ff00000 	.word	0x7ff00000
 80091ec:	00000000 	.word	0x00000000

080091f0 <__kernel_cos>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ec59 8b10 	vmov	r8, r9, d0
 80091f8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80091fc:	b085      	sub	sp, #20
 80091fe:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009202:	ed8d 1b00 	vstr	d1, [sp]
 8009206:	da07      	bge.n	8009218 <__kernel_cos+0x28>
 8009208:	ee10 0a10 	vmov	r0, s0
 800920c:	4649      	mov	r1, r9
 800920e:	f7f7 fc43 	bl	8000a98 <__aeabi_d2iz>
 8009212:	2800      	cmp	r0, #0
 8009214:	f000 80aa 	beq.w	800936c <__kernel_cos+0x17c>
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 f98a 	bl	8000538 <__aeabi_dmul>
 8009224:	a359      	add	r3, pc, #356	; (adr r3, 800938c <__kernel_cos+0x19c>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4604      	mov	r4, r0
 800922c:	460d      	mov	r5, r1
 800922e:	f7f7 f983 	bl	8000538 <__aeabi_dmul>
 8009232:	a358      	add	r3, pc, #352	; (adr r3, 8009394 <__kernel_cos+0x1a4>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f6 ffcc 	bl	80001d4 <__adddf3>
 800923c:	4622      	mov	r2, r4
 800923e:	462b      	mov	r3, r5
 8009240:	f7f7 f97a 	bl	8000538 <__aeabi_dmul>
 8009244:	a355      	add	r3, pc, #340	; (adr r3, 800939c <__kernel_cos+0x1ac>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f6 ffc1 	bl	80001d0 <__aeabi_dsub>
 800924e:	4622      	mov	r2, r4
 8009250:	462b      	mov	r3, r5
 8009252:	f7f7 f971 	bl	8000538 <__aeabi_dmul>
 8009256:	a353      	add	r3, pc, #332	; (adr r3, 80093a4 <__kernel_cos+0x1b4>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f6 ffba 	bl	80001d4 <__adddf3>
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	f7f7 f968 	bl	8000538 <__aeabi_dmul>
 8009268:	a350      	add	r3, pc, #320	; (adr r3, 80093ac <__kernel_cos+0x1bc>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f6 ffaf 	bl	80001d0 <__aeabi_dsub>
 8009272:	4622      	mov	r2, r4
 8009274:	462b      	mov	r3, r5
 8009276:	f7f7 f95f 	bl	8000538 <__aeabi_dmul>
 800927a:	a34e      	add	r3, pc, #312	; (adr r3, 80093b4 <__kernel_cos+0x1c4>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f6 ffa8 	bl	80001d4 <__adddf3>
 8009284:	462b      	mov	r3, r5
 8009286:	4622      	mov	r2, r4
 8009288:	f7f7 f956 	bl	8000538 <__aeabi_dmul>
 800928c:	4b3a      	ldr	r3, [pc, #232]	; (8009378 <__kernel_cos+0x188>)
 800928e:	429f      	cmp	r7, r3
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	dc2c      	bgt.n	80092f0 <__kernel_cos+0x100>
 8009296:	2200      	movs	r2, #0
 8009298:	4b38      	ldr	r3, [pc, #224]	; (800937c <__kernel_cos+0x18c>)
 800929a:	4620      	mov	r0, r4
 800929c:	4629      	mov	r1, r5
 800929e:	f7f7 f94b 	bl	8000538 <__aeabi_dmul>
 80092a2:	4652      	mov	r2, sl
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	465b      	mov	r3, fp
 80092aa:	4620      	mov	r0, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7f7 f943 	bl	8000538 <__aeabi_dmul>
 80092b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	4640      	mov	r0, r8
 80092bc:	4649      	mov	r1, r9
 80092be:	f7f7 f93b 	bl	8000538 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f6 ff81 	bl	80001d0 <__aeabi_dsub>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f6 ff7b 	bl	80001d0 <__aeabi_dsub>
 80092da:	460b      	mov	r3, r1
 80092dc:	4928      	ldr	r1, [pc, #160]	; (8009380 <__kernel_cos+0x190>)
 80092de:	4602      	mov	r2, r0
 80092e0:	2000      	movs	r0, #0
 80092e2:	f7f6 ff75 	bl	80001d0 <__aeabi_dsub>
 80092e6:	ec41 0b10 	vmov	d0, r0, r1
 80092ea:	b005      	add	sp, #20
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	4b24      	ldr	r3, [pc, #144]	; (8009384 <__kernel_cos+0x194>)
 80092f2:	4923      	ldr	r1, [pc, #140]	; (8009380 <__kernel_cos+0x190>)
 80092f4:	429f      	cmp	r7, r3
 80092f6:	bfd7      	itett	le
 80092f8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80092fc:	4f22      	ldrgt	r7, [pc, #136]	; (8009388 <__kernel_cos+0x198>)
 80092fe:	2200      	movle	r2, #0
 8009300:	4616      	movle	r6, r2
 8009302:	bfd4      	ite	le
 8009304:	461f      	movle	r7, r3
 8009306:	2600      	movgt	r6, #0
 8009308:	4632      	mov	r2, r6
 800930a:	463b      	mov	r3, r7
 800930c:	2000      	movs	r0, #0
 800930e:	f7f6 ff5f 	bl	80001d0 <__aeabi_dsub>
 8009312:	2200      	movs	r2, #0
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	4b18      	ldr	r3, [pc, #96]	; (800937c <__kernel_cos+0x18c>)
 800931a:	4620      	mov	r0, r4
 800931c:	4629      	mov	r1, r5
 800931e:	f7f7 f90b 	bl	8000538 <__aeabi_dmul>
 8009322:	4632      	mov	r2, r6
 8009324:	463b      	mov	r3, r7
 8009326:	f7f6 ff53 	bl	80001d0 <__aeabi_dsub>
 800932a:	4652      	mov	r2, sl
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	465b      	mov	r3, fp
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 f8ff 	bl	8000538 <__aeabi_dmul>
 800933a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933e:	4604      	mov	r4, r0
 8009340:	460d      	mov	r5, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 f8f7 	bl	8000538 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f6 ff3d 	bl	80001d0 <__aeabi_dsub>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ff37 	bl	80001d0 <__aeabi_dsub>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	e7ba      	b.n	80092e2 <__kernel_cos+0xf2>
 800936c:	2000      	movs	r0, #0
 800936e:	4904      	ldr	r1, [pc, #16]	; (8009380 <__kernel_cos+0x190>)
 8009370:	e7b9      	b.n	80092e6 <__kernel_cos+0xf6>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	3fd33332 	.word	0x3fd33332
 800937c:	3fe00000 	.word	0x3fe00000
 8009380:	3ff00000 	.word	0x3ff00000
 8009384:	3fe90000 	.word	0x3fe90000
 8009388:	3fd20000 	.word	0x3fd20000
 800938c:	be8838d4 	.word	0xbe8838d4
 8009390:	bda8fae9 	.word	0xbda8fae9
 8009394:	bdb4b1c4 	.word	0xbdb4b1c4
 8009398:	3e21ee9e 	.word	0x3e21ee9e
 800939c:	809c52ad 	.word	0x809c52ad
 80093a0:	3e927e4f 	.word	0x3e927e4f
 80093a4:	19cb1590 	.word	0x19cb1590
 80093a8:	3efa01a0 	.word	0x3efa01a0
 80093ac:	16c15177 	.word	0x16c15177
 80093b0:	3f56c16c 	.word	0x3f56c16c
 80093b4:	5555554c 	.word	0x5555554c
 80093b8:	3fa55555 	.word	0x3fa55555
 80093bc:	00000000 	.word	0x00000000

080093c0 <__kernel_rem_pio2>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	ed2d 8b02 	vpush	{d8}
 80093c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80093cc:	1ed4      	subs	r4, r2, #3
 80093ce:	9306      	str	r3, [sp, #24]
 80093d0:	9102      	str	r1, [sp, #8]
 80093d2:	4bc3      	ldr	r3, [pc, #780]	; (80096e0 <__kernel_rem_pio2+0x320>)
 80093d4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80093d6:	9009      	str	r0, [sp, #36]	; 0x24
 80093d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	2318      	movs	r3, #24
 80093e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80093ea:	f06f 0317 	mvn.w	r3, #23
 80093ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80093f2:	fb04 3303 	mla	r3, r4, r3, r3
 80093f6:	eb03 0a02 	add.w	sl, r3, r2
 80093fa:	9b00      	ldr	r3, [sp, #0]
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80096d0 <__kernel_rem_pio2+0x310>
 8009402:	eb03 0802 	add.w	r8, r3, r2
 8009406:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009408:	1aa7      	subs	r7, r4, r2
 800940a:	ae20      	add	r6, sp, #128	; 0x80
 800940c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009410:	2500      	movs	r5, #0
 8009412:	4545      	cmp	r5, r8
 8009414:	dd13      	ble.n	800943e <__kernel_rem_pio2+0x7e>
 8009416:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80096d0 <__kernel_rem_pio2+0x310>
 800941a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800941e:	2600      	movs	r6, #0
 8009420:	9b00      	ldr	r3, [sp, #0]
 8009422:	429e      	cmp	r6, r3
 8009424:	dc32      	bgt.n	800948c <__kernel_rem_pio2+0xcc>
 8009426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	199d      	adds	r5, r3, r6
 800942e:	ab20      	add	r3, sp, #128	; 0x80
 8009430:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009434:	9308      	str	r3, [sp, #32]
 8009436:	ec59 8b18 	vmov	r8, r9, d8
 800943a:	2700      	movs	r7, #0
 800943c:	e01f      	b.n	800947e <__kernel_rem_pio2+0xbe>
 800943e:	42ef      	cmn	r7, r5
 8009440:	d407      	bmi.n	8009452 <__kernel_rem_pio2+0x92>
 8009442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009446:	f7f7 f811 	bl	800046c <__aeabi_i2d>
 800944a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800944e:	3501      	adds	r5, #1
 8009450:	e7df      	b.n	8009412 <__kernel_rem_pio2+0x52>
 8009452:	ec51 0b18 	vmov	r0, r1, d8
 8009456:	e7f8      	b.n	800944a <__kernel_rem_pio2+0x8a>
 8009458:	9908      	ldr	r1, [sp, #32]
 800945a:	9d03      	ldr	r5, [sp, #12]
 800945c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009460:	9108      	str	r1, [sp, #32]
 8009462:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009466:	9503      	str	r5, [sp, #12]
 8009468:	f7f7 f866 	bl	8000538 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f6 feae 	bl	80001d4 <__adddf3>
 8009478:	3701      	adds	r7, #1
 800947a:	4680      	mov	r8, r0
 800947c:	4689      	mov	r9, r1
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	429f      	cmp	r7, r3
 8009482:	dde9      	ble.n	8009458 <__kernel_rem_pio2+0x98>
 8009484:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009488:	3601      	adds	r6, #1
 800948a:	e7c9      	b.n	8009420 <__kernel_rem_pio2+0x60>
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	9f00      	ldr	r7, [sp, #0]
 8009490:	aa0c      	add	r2, sp, #48	; 0x30
 8009492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009496:	930b      	str	r3, [sp, #44]	; 0x2c
 8009498:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800949a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800949e:	930a      	str	r3, [sp, #40]	; 0x28
 80094a0:	ab98      	add	r3, sp, #608	; 0x260
 80094a2:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80094a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80094b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094b6:	9308      	str	r3, [sp, #32]
 80094b8:	9a08      	ldr	r2, [sp, #32]
 80094ba:	ab98      	add	r3, sp, #608	; 0x260
 80094bc:	4413      	add	r3, r2
 80094be:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80094c2:	2600      	movs	r6, #0
 80094c4:	1bbb      	subs	r3, r7, r6
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dc77      	bgt.n	80095ba <__kernel_rem_pio2+0x1fa>
 80094ca:	ec49 8b10 	vmov	d0, r8, r9
 80094ce:	4650      	mov	r0, sl
 80094d0:	f000 fe52 	bl	800a178 <scalbn>
 80094d4:	ec55 4b10 	vmov	r4, r5, d0
 80094d8:	2200      	movs	r2, #0
 80094da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80094de:	ee10 0a10 	vmov	r0, s0
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f7 f828 	bl	8000538 <__aeabi_dmul>
 80094e8:	ec41 0b10 	vmov	d0, r0, r1
 80094ec:	f000 fd2c 	bl	8009f48 <floor>
 80094f0:	2200      	movs	r2, #0
 80094f2:	ec51 0b10 	vmov	r0, r1, d0
 80094f6:	4b7b      	ldr	r3, [pc, #492]	; (80096e4 <__kernel_rem_pio2+0x324>)
 80094f8:	f7f7 f81e 	bl	8000538 <__aeabi_dmul>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4620      	mov	r0, r4
 8009502:	4629      	mov	r1, r5
 8009504:	f7f6 fe64 	bl	80001d0 <__aeabi_dsub>
 8009508:	460d      	mov	r5, r1
 800950a:	4604      	mov	r4, r0
 800950c:	f7f7 fac4 	bl	8000a98 <__aeabi_d2iz>
 8009510:	9003      	str	r0, [sp, #12]
 8009512:	f7f6 ffab 	bl	800046c <__aeabi_i2d>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4620      	mov	r0, r4
 800951c:	4629      	mov	r1, r5
 800951e:	f7f6 fe57 	bl	80001d0 <__aeabi_dsub>
 8009522:	f1ba 0f00 	cmp.w	sl, #0
 8009526:	4680      	mov	r8, r0
 8009528:	4689      	mov	r9, r1
 800952a:	dd6b      	ble.n	8009604 <__kernel_rem_pio2+0x244>
 800952c:	1e7a      	subs	r2, r7, #1
 800952e:	ab0c      	add	r3, sp, #48	; 0x30
 8009530:	f1ca 0118 	rsb	r1, sl, #24
 8009534:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009538:	9c03      	ldr	r4, [sp, #12]
 800953a:	fa40 f301 	asr.w	r3, r0, r1
 800953e:	441c      	add	r4, r3
 8009540:	408b      	lsls	r3, r1
 8009542:	1ac0      	subs	r0, r0, r3
 8009544:	ab0c      	add	r3, sp, #48	; 0x30
 8009546:	9403      	str	r4, [sp, #12]
 8009548:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800954c:	f1ca 0317 	rsb	r3, sl, #23
 8009550:	fa40 fb03 	asr.w	fp, r0, r3
 8009554:	f1bb 0f00 	cmp.w	fp, #0
 8009558:	dd62      	ble.n	8009620 <__kernel_rem_pio2+0x260>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	3301      	adds	r3, #1
 8009560:	9303      	str	r3, [sp, #12]
 8009562:	4614      	mov	r4, r2
 8009564:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009568:	4297      	cmp	r7, r2
 800956a:	f300 8089 	bgt.w	8009680 <__kernel_rem_pio2+0x2c0>
 800956e:	f1ba 0f00 	cmp.w	sl, #0
 8009572:	dd07      	ble.n	8009584 <__kernel_rem_pio2+0x1c4>
 8009574:	f1ba 0f01 	cmp.w	sl, #1
 8009578:	f000 8096 	beq.w	80096a8 <__kernel_rem_pio2+0x2e8>
 800957c:	f1ba 0f02 	cmp.w	sl, #2
 8009580:	f000 809c 	beq.w	80096bc <__kernel_rem_pio2+0x2fc>
 8009584:	f1bb 0f02 	cmp.w	fp, #2
 8009588:	d14a      	bne.n	8009620 <__kernel_rem_pio2+0x260>
 800958a:	4642      	mov	r2, r8
 800958c:	464b      	mov	r3, r9
 800958e:	2000      	movs	r0, #0
 8009590:	4955      	ldr	r1, [pc, #340]	; (80096e8 <__kernel_rem_pio2+0x328>)
 8009592:	f7f6 fe1d 	bl	80001d0 <__aeabi_dsub>
 8009596:	4680      	mov	r8, r0
 8009598:	4689      	mov	r9, r1
 800959a:	2c00      	cmp	r4, #0
 800959c:	d040      	beq.n	8009620 <__kernel_rem_pio2+0x260>
 800959e:	4650      	mov	r0, sl
 80095a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80096d8 <__kernel_rem_pio2+0x318>
 80095a4:	f000 fde8 	bl	800a178 <scalbn>
 80095a8:	4640      	mov	r0, r8
 80095aa:	4649      	mov	r1, r9
 80095ac:	ec53 2b10 	vmov	r2, r3, d0
 80095b0:	f7f6 fe0e 	bl	80001d0 <__aeabi_dsub>
 80095b4:	4680      	mov	r8, r0
 80095b6:	4689      	mov	r9, r1
 80095b8:	e032      	b.n	8009620 <__kernel_rem_pio2+0x260>
 80095ba:	2200      	movs	r2, #0
 80095bc:	4b4b      	ldr	r3, [pc, #300]	; (80096ec <__kernel_rem_pio2+0x32c>)
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f6 ffb9 	bl	8000538 <__aeabi_dmul>
 80095c6:	f7f7 fa67 	bl	8000a98 <__aeabi_d2iz>
 80095ca:	f7f6 ff4f 	bl	800046c <__aeabi_i2d>
 80095ce:	2200      	movs	r2, #0
 80095d0:	4b47      	ldr	r3, [pc, #284]	; (80096f0 <__kernel_rem_pio2+0x330>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	f7f6 ffaf 	bl	8000538 <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4640      	mov	r0, r8
 80095e0:	4649      	mov	r1, r9
 80095e2:	f7f6 fdf5 	bl	80001d0 <__aeabi_dsub>
 80095e6:	f7f7 fa57 	bl	8000a98 <__aeabi_d2iz>
 80095ea:	ab0c      	add	r3, sp, #48	; 0x30
 80095ec:	4629      	mov	r1, r5
 80095ee:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80095f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7f6 fdec 	bl	80001d4 <__adddf3>
 80095fc:	3601      	adds	r6, #1
 80095fe:	4680      	mov	r8, r0
 8009600:	4689      	mov	r9, r1
 8009602:	e75f      	b.n	80094c4 <__kernel_rem_pio2+0x104>
 8009604:	d106      	bne.n	8009614 <__kernel_rem_pio2+0x254>
 8009606:	1e7b      	subs	r3, r7, #1
 8009608:	aa0c      	add	r2, sp, #48	; 0x30
 800960a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800960e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009612:	e79f      	b.n	8009554 <__kernel_rem_pio2+0x194>
 8009614:	2200      	movs	r2, #0
 8009616:	4b37      	ldr	r3, [pc, #220]	; (80096f4 <__kernel_rem_pio2+0x334>)
 8009618:	f7f7 fa14 	bl	8000a44 <__aeabi_dcmpge>
 800961c:	bb68      	cbnz	r0, 800967a <__kernel_rem_pio2+0x2ba>
 800961e:	4683      	mov	fp, r0
 8009620:	2200      	movs	r2, #0
 8009622:	2300      	movs	r3, #0
 8009624:	4640      	mov	r0, r8
 8009626:	4649      	mov	r1, r9
 8009628:	f7f7 f9ee 	bl	8000a08 <__aeabi_dcmpeq>
 800962c:	2800      	cmp	r0, #0
 800962e:	f000 80c1 	beq.w	80097b4 <__kernel_rem_pio2+0x3f4>
 8009632:	1e7c      	subs	r4, r7, #1
 8009634:	4623      	mov	r3, r4
 8009636:	2200      	movs	r2, #0
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	428b      	cmp	r3, r1
 800963c:	da5c      	bge.n	80096f8 <__kernel_rem_pio2+0x338>
 800963e:	2a00      	cmp	r2, #0
 8009640:	f040 808b 	bne.w	800975a <__kernel_rem_pio2+0x39a>
 8009644:	2401      	movs	r4, #1
 8009646:	f06f 0203 	mvn.w	r2, #3
 800964a:	fb02 f304 	mul.w	r3, r2, r4
 800964e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009650:	58cb      	ldr	r3, [r1, r3]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d056      	beq.n	8009704 <__kernel_rem_pio2+0x344>
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	aa98      	add	r2, sp, #608	; 0x260
 800965a:	4413      	add	r3, r2
 800965c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8009660:	9b06      	ldr	r3, [sp, #24]
 8009662:	19dd      	adds	r5, r3, r7
 8009664:	ab20      	add	r3, sp, #128	; 0x80
 8009666:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800966a:	19e3      	adds	r3, r4, r7
 800966c:	1c7e      	adds	r6, r7, #1
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	429e      	cmp	r6, r3
 8009674:	dd48      	ble.n	8009708 <__kernel_rem_pio2+0x348>
 8009676:	461f      	mov	r7, r3
 8009678:	e712      	b.n	80094a0 <__kernel_rem_pio2+0xe0>
 800967a:	f04f 0b02 	mov.w	fp, #2
 800967e:	e76c      	b.n	800955a <__kernel_rem_pio2+0x19a>
 8009680:	ab0c      	add	r3, sp, #48	; 0x30
 8009682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009686:	b94c      	cbnz	r4, 800969c <__kernel_rem_pio2+0x2dc>
 8009688:	b12b      	cbz	r3, 8009696 <__kernel_rem_pio2+0x2d6>
 800968a:	a80c      	add	r0, sp, #48	; 0x30
 800968c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009690:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009694:	2301      	movs	r3, #1
 8009696:	3201      	adds	r2, #1
 8009698:	461c      	mov	r4, r3
 800969a:	e765      	b.n	8009568 <__kernel_rem_pio2+0x1a8>
 800969c:	a80c      	add	r0, sp, #48	; 0x30
 800969e:	1acb      	subs	r3, r1, r3
 80096a0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80096a4:	4623      	mov	r3, r4
 80096a6:	e7f6      	b.n	8009696 <__kernel_rem_pio2+0x2d6>
 80096a8:	1e7a      	subs	r2, r7, #1
 80096aa:	ab0c      	add	r3, sp, #48	; 0x30
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80096b4:	a90c      	add	r1, sp, #48	; 0x30
 80096b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80096ba:	e763      	b.n	8009584 <__kernel_rem_pio2+0x1c4>
 80096bc:	1e7a      	subs	r2, r7, #1
 80096be:	ab0c      	add	r3, sp, #48	; 0x30
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80096c8:	e7f4      	b.n	80096b4 <__kernel_rem_pio2+0x2f4>
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
	...
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	0800a4f8 	.word	0x0800a4f8
 80096e4:	40200000 	.word	0x40200000
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	3e700000 	.word	0x3e700000
 80096f0:	41700000 	.word	0x41700000
 80096f4:	3fe00000 	.word	0x3fe00000
 80096f8:	a90c      	add	r1, sp, #48	; 0x30
 80096fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80096fe:	3b01      	subs	r3, #1
 8009700:	430a      	orrs	r2, r1
 8009702:	e799      	b.n	8009638 <__kernel_rem_pio2+0x278>
 8009704:	3401      	adds	r4, #1
 8009706:	e7a0      	b.n	800964a <__kernel_rem_pio2+0x28a>
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800970e:	f7f6 fead 	bl	800046c <__aeabi_i2d>
 8009712:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	9508      	str	r5, [sp, #32]
 800971a:	461c      	mov	r4, r3
 800971c:	2700      	movs	r7, #0
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	f04f 0900 	mov.w	r9, #0
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	429f      	cmp	r7, r3
 800972a:	dd03      	ble.n	8009734 <__kernel_rem_pio2+0x374>
 800972c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009730:	3601      	adds	r6, #1
 8009732:	e79d      	b.n	8009670 <__kernel_rem_pio2+0x2b0>
 8009734:	9908      	ldr	r1, [sp, #32]
 8009736:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800973a:	9108      	str	r1, [sp, #32]
 800973c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009740:	f7f6 fefa 	bl	8000538 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4640      	mov	r0, r8
 800974a:	4649      	mov	r1, r9
 800974c:	f7f6 fd42 	bl	80001d4 <__adddf3>
 8009750:	3701      	adds	r7, #1
 8009752:	4680      	mov	r8, r0
 8009754:	4689      	mov	r9, r1
 8009756:	e7e6      	b.n	8009726 <__kernel_rem_pio2+0x366>
 8009758:	3c01      	subs	r4, #1
 800975a:	ab0c      	add	r3, sp, #48	; 0x30
 800975c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009760:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f7      	beq.n	8009758 <__kernel_rem_pio2+0x398>
 8009768:	4650      	mov	r0, sl
 800976a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8009a40 <__kernel_rem_pio2+0x680>
 800976e:	f000 fd03 	bl	800a178 <scalbn>
 8009772:	00e5      	lsls	r5, r4, #3
 8009774:	ab98      	add	r3, sp, #608	; 0x260
 8009776:	eb03 0905 	add.w	r9, r3, r5
 800977a:	ec57 6b10 	vmov	r6, r7, d0
 800977e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8009782:	46a0      	mov	r8, r4
 8009784:	f1b8 0f00 	cmp.w	r8, #0
 8009788:	da4d      	bge.n	8009826 <__kernel_rem_pio2+0x466>
 800978a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8009a48 <__kernel_rem_pio2+0x688>
 800978e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8009792:	2300      	movs	r3, #0
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	4657      	mov	r7, sl
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	ebb4 0903 	subs.w	r9, r4, r3
 800979e:	d476      	bmi.n	800988e <__kernel_rem_pio2+0x4ce>
 80097a0:	4bab      	ldr	r3, [pc, #684]	; (8009a50 <__kernel_rem_pio2+0x690>)
 80097a2:	461e      	mov	r6, r3
 80097a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80097a6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80097aa:	ed8d 8b06 	vstr	d8, [sp, #24]
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	e05e      	b.n	8009872 <__kernel_rem_pio2+0x4b2>
 80097b4:	f1ca 0000 	rsb	r0, sl, #0
 80097b8:	ec49 8b10 	vmov	d0, r8, r9
 80097bc:	f000 fcdc 	bl	800a178 <scalbn>
 80097c0:	ec55 4b10 	vmov	r4, r5, d0
 80097c4:	2200      	movs	r2, #0
 80097c6:	4ba3      	ldr	r3, [pc, #652]	; (8009a54 <__kernel_rem_pio2+0x694>)
 80097c8:	ee10 0a10 	vmov	r0, s0
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f7 f939 	bl	8000a44 <__aeabi_dcmpge>
 80097d2:	b1f8      	cbz	r0, 8009814 <__kernel_rem_pio2+0x454>
 80097d4:	2200      	movs	r2, #0
 80097d6:	4ba0      	ldr	r3, [pc, #640]	; (8009a58 <__kernel_rem_pio2+0x698>)
 80097d8:	4620      	mov	r0, r4
 80097da:	4629      	mov	r1, r5
 80097dc:	f7f6 feac 	bl	8000538 <__aeabi_dmul>
 80097e0:	f7f7 f95a 	bl	8000a98 <__aeabi_d2iz>
 80097e4:	4606      	mov	r6, r0
 80097e6:	f7f6 fe41 	bl	800046c <__aeabi_i2d>
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <__kernel_rem_pio2+0x694>)
 80097ee:	f7f6 fea3 	bl	8000538 <__aeabi_dmul>
 80097f2:	460b      	mov	r3, r1
 80097f4:	4602      	mov	r2, r0
 80097f6:	4629      	mov	r1, r5
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7f6 fce9 	bl	80001d0 <__aeabi_dsub>
 80097fe:	f7f7 f94b 	bl	8000a98 <__aeabi_d2iz>
 8009802:	1c7c      	adds	r4, r7, #1
 8009804:	ab0c      	add	r3, sp, #48	; 0x30
 8009806:	f10a 0a18 	add.w	sl, sl, #24
 800980a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800980e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009812:	e7a9      	b.n	8009768 <__kernel_rem_pio2+0x3a8>
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f7 f93e 	bl	8000a98 <__aeabi_d2iz>
 800981c:	ab0c      	add	r3, sp, #48	; 0x30
 800981e:	463c      	mov	r4, r7
 8009820:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009824:	e7a0      	b.n	8009768 <__kernel_rem_pio2+0x3a8>
 8009826:	ab0c      	add	r3, sp, #48	; 0x30
 8009828:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800982c:	f7f6 fe1e 	bl	800046c <__aeabi_i2d>
 8009830:	4632      	mov	r2, r6
 8009832:	463b      	mov	r3, r7
 8009834:	f7f6 fe80 	bl	8000538 <__aeabi_dmul>
 8009838:	2200      	movs	r2, #0
 800983a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800983e:	4b86      	ldr	r3, [pc, #536]	; (8009a58 <__kernel_rem_pio2+0x698>)
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fe78 	bl	8000538 <__aeabi_dmul>
 8009848:	f108 38ff 	add.w	r8, r8, #4294967295
 800984c:	4606      	mov	r6, r0
 800984e:	460f      	mov	r7, r1
 8009850:	e798      	b.n	8009784 <__kernel_rem_pio2+0x3c4>
 8009852:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009856:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800985a:	f7f6 fe6d 	bl	8000538 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009866:	f7f6 fcb5 	bl	80001d4 <__adddf3>
 800986a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800986e:	f108 0801 	add.w	r8, r8, #1
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	4598      	cmp	r8, r3
 8009876:	dc02      	bgt.n	800987e <__kernel_rem_pio2+0x4be>
 8009878:	9b04      	ldr	r3, [sp, #16]
 800987a:	4598      	cmp	r8, r3
 800987c:	dde9      	ble.n	8009852 <__kernel_rem_pio2+0x492>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009884:	3301      	adds	r3, #1
 8009886:	ecaa 7b02 	vstmia	sl!, {d7}
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	e784      	b.n	8009798 <__kernel_rem_pio2+0x3d8>
 800988e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009890:	2b03      	cmp	r3, #3
 8009892:	d85d      	bhi.n	8009950 <__kernel_rem_pio2+0x590>
 8009894:	e8df f003 	tbb	[pc, r3]
 8009898:	0226264b 	.word	0x0226264b
 800989c:	ab98      	add	r3, sp, #608	; 0x260
 800989e:	441d      	add	r5, r3
 80098a0:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80098a4:	462e      	mov	r6, r5
 80098a6:	46a2      	mov	sl, r4
 80098a8:	f1ba 0f00 	cmp.w	sl, #0
 80098ac:	dc6e      	bgt.n	800998c <__kernel_rem_pio2+0x5cc>
 80098ae:	462e      	mov	r6, r5
 80098b0:	46a2      	mov	sl, r4
 80098b2:	f1ba 0f01 	cmp.w	sl, #1
 80098b6:	f300 808a 	bgt.w	80099ce <__kernel_rem_pio2+0x60e>
 80098ba:	2000      	movs	r0, #0
 80098bc:	2100      	movs	r1, #0
 80098be:	2c01      	cmp	r4, #1
 80098c0:	f300 80a6 	bgt.w	8009a10 <__kernel_rem_pio2+0x650>
 80098c4:	f1bb 0f00 	cmp.w	fp, #0
 80098c8:	f040 80a8 	bne.w	8009a1c <__kernel_rem_pio2+0x65c>
 80098cc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80098d0:	9c02      	ldr	r4, [sp, #8]
 80098d2:	e9c4 2300 	strd	r2, r3, [r4]
 80098d6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80098da:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80098de:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80098e2:	e035      	b.n	8009950 <__kernel_rem_pio2+0x590>
 80098e4:	3508      	adds	r5, #8
 80098e6:	ab48      	add	r3, sp, #288	; 0x120
 80098e8:	441d      	add	r5, r3
 80098ea:	4626      	mov	r6, r4
 80098ec:	2000      	movs	r0, #0
 80098ee:	2100      	movs	r1, #0
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	da3c      	bge.n	800996e <__kernel_rem_pio2+0x5ae>
 80098f4:	f1bb 0f00 	cmp.w	fp, #0
 80098f8:	d03f      	beq.n	800997a <__kernel_rem_pio2+0x5ba>
 80098fa:	4602      	mov	r2, r0
 80098fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009900:	9d02      	ldr	r5, [sp, #8]
 8009902:	e9c5 2300 	strd	r2, r3, [r5]
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800990e:	f7f6 fc5f 	bl	80001d0 <__aeabi_dsub>
 8009912:	ae4a      	add	r6, sp, #296	; 0x128
 8009914:	2501      	movs	r5, #1
 8009916:	42ac      	cmp	r4, r5
 8009918:	da32      	bge.n	8009980 <__kernel_rem_pio2+0x5c0>
 800991a:	f1bb 0f00 	cmp.w	fp, #0
 800991e:	d002      	beq.n	8009926 <__kernel_rem_pio2+0x566>
 8009920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009924:	4619      	mov	r1, r3
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800992c:	e010      	b.n	8009950 <__kernel_rem_pio2+0x590>
 800992e:	ab98      	add	r3, sp, #608	; 0x260
 8009930:	441d      	add	r5, r3
 8009932:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8009936:	2000      	movs	r0, #0
 8009938:	2100      	movs	r1, #0
 800993a:	2c00      	cmp	r4, #0
 800993c:	da11      	bge.n	8009962 <__kernel_rem_pio2+0x5a2>
 800993e:	f1bb 0f00 	cmp.w	fp, #0
 8009942:	d002      	beq.n	800994a <__kernel_rem_pio2+0x58a>
 8009944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009948:	4619      	mov	r1, r3
 800994a:	9b02      	ldr	r3, [sp, #8]
 800994c:	e9c3 0100 	strd	r0, r1, [r3]
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	f003 0007 	and.w	r0, r3, #7
 8009956:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800995a:	ecbd 8b02 	vpop	{d8}
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009962:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009966:	f7f6 fc35 	bl	80001d4 <__adddf3>
 800996a:	3c01      	subs	r4, #1
 800996c:	e7e5      	b.n	800993a <__kernel_rem_pio2+0x57a>
 800996e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009972:	f7f6 fc2f 	bl	80001d4 <__adddf3>
 8009976:	3e01      	subs	r6, #1
 8009978:	e7ba      	b.n	80098f0 <__kernel_rem_pio2+0x530>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e7bf      	b.n	8009900 <__kernel_rem_pio2+0x540>
 8009980:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009984:	f7f6 fc26 	bl	80001d4 <__adddf3>
 8009988:	3501      	adds	r5, #1
 800998a:	e7c4      	b.n	8009916 <__kernel_rem_pio2+0x556>
 800998c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8009990:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8009994:	ec53 2b17 	vmov	r2, r3, d7
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	ed8d 7b00 	vstr	d7, [sp]
 80099a0:	f7f6 fc18 	bl	80001d4 <__adddf3>
 80099a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f6 fc0e 	bl	80001d0 <__aeabi_dsub>
 80099b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b8:	f7f6 fc0c 	bl	80001d4 <__adddf3>
 80099bc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099c0:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80099c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099c8:	ed06 7b02 	vstr	d7, [r6, #-8]
 80099cc:	e76c      	b.n	80098a8 <__kernel_rem_pio2+0x4e8>
 80099ce:	ed16 7b02 	vldr	d7, [r6, #-8]
 80099d2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80099d6:	ec53 2b17 	vmov	r2, r3, d7
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	ed8d 7b00 	vstr	d7, [sp]
 80099e2:	f7f6 fbf7 	bl	80001d4 <__adddf3>
 80099e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 fbed 	bl	80001d0 <__aeabi_dsub>
 80099f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fa:	f7f6 fbeb 	bl	80001d4 <__adddf3>
 80099fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a02:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8009a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a0a:	ed06 7b02 	vstr	d7, [r6, #-8]
 8009a0e:	e750      	b.n	80098b2 <__kernel_rem_pio2+0x4f2>
 8009a10:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009a14:	f7f6 fbde 	bl	80001d4 <__adddf3>
 8009a18:	3c01      	subs	r4, #1
 8009a1a:	e750      	b.n	80098be <__kernel_rem_pio2+0x4fe>
 8009a1c:	9a02      	ldr	r2, [sp, #8]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6110      	str	r0, [r2, #16]
 8009a26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a2a:	6053      	str	r3, [r2, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a36:	60d3      	str	r3, [r2, #12]
 8009a38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a3c:	6153      	str	r3, [r2, #20]
 8009a3e:	e787      	b.n	8009950 <__kernel_rem_pio2+0x590>
 8009a40:	00000000 	.word	0x00000000
 8009a44:	3ff00000 	.word	0x3ff00000
	...
 8009a50:	0800a4b8 	.word	0x0800a4b8
 8009a54:	41700000 	.word	0x41700000
 8009a58:	3e700000 	.word	0x3e700000
 8009a5c:	00000000 	.word	0x00000000

08009a60 <__kernel_sin>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ec55 4b10 	vmov	r4, r5, d0
 8009a68:	b085      	sub	sp, #20
 8009a6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009a72:	ed8d 1b00 	vstr	d1, [sp]
 8009a76:	9002      	str	r0, [sp, #8]
 8009a78:	da06      	bge.n	8009a88 <__kernel_sin+0x28>
 8009a7a:	ee10 0a10 	vmov	r0, s0
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f7 f80a 	bl	8000a98 <__aeabi_d2iz>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d051      	beq.n	8009b2c <__kernel_sin+0xcc>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fd52 	bl	8000538 <__aeabi_dmul>
 8009a94:	4682      	mov	sl, r0
 8009a96:	468b      	mov	fp, r1
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fd4a 	bl	8000538 <__aeabi_dmul>
 8009aa4:	a341      	add	r3, pc, #260	; (adr r3, 8009bac <__kernel_sin+0x14c>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	4680      	mov	r8, r0
 8009aac:	4689      	mov	r9, r1
 8009aae:	4650      	mov	r0, sl
 8009ab0:	4659      	mov	r1, fp
 8009ab2:	f7f6 fd41 	bl	8000538 <__aeabi_dmul>
 8009ab6:	a33f      	add	r3, pc, #252	; (adr r3, 8009bb4 <__kernel_sin+0x154>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fb88 	bl	80001d0 <__aeabi_dsub>
 8009ac0:	4652      	mov	r2, sl
 8009ac2:	465b      	mov	r3, fp
 8009ac4:	f7f6 fd38 	bl	8000538 <__aeabi_dmul>
 8009ac8:	a33c      	add	r3, pc, #240	; (adr r3, 8009bbc <__kernel_sin+0x15c>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 fb81 	bl	80001d4 <__adddf3>
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	465b      	mov	r3, fp
 8009ad6:	f7f6 fd2f 	bl	8000538 <__aeabi_dmul>
 8009ada:	a33a      	add	r3, pc, #232	; (adr r3, 8009bc4 <__kernel_sin+0x164>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fb76 	bl	80001d0 <__aeabi_dsub>
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	465b      	mov	r3, fp
 8009ae8:	f7f6 fd26 	bl	8000538 <__aeabi_dmul>
 8009aec:	a337      	add	r3, pc, #220	; (adr r3, 8009bcc <__kernel_sin+0x16c>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	f7f6 fb6f 	bl	80001d4 <__adddf3>
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	4606      	mov	r6, r0
 8009afa:	460f      	mov	r7, r1
 8009afc:	b9db      	cbnz	r3, 8009b36 <__kernel_sin+0xd6>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4650      	mov	r0, sl
 8009b04:	4659      	mov	r1, fp
 8009b06:	f7f6 fd17 	bl	8000538 <__aeabi_dmul>
 8009b0a:	a325      	add	r3, pc, #148	; (adr r3, 8009ba0 <__kernel_sin+0x140>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 fb5e 	bl	80001d0 <__aeabi_dsub>
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	f7f6 fd0e 	bl	8000538 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4620      	mov	r0, r4
 8009b22:	4629      	mov	r1, r5
 8009b24:	f7f6 fb56 	bl	80001d4 <__adddf3>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	ec45 4b10 	vmov	d0, r4, r5
 8009b30:	b005      	add	sp, #20
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	2200      	movs	r2, #0
 8009b38:	4b1b      	ldr	r3, [pc, #108]	; (8009ba8 <__kernel_sin+0x148>)
 8009b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b3e:	f7f6 fcfb 	bl	8000538 <__aeabi_dmul>
 8009b42:	4632      	mov	r2, r6
 8009b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b48:	463b      	mov	r3, r7
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 fcf3 	bl	8000538 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5a:	f7f6 fb39 	bl	80001d0 <__aeabi_dsub>
 8009b5e:	4652      	mov	r2, sl
 8009b60:	465b      	mov	r3, fp
 8009b62:	f7f6 fce9 	bl	8000538 <__aeabi_dmul>
 8009b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b6a:	f7f6 fb31 	bl	80001d0 <__aeabi_dsub>
 8009b6e:	a30c      	add	r3, pc, #48	; (adr r3, 8009ba0 <__kernel_sin+0x140>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	4606      	mov	r6, r0
 8009b76:	460f      	mov	r7, r1
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 fcdc 	bl	8000538 <__aeabi_dmul>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 fb24 	bl	80001d4 <__adddf3>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb1c 	bl	80001d0 <__aeabi_dsub>
 8009b98:	e7c6      	b.n	8009b28 <__kernel_sin+0xc8>
 8009b9a:	bf00      	nop
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	55555549 	.word	0x55555549
 8009ba4:	3fc55555 	.word	0x3fc55555
 8009ba8:	3fe00000 	.word	0x3fe00000
 8009bac:	5acfd57c 	.word	0x5acfd57c
 8009bb0:	3de5d93a 	.word	0x3de5d93a
 8009bb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009bb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009bbc:	57b1fe7d 	.word	0x57b1fe7d
 8009bc0:	3ec71de3 	.word	0x3ec71de3
 8009bc4:	19c161d5 	.word	0x19c161d5
 8009bc8:	3f2a01a0 	.word	0x3f2a01a0
 8009bcc:	1110f8a6 	.word	0x1110f8a6
 8009bd0:	3f811111 	.word	0x3f811111
 8009bd4:	00000000 	.word	0x00000000

08009bd8 <atan>:
 8009bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	ec55 4b10 	vmov	r4, r5, d0
 8009be0:	4bc7      	ldr	r3, [pc, #796]	; (8009f00 <atan+0x328>)
 8009be2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009be6:	429e      	cmp	r6, r3
 8009be8:	46ab      	mov	fp, r5
 8009bea:	dd18      	ble.n	8009c1e <atan+0x46>
 8009bec:	4ac5      	ldr	r2, [pc, #788]	; (8009f04 <atan+0x32c>)
 8009bee:	4296      	cmp	r6, r2
 8009bf0:	dc01      	bgt.n	8009bf6 <atan+0x1e>
 8009bf2:	d109      	bne.n	8009c08 <atan+0x30>
 8009bf4:	b144      	cbz	r4, 8009c08 <atan+0x30>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fae9 	bl	80001d4 <__adddf3>
 8009c02:	4604      	mov	r4, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	e006      	b.n	8009c16 <atan+0x3e>
 8009c08:	f1bb 0f00 	cmp.w	fp, #0
 8009c0c:	f300 813a 	bgt.w	8009e84 <atan+0x2ac>
 8009c10:	a59f      	add	r5, pc, #636	; (adr r5, 8009e90 <atan+0x2b8>)
 8009c12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c16:	ec45 4b10 	vmov	d0, r4, r5
 8009c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	4bba      	ldr	r3, [pc, #744]	; (8009f08 <atan+0x330>)
 8009c20:	429e      	cmp	r6, r3
 8009c22:	dc14      	bgt.n	8009c4e <atan+0x76>
 8009c24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	dc0d      	bgt.n	8009c48 <atan+0x70>
 8009c2c:	a39a      	add	r3, pc, #616	; (adr r3, 8009e98 <atan+0x2c0>)
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	ee10 0a10 	vmov	r0, s0
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 facc 	bl	80001d4 <__adddf3>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4bb3      	ldr	r3, [pc, #716]	; (8009f0c <atan+0x334>)
 8009c40:	f7f6 ff0a 	bl	8000a58 <__aeabi_dcmpgt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1e6      	bne.n	8009c16 <atan+0x3e>
 8009c48:	f04f 3aff 	mov.w	sl, #4294967295
 8009c4c:	e02b      	b.n	8009ca6 <atan+0xce>
 8009c4e:	f000 f96b 	bl	8009f28 <fabs>
 8009c52:	4baf      	ldr	r3, [pc, #700]	; (8009f10 <atan+0x338>)
 8009c54:	429e      	cmp	r6, r3
 8009c56:	ec55 4b10 	vmov	r4, r5, d0
 8009c5a:	f300 80bf 	bgt.w	8009ddc <atan+0x204>
 8009c5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c62:	429e      	cmp	r6, r3
 8009c64:	f300 80a0 	bgt.w	8009da8 <atan+0x1d0>
 8009c68:	ee10 2a10 	vmov	r2, s0
 8009c6c:	ee10 0a10 	vmov	r0, s0
 8009c70:	462b      	mov	r3, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 faae 	bl	80001d4 <__adddf3>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4ba4      	ldr	r3, [pc, #656]	; (8009f0c <atan+0x334>)
 8009c7c:	f7f6 faa8 	bl	80001d0 <__aeabi_dsub>
 8009c80:	2200      	movs	r2, #0
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 faa1 	bl	80001d4 <__adddf3>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 fd77 	bl	800078c <__aeabi_ddiv>
 8009c9e:	f04f 0a00 	mov.w	sl, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fc43 	bl	8000538 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	4689      	mov	r9, r1
 8009cba:	f7f6 fc3d 	bl	8000538 <__aeabi_dmul>
 8009cbe:	a378      	add	r3, pc, #480	; (adr r3, 8009ea0 <atan+0x2c8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	f7f6 fc36 	bl	8000538 <__aeabi_dmul>
 8009ccc:	a376      	add	r3, pc, #472	; (adr r3, 8009ea8 <atan+0x2d0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fa7f 	bl	80001d4 <__adddf3>
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f7f6 fc2d 	bl	8000538 <__aeabi_dmul>
 8009cde:	a374      	add	r3, pc, #464	; (adr r3, 8009eb0 <atan+0x2d8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fa76 	bl	80001d4 <__adddf3>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fc24 	bl	8000538 <__aeabi_dmul>
 8009cf0:	a371      	add	r3, pc, #452	; (adr r3, 8009eb8 <atan+0x2e0>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fa6d 	bl	80001d4 <__adddf3>
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	f7f6 fc1b 	bl	8000538 <__aeabi_dmul>
 8009d02:	a36f      	add	r3, pc, #444	; (adr r3, 8009ec0 <atan+0x2e8>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fa64 	bl	80001d4 <__adddf3>
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	f7f6 fc12 	bl	8000538 <__aeabi_dmul>
 8009d14:	a36c      	add	r3, pc, #432	; (adr r3, 8009ec8 <atan+0x2f0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fa5b 	bl	80001d4 <__adddf3>
 8009d1e:	4642      	mov	r2, r8
 8009d20:	464b      	mov	r3, r9
 8009d22:	f7f6 fc09 	bl	8000538 <__aeabi_dmul>
 8009d26:	a36a      	add	r3, pc, #424	; (adr r3, 8009ed0 <atan+0x2f8>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fc00 	bl	8000538 <__aeabi_dmul>
 8009d38:	a367      	add	r3, pc, #412	; (adr r3, 8009ed8 <atan+0x300>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 fa47 	bl	80001d0 <__aeabi_dsub>
 8009d42:	4632      	mov	r2, r6
 8009d44:	463b      	mov	r3, r7
 8009d46:	f7f6 fbf7 	bl	8000538 <__aeabi_dmul>
 8009d4a:	a365      	add	r3, pc, #404	; (adr r3, 8009ee0 <atan+0x308>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fa3e 	bl	80001d0 <__aeabi_dsub>
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	f7f6 fbee 	bl	8000538 <__aeabi_dmul>
 8009d5c:	a362      	add	r3, pc, #392	; (adr r3, 8009ee8 <atan+0x310>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fa35 	bl	80001d0 <__aeabi_dsub>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	f7f6 fbe5 	bl	8000538 <__aeabi_dmul>
 8009d6e:	a360      	add	r3, pc, #384	; (adr r3, 8009ef0 <atan+0x318>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa2c 	bl	80001d0 <__aeabi_dsub>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fbdc 	bl	8000538 <__aeabi_dmul>
 8009d80:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	d155      	bne.n	8009e36 <atan+0x25e>
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 fa21 	bl	80001d4 <__adddf3>
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	f7f6 fbcf 	bl	8000538 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa15 	bl	80001d0 <__aeabi_dsub>
 8009da6:	e72c      	b.n	8009c02 <atan+0x2a>
 8009da8:	ee10 0a10 	vmov	r0, s0
 8009dac:	2200      	movs	r2, #0
 8009dae:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <atan+0x334>)
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fa0d 	bl	80001d0 <__aeabi_dsub>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	4b53      	ldr	r3, [pc, #332]	; (8009f0c <atan+0x334>)
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fa07 	bl	80001d4 <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fcdd 	bl	800078c <__aeabi_ddiv>
 8009dd2:	f04f 0a01 	mov.w	sl, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	e764      	b.n	8009ca6 <atan+0xce>
 8009ddc:	4b4d      	ldr	r3, [pc, #308]	; (8009f14 <atan+0x33c>)
 8009dde:	429e      	cmp	r6, r3
 8009de0:	dc1d      	bgt.n	8009e1e <atan+0x246>
 8009de2:	ee10 0a10 	vmov	r0, s0
 8009de6:	2200      	movs	r2, #0
 8009de8:	4b4b      	ldr	r3, [pc, #300]	; (8009f18 <atan+0x340>)
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 f9f0 	bl	80001d0 <__aeabi_dsub>
 8009df0:	2200      	movs	r2, #0
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	4b48      	ldr	r3, [pc, #288]	; (8009f18 <atan+0x340>)
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fb9c 	bl	8000538 <__aeabi_dmul>
 8009e00:	2200      	movs	r2, #0
 8009e02:	4b42      	ldr	r3, [pc, #264]	; (8009f0c <atan+0x334>)
 8009e04:	f7f6 f9e6 	bl	80001d4 <__adddf3>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fcbc 	bl	800078c <__aeabi_ddiv>
 8009e14:	f04f 0a02 	mov.w	sl, #2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	e743      	b.n	8009ca6 <atan+0xce>
 8009e1e:	462b      	mov	r3, r5
 8009e20:	ee10 2a10 	vmov	r2, s0
 8009e24:	2000      	movs	r0, #0
 8009e26:	493d      	ldr	r1, [pc, #244]	; (8009f1c <atan+0x344>)
 8009e28:	f7f6 fcb0 	bl	800078c <__aeabi_ddiv>
 8009e2c:	f04f 0a03 	mov.w	sl, #3
 8009e30:	4604      	mov	r4, r0
 8009e32:	460d      	mov	r5, r1
 8009e34:	e737      	b.n	8009ca6 <atan+0xce>
 8009e36:	4640      	mov	r0, r8
 8009e38:	4649      	mov	r1, r9
 8009e3a:	f7f6 f9cb 	bl	80001d4 <__adddf3>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	f7f6 fb79 	bl	8000538 <__aeabi_dmul>
 8009e46:	4e36      	ldr	r6, [pc, #216]	; (8009f20 <atan+0x348>)
 8009e48:	4b36      	ldr	r3, [pc, #216]	; (8009f24 <atan+0x34c>)
 8009e4a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009e4e:	4456      	add	r6, sl
 8009e50:	449a      	add	sl, r3
 8009e52:	e9da 2300 	ldrd	r2, r3, [sl]
 8009e56:	f7f6 f9bb 	bl	80001d0 <__aeabi_dsub>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	f7f6 f9b7 	bl	80001d0 <__aeabi_dsub>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e6a:	f7f6 f9b1 	bl	80001d0 <__aeabi_dsub>
 8009e6e:	f1bb 0f00 	cmp.w	fp, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	460d      	mov	r5, r1
 8009e76:	f6bf aece 	bge.w	8009c16 <atan+0x3e>
 8009e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e7e:	4604      	mov	r4, r0
 8009e80:	461d      	mov	r5, r3
 8009e82:	e6c8      	b.n	8009c16 <atan+0x3e>
 8009e84:	a51c      	add	r5, pc, #112	; (adr r5, 8009ef8 <atan+0x320>)
 8009e86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e8a:	e6c4      	b.n	8009c16 <atan+0x3e>
 8009e8c:	f3af 8000 	nop.w
 8009e90:	54442d18 	.word	0x54442d18
 8009e94:	bff921fb 	.word	0xbff921fb
 8009e98:	8800759c 	.word	0x8800759c
 8009e9c:	7e37e43c 	.word	0x7e37e43c
 8009ea0:	e322da11 	.word	0xe322da11
 8009ea4:	3f90ad3a 	.word	0x3f90ad3a
 8009ea8:	24760deb 	.word	0x24760deb
 8009eac:	3fa97b4b 	.word	0x3fa97b4b
 8009eb0:	a0d03d51 	.word	0xa0d03d51
 8009eb4:	3fb10d66 	.word	0x3fb10d66
 8009eb8:	c54c206e 	.word	0xc54c206e
 8009ebc:	3fb745cd 	.word	0x3fb745cd
 8009ec0:	920083ff 	.word	0x920083ff
 8009ec4:	3fc24924 	.word	0x3fc24924
 8009ec8:	5555550d 	.word	0x5555550d
 8009ecc:	3fd55555 	.word	0x3fd55555
 8009ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009ed4:	bfa2b444 	.word	0xbfa2b444
 8009ed8:	52defd9a 	.word	0x52defd9a
 8009edc:	3fadde2d 	.word	0x3fadde2d
 8009ee0:	af749a6d 	.word	0xaf749a6d
 8009ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ee8:	fe231671 	.word	0xfe231671
 8009eec:	3fbc71c6 	.word	0x3fbc71c6
 8009ef0:	9998ebc4 	.word	0x9998ebc4
 8009ef4:	3fc99999 	.word	0x3fc99999
 8009ef8:	54442d18 	.word	0x54442d18
 8009efc:	3ff921fb 	.word	0x3ff921fb
 8009f00:	440fffff 	.word	0x440fffff
 8009f04:	7ff00000 	.word	0x7ff00000
 8009f08:	3fdbffff 	.word	0x3fdbffff
 8009f0c:	3ff00000 	.word	0x3ff00000
 8009f10:	3ff2ffff 	.word	0x3ff2ffff
 8009f14:	40037fff 	.word	0x40037fff
 8009f18:	3ff80000 	.word	0x3ff80000
 8009f1c:	bff00000 	.word	0xbff00000
 8009f20:	0800a508 	.word	0x0800a508
 8009f24:	0800a528 	.word	0x0800a528

08009f28 <fabs>:
 8009f28:	ec53 2b10 	vmov	r2, r3, d0
 8009f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f30:	ec43 2b10 	vmov	d0, r2, r3
 8009f34:	4770      	bx	lr

08009f36 <finite>:
 8009f36:	ee10 3a90 	vmov	r3, s1
 8009f3a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009f3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f42:	0fc0      	lsrs	r0, r0, #31
 8009f44:	4770      	bx	lr
	...

08009f48 <floor>:
 8009f48:	ec51 0b10 	vmov	r0, r1, d0
 8009f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009f58:	2e13      	cmp	r6, #19
 8009f5a:	ee10 8a10 	vmov	r8, s0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	ee10 5a10 	vmov	r5, s0
 8009f64:	dc35      	bgt.n	8009fd2 <floor+0x8a>
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	da17      	bge.n	8009f9a <floor+0x52>
 8009f6a:	a335      	add	r3, pc, #212	; (adr r3, 800a040 <floor+0xf8>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 f930 	bl	80001d4 <__adddf3>
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	f7f6 fd6e 	bl	8000a58 <__aeabi_dcmpgt>
 8009f7c:	b150      	cbz	r0, 8009f94 <floor+0x4c>
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	da5a      	bge.n	800a038 <floor+0xf0>
 8009f82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009f86:	ea53 0308 	orrs.w	r3, r3, r8
 8009f8a:	4b2f      	ldr	r3, [pc, #188]	; (800a048 <floor+0x100>)
 8009f8c:	f04f 0500 	mov.w	r5, #0
 8009f90:	bf18      	it	ne
 8009f92:	461c      	movne	r4, r3
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	e025      	b.n	8009fe6 <floor+0x9e>
 8009f9a:	4f2c      	ldr	r7, [pc, #176]	; (800a04c <floor+0x104>)
 8009f9c:	4137      	asrs	r7, r6
 8009f9e:	ea01 0307 	and.w	r3, r1, r7
 8009fa2:	4303      	orrs	r3, r0
 8009fa4:	d01f      	beq.n	8009fe6 <floor+0x9e>
 8009fa6:	a326      	add	r3, pc, #152	; (adr r3, 800a040 <floor+0xf8>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 f912 	bl	80001d4 <__adddf3>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f7f6 fd50 	bl	8000a58 <__aeabi_dcmpgt>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0eb      	beq.n	8009f94 <floor+0x4c>
 8009fbc:	2c00      	cmp	r4, #0
 8009fbe:	bfbe      	ittt	lt
 8009fc0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009fc4:	fa43 f606 	asrlt.w	r6, r3, r6
 8009fc8:	19a4      	addlt	r4, r4, r6
 8009fca:	ea24 0407 	bic.w	r4, r4, r7
 8009fce:	2500      	movs	r5, #0
 8009fd0:	e7e0      	b.n	8009f94 <floor+0x4c>
 8009fd2:	2e33      	cmp	r6, #51	; 0x33
 8009fd4:	dd0b      	ble.n	8009fee <floor+0xa6>
 8009fd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009fda:	d104      	bne.n	8009fe6 <floor+0x9e>
 8009fdc:	ee10 2a10 	vmov	r2, s0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	f7f6 f8f7 	bl	80001d4 <__adddf3>
 8009fe6:	ec41 0b10 	vmov	d0, r0, r1
 8009fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fee:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	fa23 f707 	lsr.w	r7, r3, r7
 8009ffa:	4238      	tst	r0, r7
 8009ffc:	d0f3      	beq.n	8009fe6 <floor+0x9e>
 8009ffe:	a310      	add	r3, pc, #64	; (adr r3, 800a040 <floor+0xf8>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 f8e6 	bl	80001d4 <__adddf3>
 800a008:	2200      	movs	r2, #0
 800a00a:	2300      	movs	r3, #0
 800a00c:	f7f6 fd24 	bl	8000a58 <__aeabi_dcmpgt>
 800a010:	2800      	cmp	r0, #0
 800a012:	d0bf      	beq.n	8009f94 <floor+0x4c>
 800a014:	2c00      	cmp	r4, #0
 800a016:	da02      	bge.n	800a01e <floor+0xd6>
 800a018:	2e14      	cmp	r6, #20
 800a01a:	d103      	bne.n	800a024 <floor+0xdc>
 800a01c:	3401      	adds	r4, #1
 800a01e:	ea25 0507 	bic.w	r5, r5, r7
 800a022:	e7b7      	b.n	8009f94 <floor+0x4c>
 800a024:	2301      	movs	r3, #1
 800a026:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a02a:	fa03 f606 	lsl.w	r6, r3, r6
 800a02e:	4435      	add	r5, r6
 800a030:	45a8      	cmp	r8, r5
 800a032:	bf88      	it	hi
 800a034:	18e4      	addhi	r4, r4, r3
 800a036:	e7f2      	b.n	800a01e <floor+0xd6>
 800a038:	2500      	movs	r5, #0
 800a03a:	462c      	mov	r4, r5
 800a03c:	e7aa      	b.n	8009f94 <floor+0x4c>
 800a03e:	bf00      	nop
 800a040:	8800759c 	.word	0x8800759c
 800a044:	7e37e43c 	.word	0x7e37e43c
 800a048:	bff00000 	.word	0xbff00000
 800a04c:	000fffff 	.word	0x000fffff

0800a050 <matherr>:
 800a050:	2000      	movs	r0, #0
 800a052:	4770      	bx	lr
 800a054:	0000      	movs	r0, r0
	...

0800a058 <nan>:
 800a058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a060 <nan+0x8>
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00000000 	.word	0x00000000
 800a064:	7ff80000 	.word	0x7ff80000

0800a068 <rint>:
 800a068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a072:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800a076:	2e13      	cmp	r6, #19
 800a078:	ee10 7a10 	vmov	r7, s0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4602      	mov	r2, r0
 800a080:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a084:	dc58      	bgt.n	800a138 <rint+0xd0>
 800a086:	2e00      	cmp	r6, #0
 800a088:	da2b      	bge.n	800a0e2 <rint+0x7a>
 800a08a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a08e:	4302      	orrs	r2, r0
 800a090:	d023      	beq.n	800a0da <rint+0x72>
 800a092:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a096:	4302      	orrs	r2, r0
 800a098:	4251      	negs	r1, r2
 800a09a:	4311      	orrs	r1, r2
 800a09c:	0b09      	lsrs	r1, r1, #12
 800a09e:	0c5b      	lsrs	r3, r3, #17
 800a0a0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800a0a4:	045b      	lsls	r3, r3, #17
 800a0a6:	ea41 0703 	orr.w	r7, r1, r3
 800a0aa:	4b31      	ldr	r3, [pc, #196]	; (800a170 <rint+0x108>)
 800a0ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a0b6:	ee10 0a10 	vmov	r0, s0
 800a0ba:	4632      	mov	r2, r6
 800a0bc:	463b      	mov	r3, r7
 800a0be:	f7f6 f889 	bl	80001d4 <__adddf3>
 800a0c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ce:	f7f6 f87f 	bl	80001d0 <__aeabi_dsub>
 800a0d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0d6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800a0da:	ec41 0b10 	vmov	d0, r0, r1
 800a0de:	b003      	add	sp, #12
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	4c24      	ldr	r4, [pc, #144]	; (800a174 <rint+0x10c>)
 800a0e4:	4134      	asrs	r4, r6
 800a0e6:	ea01 0704 	and.w	r7, r1, r4
 800a0ea:	4307      	orrs	r7, r0
 800a0ec:	d0f5      	beq.n	800a0da <rint+0x72>
 800a0ee:	0861      	lsrs	r1, r4, #1
 800a0f0:	ea03 0001 	and.w	r0, r3, r1
 800a0f4:	4302      	orrs	r2, r0
 800a0f6:	d00b      	beq.n	800a110 <rint+0xa8>
 800a0f8:	ea23 0101 	bic.w	r1, r3, r1
 800a0fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a100:	2e13      	cmp	r6, #19
 800a102:	fa43 f306 	asr.w	r3, r3, r6
 800a106:	bf0c      	ite	eq
 800a108:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a10c:	2200      	movne	r2, #0
 800a10e:	430b      	orrs	r3, r1
 800a110:	4619      	mov	r1, r3
 800a112:	4b17      	ldr	r3, [pc, #92]	; (800a170 <rint+0x108>)
 800a114:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a118:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a11c:	4610      	mov	r0, r2
 800a11e:	462b      	mov	r3, r5
 800a120:	4622      	mov	r2, r4
 800a122:	f7f6 f857 	bl	80001d4 <__adddf3>
 800a126:	e9cd 0100 	strd	r0, r1, [sp]
 800a12a:	4622      	mov	r2, r4
 800a12c:	462b      	mov	r3, r5
 800a12e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a132:	f7f6 f84d 	bl	80001d0 <__aeabi_dsub>
 800a136:	e7d0      	b.n	800a0da <rint+0x72>
 800a138:	2e33      	cmp	r6, #51	; 0x33
 800a13a:	dd08      	ble.n	800a14e <rint+0xe6>
 800a13c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a140:	d1cb      	bne.n	800a0da <rint+0x72>
 800a142:	ee10 2a10 	vmov	r2, s0
 800a146:	460b      	mov	r3, r1
 800a148:	f7f6 f844 	bl	80001d4 <__adddf3>
 800a14c:	e7c5      	b.n	800a0da <rint+0x72>
 800a14e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a152:	f04f 34ff 	mov.w	r4, #4294967295
 800a156:	40f4      	lsrs	r4, r6
 800a158:	4220      	tst	r0, r4
 800a15a:	d0be      	beq.n	800a0da <rint+0x72>
 800a15c:	0861      	lsrs	r1, r4, #1
 800a15e:	420f      	tst	r7, r1
 800a160:	bf1f      	itttt	ne
 800a162:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a166:	ea27 0101 	bicne.w	r1, r7, r1
 800a16a:	4132      	asrne	r2, r6
 800a16c:	430a      	orrne	r2, r1
 800a16e:	e7cf      	b.n	800a110 <rint+0xa8>
 800a170:	0800a548 	.word	0x0800a548
 800a174:	000fffff 	.word	0x000fffff

0800a178 <scalbn>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	ec55 4b10 	vmov	r4, r5, d0
 800a17e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a182:	4606      	mov	r6, r0
 800a184:	462b      	mov	r3, r5
 800a186:	b9b2      	cbnz	r2, 800a1b6 <scalbn+0x3e>
 800a188:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a18c:	4323      	orrs	r3, r4
 800a18e:	d03c      	beq.n	800a20a <scalbn+0x92>
 800a190:	2200      	movs	r2, #0
 800a192:	4b33      	ldr	r3, [pc, #204]	; (800a260 <scalbn+0xe8>)
 800a194:	4629      	mov	r1, r5
 800a196:	ee10 0a10 	vmov	r0, s0
 800a19a:	f7f6 f9cd 	bl	8000538 <__aeabi_dmul>
 800a19e:	4a31      	ldr	r2, [pc, #196]	; (800a264 <scalbn+0xec>)
 800a1a0:	4296      	cmp	r6, r2
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	da13      	bge.n	800a1d2 <scalbn+0x5a>
 800a1aa:	a329      	add	r3, pc, #164	; (adr r3, 800a250 <scalbn+0xd8>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f9c2 	bl	8000538 <__aeabi_dmul>
 800a1b4:	e00a      	b.n	800a1cc <scalbn+0x54>
 800a1b6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a1ba:	428a      	cmp	r2, r1
 800a1bc:	d10c      	bne.n	800a1d8 <scalbn+0x60>
 800a1be:	ee10 2a10 	vmov	r2, s0
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 f804 	bl	80001d4 <__adddf3>
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	e01b      	b.n	800a20a <scalbn+0x92>
 800a1d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1d6:	3a36      	subs	r2, #54	; 0x36
 800a1d8:	4432      	add	r2, r6
 800a1da:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1de:	428a      	cmp	r2, r1
 800a1e0:	dd0b      	ble.n	800a1fa <scalbn+0x82>
 800a1e2:	ec45 4b11 	vmov	d1, r4, r5
 800a1e6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a258 <scalbn+0xe0>
 800a1ea:	f000 f83f 	bl	800a26c <copysign>
 800a1ee:	a31a      	add	r3, pc, #104	; (adr r3, 800a258 <scalbn+0xe0>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	ec51 0b10 	vmov	r0, r1, d0
 800a1f8:	e7da      	b.n	800a1b0 <scalbn+0x38>
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	dd08      	ble.n	800a210 <scalbn+0x98>
 800a1fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a202:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a206:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a20a:	ec45 4b10 	vmov	d0, r4, r5
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a214:	da0d      	bge.n	800a232 <scalbn+0xba>
 800a216:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a21a:	429e      	cmp	r6, r3
 800a21c:	ec45 4b11 	vmov	d1, r4, r5
 800a220:	dce1      	bgt.n	800a1e6 <scalbn+0x6e>
 800a222:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800a250 <scalbn+0xd8>
 800a226:	f000 f821 	bl	800a26c <copysign>
 800a22a:	a309      	add	r3, pc, #36	; (adr r3, 800a250 <scalbn+0xd8>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	e7e0      	b.n	800a1f4 <scalbn+0x7c>
 800a232:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a236:	3236      	adds	r2, #54	; 0x36
 800a238:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a23c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	2200      	movs	r2, #0
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <scalbn+0xf0>)
 800a248:	e7b2      	b.n	800a1b0 <scalbn+0x38>
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	c2f8f359 	.word	0xc2f8f359
 800a254:	01a56e1f 	.word	0x01a56e1f
 800a258:	8800759c 	.word	0x8800759c
 800a25c:	7e37e43c 	.word	0x7e37e43c
 800a260:	43500000 	.word	0x43500000
 800a264:	ffff3cb0 	.word	0xffff3cb0
 800a268:	3c900000 	.word	0x3c900000

0800a26c <copysign>:
 800a26c:	ec53 2b10 	vmov	r2, r3, d0
 800a270:	ee11 0a90 	vmov	r0, s3
 800a274:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a27c:	ea41 0300 	orr.w	r3, r1, r0
 800a280:	ec43 2b10 	vmov	d0, r2, r3
 800a284:	4770      	bx	lr
	...

0800a288 <__errno>:
 800a288:	4b01      	ldr	r3, [pc, #4]	; (800a290 <__errno+0x8>)
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	2000000c 	.word	0x2000000c

0800a294 <_init>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr

0800a2a0 <_fini>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr
